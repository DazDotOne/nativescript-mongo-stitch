declare module com {
	export module mongodb {
		export class AcknowledgedBulkWriteResult extends com.mongodb.BulkWriteResult {
			public static class: java.lang.Class<com.mongodb.AcknowledgedBulkWriteResult>;
			public getMatchedCount(): number;
			public equals(param0: any): boolean;
			public getInsertedCount(): number;
			public isModifiedCountAvailable(): boolean;
			public toString(): string;
			public getModifiedCount(): number;
			public getUpserts(): java.util.List<com.mongodb.BulkWriteUpsert>;
			public getRemovedCount(): number;
			public isAcknowledged(): boolean;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class AggregationOptions {
			public static class: java.lang.Class<com.mongodb.AggregationOptions>;
			public static builder(): com.mongodb.AggregationOptions.Builder;
			public getBatchSize(): java.lang.Integer;
			public getAllowDiskUse(): java.lang.Boolean;
			public toString(): string;
			public getCollation(): com.mongodb.client.model.Collation;
			public getOutputMode(): com.mongodb.AggregationOptions.OutputMode;
			public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
			public getBypassDocumentValidation(): java.lang.Boolean;
		}
		export module AggregationOptions {
			export class Builder {
				public static class: java.lang.Class<com.mongodb.AggregationOptions.Builder>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.AggregationOptions.Builder;
				public allowDiskUse(param0: java.lang.Boolean): com.mongodb.AggregationOptions.Builder;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.AggregationOptions.Builder;
				public outputMode(param0: com.mongodb.AggregationOptions.OutputMode): com.mongodb.AggregationOptions.Builder;
				public build(): com.mongodb.AggregationOptions;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.AggregationOptions.Builder;
				public batchSize(param0: java.lang.Integer): com.mongodb.AggregationOptions.Builder;
			}
			export class OutputMode {
				public static class: java.lang.Class<com.mongodb.AggregationOptions.OutputMode>;
				public static INLINE: com.mongodb.AggregationOptions.OutputMode;
				public static CURSOR: com.mongodb.AggregationOptions.OutputMode;
				public static values(): native.Array<com.mongodb.AggregationOptions.OutputMode>;
				public static valueOf(param0: string): com.mongodb.AggregationOptions.OutputMode;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class AggregationOutput {
			public static class: java.lang.Class<com.mongodb.AggregationOutput>;
			public results(): java.lang.Iterable<com.mongodb.DBObject>;
		}
	}
}

declare module com {
	export module mongodb {
		export class AuthenticationMechanism {
			public static class: java.lang.Class<com.mongodb.AuthenticationMechanism>;
			public static GSSAPI: com.mongodb.AuthenticationMechanism;
			public static PLAIN: com.mongodb.AuthenticationMechanism;
			public static MONGODB_X509: com.mongodb.AuthenticationMechanism;
			public static MONGODB_CR: com.mongodb.AuthenticationMechanism;
			public static SCRAM_SHA_1: com.mongodb.AuthenticationMechanism;
			public static SCRAM_SHA_256: com.mongodb.AuthenticationMechanism;
			public toString(): string;
			public static values(): native.Array<com.mongodb.AuthenticationMechanism>;
			public static valueOf(param0: string): com.mongodb.AuthenticationMechanism;
			public getMechanismName(): string;
			public static fromMechanismName(param0: string): com.mongodb.AuthenticationMechanism;
		}
	}
}

declare module com {
	export module mongodb {
		export class BSONTimestampCodec extends org.bson.codecs.Codec<org.bson.types.BSONTimestamp> {
			public static class: java.lang.Class<com.mongodb.BSONTimestampCodec>;
			public getEncoderClass(): java.lang.Class<org.bson.types.BSONTimestamp>;
			public getEncoderClass(): java.lang.Class<any>;
			public encode(param0: org.bson.BsonWriter, param1: org.bson.types.BSONTimestamp, param2: org.bson.codecs.EncoderContext): void;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
			public constructor();
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.BSONTimestamp;
			public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class BasicDBList extends org.bson.types.BasicBSONList implements com.mongodb.DBObject {
			public static class: java.lang.Class<com.mongodb.BasicDBList>;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public toMap(): java.util.Map;
			public copy(): any;
			public constructor();
			public containsField(param0: string): boolean;
			public removeField(param0: string): any;
			public put(param0: number, param1: any): any;
			public markAsPartialObject(): void;
			public putAll(param0: org.bson.BSONObject): void;
			public containsKey(param0: string): boolean;
			public isPartialObject(): boolean;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class BasicDBObject extends org.bson.BasicBSONObject implements com.mongodb.DBObject, org.bson.conversions.Bson {
			public static class: java.lang.Class<com.mongodb.BasicDBObject>;
			public constructor(param0: java.util.Map);
			public keySet(): java.util.Set<string>;
			public equals(param0: any): boolean;
			public put(param0: string, param1: any): any;
			public static parse(param0: string): com.mongodb.BasicDBObject;
			public copy(): any;
			public static parse(param0: string, param1: org.bson.codecs.Decoder<com.mongodb.BasicDBObject>): com.mongodb.BasicDBObject;
			public append(param0: string, param1: any): com.mongodb.BasicDBObject;
			public append(param0: string, param1: any): org.bson.BasicBSONObject;
			public constructor(param0: string, param1: any);
			public markAsPartialObject(): void;
			public containsKey(param0: string): boolean;
			public toJson(param0: org.bson.codecs.Encoder<com.mongodb.BasicDBObject>): string;
			public get(param0: string): any;
			public toMap(): java.util.Map;
			public constructor(param0: number);
			public constructor();
			public containsField(param0: string): boolean;
			public removeField(param0: string): any;
			public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			public toString(): string;
			public toJson(param0: org.bson.json.JsonWriterSettings): string;
			public toJson(): string;
			public toJson(param0: org.bson.json.JsonWriterSettings, param1: org.bson.codecs.Encoder<com.mongodb.BasicDBObject>): string;
			public putAll(param0: org.bson.BSONObject): void;
			public isPartialObject(): boolean;
			public hashCode(): number;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class BasicDBObjectBuilder {
			public static class: java.lang.Class<com.mongodb.BasicDBObjectBuilder>;
			public pop(): com.mongodb.BasicDBObjectBuilder;
			public get(): com.mongodb.DBObject;
			public isEmpty(): boolean;
			public static start(): com.mongodb.BasicDBObjectBuilder;
			public add(param0: string, param1: any): com.mongodb.BasicDBObjectBuilder;
			public static start(param0: string, param1: any): com.mongodb.BasicDBObjectBuilder;
			public push(param0: string): com.mongodb.BasicDBObjectBuilder;
			public constructor();
			public append(param0: string, param1: any): com.mongodb.BasicDBObjectBuilder;
			public static start(param0: java.util.Map): com.mongodb.BasicDBObjectBuilder;
		}
	}
}

declare module com {
	export module mongodb {
		export class BasicDBObjectFactory extends com.mongodb.DBObjectFactory {
			public static class: java.lang.Class<com.mongodb.BasicDBObjectFactory>;
			public getInstance(param0: java.util.List<string>): com.mongodb.DBObject;
			public getInstance(): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class Block<T>  extends java.lang.Object {
			public static class: java.lang.Class<com.mongodb.Block<any>>;
			/**
			 * Constructs a new instance of the com.mongodb.Block<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				apply(param0: T): void;
			});
			public constructor();
			public apply(param0: T): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class BulkUpdateRequestBuilder {
			public static class: java.lang.Class<com.mongodb.BulkUpdateRequestBuilder>;
			public getArrayFilters(): java.util.List<any>;
			public getCollation(): com.mongodb.client.model.Collation;
			public collation(param0: com.mongodb.client.model.Collation): com.mongodb.BulkUpdateRequestBuilder;
			public replaceOne(param0: com.mongodb.DBObject): void;
			public update(param0: com.mongodb.DBObject): void;
			public updateOne(param0: com.mongodb.DBObject): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class BulkWriteError {
			public static class: java.lang.Class<com.mongodb.BulkWriteError>;
			public getMessage(): string;
			public getIndex(): number;
			public equals(param0: any): boolean;
			public toString(): string;
			public constructor(param0: number, param1: string, param2: com.mongodb.DBObject, param3: number);
			public getDetails(): com.mongodb.DBObject;
			public getCode(): number;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class BulkWriteException extends com.mongodb.MongoServerException {
			public static class: java.lang.Class<com.mongodb.BulkWriteException>;
			public getWriteErrors(): java.util.List<com.mongodb.BulkWriteError>;
			public equals(param0: any): boolean;
			public getWriteConcernError(): com.mongodb.WriteConcernError;
			public getWriteResult(): com.mongodb.BulkWriteResult;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class BulkWriteHelper {
			public static class: java.lang.Class<com.mongodb.BulkWriteHelper>;
		}
	}
}

declare module com {
	export module mongodb {
		export class BulkWriteOperation {
			public static class: java.lang.Class<com.mongodb.BulkWriteOperation>;
			public insert(param0: com.mongodb.DBObject): void;
			public setBypassDocumentValidation(param0: java.lang.Boolean): void;
			public execute(): com.mongodb.BulkWriteResult;
			public execute(param0: com.mongodb.WriteConcern): com.mongodb.BulkWriteResult;
			public isOrdered(): boolean;
			public getBypassDocumentValidation(): java.lang.Boolean;
			public find(param0: com.mongodb.DBObject): com.mongodb.BulkWriteRequestBuilder;
		}
	}
}

declare module com {
	export module mongodb {
		export class BulkWriteRequestBuilder {
			public static class: java.lang.Class<com.mongodb.BulkWriteRequestBuilder>;
			public upsert(): com.mongodb.BulkUpdateRequestBuilder;
			public arrayFilters(param0: java.util.List<any>): com.mongodb.BulkUpdateRequestBuilder;
			public getCollation(): com.mongodb.client.model.Collation;
			public removeOne(): void;
			public replaceOne(param0: com.mongodb.DBObject): void;
			public collation(param0: com.mongodb.client.model.Collation): com.mongodb.BulkWriteRequestBuilder;
			public remove(): void;
			public update(param0: com.mongodb.DBObject): void;
			public updateOne(param0: com.mongodb.DBObject): void;
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class BulkWriteResult {
			public static class: java.lang.Class<com.mongodb.BulkWriteResult>;
			public getMatchedCount(): number;
			public getInsertedCount(): number;
			public isModifiedCountAvailable(): boolean;
			public getModifiedCount(): number;
			public getUpserts(): java.util.List<com.mongodb.BulkWriteUpsert>;
			public constructor();
			public getRemovedCount(): number;
			public isAcknowledged(): boolean;
		}
	}
}

declare module com {
	export module mongodb {
		export class BulkWriteUpsert {
			public static class: java.lang.Class<com.mongodb.BulkWriteUpsert>;
			public getIndex(): number;
			public equals(param0: any): boolean;
			public toString(): string;
			public getId(): any;
			public constructor(param0: number, param1: any);
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class Bytes extends org.bson.BSON {
			public static class: java.lang.Class<com.mongodb.Bytes>;
			public static ORDER: java.nio.ByteOrder;
			public static QUERYOPTION_TAILABLE: number;
			public static QUERYOPTION_SLAVEOK: number;
			public static QUERYOPTION_OPLOGREPLAY: number;
			public static QUERYOPTION_NOTIMEOUT: number;
			public static QUERYOPTION_AWAITDATA: number;
			public static QUERYOPTION_EXHAUST: number;
			public static QUERYOPTION_PARTIAL: number;
			public static RESULTFLAG_CURSORNOTFOUND: number;
			public static RESULTFLAG_ERRSET: number;
			public static RESULTFLAG_SHARDCONFIGSTALE: number;
			public static RESULTFLAG_AWAITCAPABLE: number;
			public static getType(param0: any): number;
			public constructor();
		}
		export module Bytes {
			export class OptionHolder {
				public static class: java.lang.Class<com.mongodb.Bytes.OptionHolder>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class ClientSessionOptions {
			public static class: java.lang.Class<com.mongodb.ClientSessionOptions>;
			public static builder(): com.mongodb.ClientSessionOptions.Builder;
			public equals(param0: any): boolean;
			public getDefaultTransactionOptions(): com.mongodb.TransactionOptions;
			public toString(): string;
			public static builder(param0: com.mongodb.ClientSessionOptions): com.mongodb.ClientSessionOptions.Builder;
			public isCausallyConsistent(): java.lang.Boolean;
			public hashCode(): number;
		}
		export module ClientSessionOptions {
			export class Builder {
				public static class: java.lang.Class<com.mongodb.ClientSessionOptions.Builder>;
				public causallyConsistent(param0: boolean): com.mongodb.ClientSessionOptions.Builder;
				public build(): com.mongodb.ClientSessionOptions;
				public defaultTransactionOptions(param0: com.mongodb.TransactionOptions): com.mongodb.ClientSessionOptions.Builder;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class CommandResult extends com.mongodb.BasicDBObject {
			public static class: java.lang.Class<com.mongodb.CommandResult>;
			public keySet(): java.util.Set<string>;
			public getException(): com.mongodb.MongoException;
			public throwOnError(): void;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public toMap(): java.util.Map;
			public containsField(param0: string): boolean;
			public removeField(param0: string): any;
			public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			public getErrorMessage(): string;
			public ok(): boolean;
			public markAsPartialObject(): void;
			public putAll(param0: org.bson.BSONObject): void;
			public containsKey(param0: string): boolean;
			public isPartialObject(): boolean;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class CompoundDBObjectCodec extends org.bson.codecs.Codec<com.mongodb.DBObject> {
			public static class: java.lang.Class<com.mongodb.CompoundDBObjectCodec>;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.DBObject;
			public getDecoder(): org.bson.codecs.Decoder<com.mongodb.DBObject>;
			public getEncoderClass(): java.lang.Class<com.mongodb.DBObject>;
			public getEncoderClass(): java.lang.Class<any>;
			public getEncoder(): org.bson.codecs.Encoder<com.mongodb.DBObject>;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
			public encode(param0: org.bson.BsonWriter, param1: com.mongodb.DBObject, param2: org.bson.codecs.EncoderContext): void;
			public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class ConnectionString {
			public static class: java.lang.Class<com.mongodb.ConnectionString>;
			public getThreadsAllowedToBlockForConnectionMultiplier(): java.lang.Integer;
			public getLocalThreshold(): java.lang.Integer;
			public equals(param0: any): boolean;
			public getApplicationName(): string;
			public getUsername(): string;
			public getHosts(): java.util.List<string>;
			public getConnectionString(): string;
			public getMaxConnectionPoolSize(): java.lang.Integer;
			public getSocketTimeout(): java.lang.Integer;
			public getMinConnectionPoolSize(): java.lang.Integer;
			public getStreamType(): string;
			public getRequiredReplicaSetName(): string;
			public getRetryWrites(): boolean;
			public getMaxConnectionLifeTime(): java.lang.Integer;
			public constructor(param0: string);
			public getCredential(): com.mongodb.MongoCredential;
			public getCollection(): string;
			public getMaxConnectionIdleTime(): java.lang.Integer;
			public getHeartbeatFrequency(): java.lang.Integer;
			public getURI(): string;
			public getRetryWritesValue(): java.lang.Boolean;
			public getMaxWaitTime(): java.lang.Integer;
			public getSslInvalidHostnameAllowed(): java.lang.Boolean;
			public getServerSelectionTimeout(): java.lang.Integer;
			public isSrvProtocol(): boolean;
			public getReadConcern(): com.mongodb.ReadConcern;
			public toString(): string;
			public getCompressorList(): java.util.List<com.mongodb.MongoCompressor>;
			public getPassword(): native.Array<string>;
			public getConnectTimeout(): java.lang.Integer;
			public getCredentialList(): java.util.List<com.mongodb.MongoCredential>;
			public getReadPreference(): com.mongodb.ReadPreference;
			public getWriteConcern(): com.mongodb.WriteConcern;
			public getDatabase(): string;
			public getSslEnabled(): java.lang.Boolean;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class Cursor extends java.lang.Object {
			public static class: java.lang.Class<com.mongodb.Cursor>;
			/**
			 * Constructs a new instance of the com.mongodb.Cursor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				getCursorId(): number;
				getServerAddress(): com.mongodb.ServerAddress;
				close(): void;
			});
			public constructor();
			public getCursorId(): number;
			public getServerAddress(): com.mongodb.ServerAddress;
			public close(): void;
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class CursorType {
			public static class: java.lang.Class<com.mongodb.CursorType>;
			public static NonTailable: com.mongodb.CursorType;
			public static Tailable: com.mongodb.CursorType;
			public static TailableAwait: com.mongodb.CursorType;
			public isTailable(): boolean;
			public static values(): native.Array<com.mongodb.CursorType>;
			public static valueOf(param0: string): com.mongodb.CursorType;
		}
	}
}

declare module com {
	export module mongodb {
		export class DB {
			public static class: java.lang.Class<com.mongodb.DB>;
			public createView(param0: string, param1: string, param2: java.util.List<any>, param3: com.mongodb.client.model.DBCreateViewOptions): com.mongodb.DBCollection;
			public command(param0: com.mongodb.DBObject, param1: com.mongodb.DBEncoder): com.mongodb.CommandResult;
			public constructor(param0: com.mongodb.Mongo, param1: string);
			public createCollection(param0: string, param1: com.mongodb.DBObject): com.mongodb.DBCollection;
			public addUser(param0: string, param1: native.Array<string>): com.mongodb.WriteResult;
			public doEval(param0: string, param1: native.Array<any>): com.mongodb.CommandResult;
			public setReadConcern(param0: com.mongodb.ReadConcern): void;
			public command(param0: com.mongodb.DBObject): com.mongodb.CommandResult;
			public getOptions(): number;
			public eval(param0: string, param1: native.Array<any>): any;
			public command(param0: com.mongodb.DBObject, param1: com.mongodb.ReadPreference, param2: com.mongodb.DBEncoder): com.mongodb.CommandResult;
			public slaveOk(): void;
			public resetOptions(): void;
			public getCollectionNames(): java.util.Set<string>;
			public createView(param0: string, param1: string, param2: java.util.List<any>): com.mongodb.DBCollection;
			public getCollectionFromString(param0: string): com.mongodb.DBCollection;
			public addUser(param0: string, param1: native.Array<string>, param2: boolean): com.mongodb.WriteResult;
			public getSisterDB(param0: string): com.mongodb.DB;
			public getMongo(): com.mongodb.Mongo;
			public command(param0: com.mongodb.DBObject, param1: com.mongodb.ReadPreference): com.mongodb.CommandResult;
			public getStats(): com.mongodb.CommandResult;
			public doGetCollection(param0: string): com.mongodb.DBCollection;
			public getReadConcern(): com.mongodb.ReadConcern;
			public toString(): string;
			public getName(): string;
			public command(param0: string): com.mongodb.CommandResult;
			public collectionExists(param0: string): boolean;
			public removeUser(param0: string): com.mongodb.WriteResult;
			public getCollection(param0: string): com.mongodb.DBCollection;
			public addOption(param0: number): void;
			public setOptions(param0: number): void;
			public setWriteConcern(param0: com.mongodb.WriteConcern): void;
			public getReadPreference(): com.mongodb.ReadPreference;
			public dropDatabase(): void;
			public getWriteConcern(): com.mongodb.WriteConcern;
			public command(param0: string, param1: com.mongodb.ReadPreference): com.mongodb.CommandResult;
			public setReadPreference(param0: com.mongodb.ReadPreference): void;
			public getMongoClient(): com.mongodb.MongoClient;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBAddress extends com.mongodb.ServerAddress {
			public static class: java.lang.Class<com.mongodb.DBAddress>;
			public equals(param0: any): boolean;
			public constructor(param0: java.net.InetAddress);
			public constructor(param0: java.net.InetSocketAddress);
			public constructor(param0: java.net.InetAddress, param1: number, param2: string);
			public constructor();
			public constructor(param0: string, param1: string);
			public constructor(param0: string, param1: number, param2: string);
			public getDBName(): string;
			public toString(): string;
			public constructor(param0: com.mongodb.DBAddress, param1: string);
			public constructor(param0: string, param1: number);
			public getSister(param0: string): com.mongodb.DBAddress;
			public constructor(param0: string);
			public constructor(param0: java.net.InetAddress, param1: number);
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBCallback extends org.bson.BSONCallback {
			public static class: java.lang.Class<com.mongodb.DBCallback>;
			/**
			 * Constructs a new instance of the com.mongodb.DBCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				objectStart(): void;
				objectStart(param0: string): void;
				objectDone(): any;
				reset(): void;
				get(): any;
				createBSONCallback(): org.bson.BSONCallback;
				arrayStart(): void;
				arrayStart(param0: string): void;
				arrayDone(): any;
				gotNull(param0: string): void;
				gotUndefined(param0: string): void;
				gotMinKey(param0: string): void;
				gotMaxKey(param0: string): void;
				gotBoolean(param0: string, param1: boolean): void;
				gotDouble(param0: string, param1: number): void;
				gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
				gotInt(param0: string, param1: number): void;
				gotLong(param0: string, param1: number): void;
				gotDate(param0: string, param1: number): void;
				gotString(param0: string, param1: string): void;
				gotSymbol(param0: string, param1: string): void;
				gotRegex(param0: string, param1: string, param2: string): void;
				gotTimestamp(param0: string, param1: number, param2: number): void;
				gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
				gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
				gotBinaryArray(param0: string, param1: native.Array<number>): void;
				gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
				gotUUID(param0: string, param1: number, param2: number): void;
				gotCode(param0: string, param1: string): void;
				gotCodeWScope(param0: string, param1: string, param2: any): void;
			});
			public constructor();
			public arrayDone(): any;
			public arrayStart(param0: string): void;
			public get(): any;
			public objectStart(): void;
			public gotTimestamp(param0: string, param1: number, param2: number): void;
			public gotSymbol(param0: string, param1: string): void;
			public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public objectDone(): any;
			public arrayStart(): void;
			public gotMaxKey(param0: string): void;
			public reset(): void;
			public gotUndefined(param0: string): void;
			public gotMinKey(param0: string): void;
			public gotInt(param0: string, param1: number): void;
			public gotCode(param0: string, param1: string): void;
			public objectStart(param0: string): void;
			public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
			public gotDouble(param0: string, param1: number): void;
			public gotString(param0: string, param1: string): void;
			public gotCodeWScope(param0: string, param1: string, param2: any): void;
			public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public gotBoolean(param0: string, param1: boolean): void;
			public gotBinaryArray(param0: string, param1: native.Array<number>): void;
			public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
			public gotUUID(param0: string, param1: number, param2: number): void;
			public gotNull(param0: string): void;
			public gotDate(param0: string, param1: number): void;
			public gotLong(param0: string, param1: number): void;
			public createBSONCallback(): org.bson.BSONCallback;
			public gotRegex(param0: string, param1: string, param2: string): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBCallbackFactory {
			public static class: java.lang.Class<com.mongodb.DBCallbackFactory>;
			/**
			 * Constructs a new instance of the com.mongodb.DBCallbackFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				create(param0: com.mongodb.DBCollection): com.mongodb.DBCallback;
			});
			public constructor();
			public create(param0: com.mongodb.DBCollection): com.mongodb.DBCallback;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBCollection {
			public static class: java.lang.Class<com.mongodb.DBCollection>;
			public static ID_FIELD_NAME: string;
			public mapReduce(param0: string, param1: string, param2: string, param3: com.mongodb.MapReduceCommand.OutputType, param4: com.mongodb.DBObject, param5: com.mongodb.ReadPreference): com.mongodb.MapReduceOutput;
			public createIndex(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): void;
			public findOne(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): com.mongodb.DBObject;
			public setDBEncoderFactory(param0: com.mongodb.DBEncoderFactory): void;
			public getCount(param0: com.mongodb.DBObject): number;
			public save(param0: com.mongodb.DBObject, param1: com.mongodb.WriteConcern): com.mongodb.WriteResult;
			public getOptions(): number;
			public distinct(param0: string, param1: com.mongodb.DBObject, param2: com.mongodb.ReadPreference): java.util.List;
			public insert(param0: com.mongodb.WriteConcern, param1: native.Array<com.mongodb.DBObject>): com.mongodb.WriteResult;
			public getCount(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: number, param3: number): number;
			public updateMulti(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): com.mongodb.WriteResult;
			public find(param0: com.mongodb.DBObject): com.mongodb.DBCursor;
			public findOne(param0: com.mongodb.DBObject, param1: com.mongodb.client.model.DBCollectionFindOptions): com.mongodb.DBObject;
			public slaveOk(): void;
			public rename(param0: string, param1: boolean): com.mongodb.DBCollection;
			public findAndRemove(param0: com.mongodb.DBObject): com.mongodb.DBObject;
			public getHintFields(): java.util.List<com.mongodb.DBObject>;
			public aggregate(param0: java.util.List<any>): com.mongodb.AggregationOutput;
			public find(param0: com.mongodb.DBObject, param1: com.mongodb.client.model.DBCollectionFindOptions): com.mongodb.DBCursor;
			public addOption(param0: number): void;
			public getReadPreference(): com.mongodb.ReadPreference;
			public createIndex(param0: com.mongodb.DBObject, param1: string): void;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: boolean, param4: com.mongodb.DBObject, param5: boolean, param6: boolean): com.mongodb.DBObject;
			public createIndex(param0: com.mongodb.DBObject, param1: string, param2: boolean): void;
			public update(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: boolean, param3: boolean): com.mongodb.WriteResult;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.client.model.DBCollectionFindAndModifyOptions): com.mongodb.DBObject;
			public createIndex(param0: string): void;
			public distinct(param0: string, param1: com.mongodb.DBObject): java.util.List;
			public remove(param0: com.mongodb.DBObject, param1: com.mongodb.WriteConcern, param2: com.mongodb.DBEncoder): com.mongodb.WriteResult;
			public distinct(param0: string): java.util.List;
			public getDB(): com.mongodb.DB;
			public insert(param0: native.Array<com.mongodb.DBObject>, param1: com.mongodb.WriteConcern, param2: com.mongodb.DBEncoder): com.mongodb.WriteResult;
			public resetOptions(): void;
			public aggregate(param0: java.util.List<any>, param1: com.mongodb.AggregationOptions): com.mongodb.Cursor;
			public update(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.client.model.DBCollectionUpdateOptions): com.mongodb.WriteResult;
			public getCount(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): number;
			public dropIndex(param0: string): void;
			public group(param0: com.mongodb.GroupCommand): com.mongodb.DBObject;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: boolean, param4: com.mongodb.DBObject, param5: boolean, param6: boolean, param7: number, param8: java.util.concurrent.TimeUnit): com.mongodb.DBObject;
			public group(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: string, param4: string, param5: com.mongodb.ReadPreference): com.mongodb.DBObject;
			public dropIndex(param0: com.mongodb.DBObject): void;
			public createIndex(param0: com.mongodb.DBObject): void;
			public insert(param0: java.util.List<any>, param1: com.mongodb.WriteConcern): com.mongodb.WriteResult;
			public update(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: boolean, param3: boolean, param4: com.mongodb.WriteConcern): com.mongodb.WriteResult;
			public mapReduce(param0: string, param1: string, param2: string, param3: com.mongodb.MapReduceCommand.OutputType, param4: com.mongodb.DBObject): com.mongodb.MapReduceOutput;
			public mapReduce(param0: com.mongodb.MapReduceCommand): com.mongodb.MapReduceOutput;
			public getStats(): com.mongodb.CommandResult;
			public getCount(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.ReadPreference): number;
			public insert(param0: java.util.List<any>, param1: com.mongodb.InsertOptions): com.mongodb.WriteResult;
			public getName(): string;
			public insert(param0: native.Array<com.mongodb.DBObject>): com.mongodb.WriteResult;
			public getCollection(param0: string): com.mongodb.DBCollection;
			public setOptions(param0: number): void;
			public count(param0: com.mongodb.DBObject, param1: com.mongodb.client.model.DBCollectionCountOptions): number;
			public setWriteConcern(param0: com.mongodb.WriteConcern): void;
			public setDBDecoderFactory(param0: com.mongodb.DBDecoderFactory): void;
			public distinct(param0: string, param1: com.mongodb.client.model.DBCollectionDistinctOptions): java.util.List;
			public getWriteConcern(): com.mongodb.WriteConcern;
			public aggregate(param0: java.util.List<any>, param1: com.mongodb.ReadPreference): com.mongodb.AggregationOutput;
			public isCapped(): boolean;
			public count(): number;
			public insert(param0: native.Array<com.mongodb.DBObject>, param1: com.mongodb.WriteConcern): com.mongodb.WriteResult;
			public findOne(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject): com.mongodb.DBObject;
			public group(param0: com.mongodb.GroupCommand, param1: com.mongodb.ReadPreference): com.mongodb.DBObject;
			public setReadConcern(param0: com.mongodb.ReadConcern): void;
			public count(param0: com.mongodb.DBObject): number;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject): com.mongodb.DBObject;
			public insert(param0: com.mongodb.DBObject, param1: com.mongodb.WriteConcern): com.mongodb.WriteResult;
			public insert(param0: java.util.List<any>): com.mongodb.WriteResult;
			public getCount(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: number, param3: number, param4: com.mongodb.ReadPreference): number;
			public dropIndexes(): void;
			public getCount(param0: com.mongodb.DBObject, param1: com.mongodb.client.model.DBCollectionCountOptions): number;
			public findOne(param0: any, param1: com.mongodb.DBObject): com.mongodb.DBObject;
			public find(): com.mongodb.DBCursor;
			public getCount(): number;
			public setInternalClass(param0: string, param1: java.lang.Class<any>): void;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: boolean, param4: com.mongodb.DBObject, param5: boolean, param6: boolean, param7: number, param8: java.util.concurrent.TimeUnit, param9: com.mongodb.WriteConcern): com.mongodb.DBObject;
			public mapReduce(param0: string, param1: string, param2: string, param3: com.mongodb.DBObject): com.mongodb.MapReduceOutput;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: boolean, param4: com.mongodb.DBObject, param5: boolean, param6: boolean, param7: boolean, param8: number, param9: java.util.concurrent.TimeUnit, param10: com.mongodb.WriteConcern): com.mongodb.DBObject;
			public rename(param0: string): com.mongodb.DBCollection;
			public findOne(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: com.mongodb.ReadPreference): com.mongodb.DBObject;
			public drop(): void;
			public getCount(param0: com.mongodb.ReadPreference): number;
			public save(param0: com.mongodb.DBObject): com.mongodb.WriteResult;
			public findOne(param0: any): com.mongodb.DBObject;
			public parallelScan(param0: com.mongodb.ParallelScanOptions): java.util.List<com.mongodb.Cursor>;
			public findOne(param0: com.mongodb.DBObject): com.mongodb.DBObject;
			public getObjectClass(): java.lang.Class;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: boolean, param4: com.mongodb.DBObject, param5: boolean, param6: boolean, param7: com.mongodb.WriteConcern): com.mongodb.DBObject;
			public initializeOrderedBulkOperation(): com.mongodb.BulkWriteOperation;
			public initializeUnorderedBulkOperation(): com.mongodb.BulkWriteOperation;
			public find(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): com.mongodb.DBCursor;
			public getIndexInfo(): java.util.List<com.mongodb.DBObject>;
			public remove(param0: com.mongodb.DBObject, param1: com.mongodb.client.model.DBCollectionRemoveOptions): com.mongodb.WriteResult;
			public getDBEncoderFactory(): com.mongodb.DBEncoderFactory;
			public getInternalClass(param0: string): java.lang.Class<any>;
			public update(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: boolean, param3: boolean, param4: com.mongodb.WriteConcern, param5: java.lang.Boolean, param6: com.mongodb.DBEncoder): com.mongodb.WriteResult;
			public find(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: number, param3: number): com.mongodb.DBCursor;
			public getFullName(): string;
			public findOne(): com.mongodb.DBObject;
			public setHintFields(param0: java.util.List<any>): void;
			public update(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: boolean, param3: boolean, param4: com.mongodb.WriteConcern, param5: com.mongodb.DBEncoder): com.mongodb.WriteResult;
			public constructor(param0: com.mongodb.DB, param1: string);
			public remove(param0: com.mongodb.DBObject, param1: com.mongodb.WriteConcern): com.mongodb.WriteResult;
			public dropIndexes(param0: string): void;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: boolean, param4: com.mongodb.DBObject, param5: boolean, param6: boolean, param7: boolean, param8: number, param9: java.util.concurrent.TimeUnit): com.mongodb.DBObject;
			public setObjectClass(param0: java.lang.Class<any>): void;
			public update(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): com.mongodb.WriteResult;
			public findAndModify(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): com.mongodb.DBObject;
			public find(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: number, param3: number, param4: number): com.mongodb.DBCursor;
			public aggregate(param0: com.mongodb.DBObject, param1: native.Array<com.mongodb.DBObject>): com.mongodb.AggregationOutput;
			public getDBDecoderFactory(): com.mongodb.DBDecoderFactory;
			public findOne(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.ReadPreference): com.mongodb.DBObject;
			public aggregate(param0: java.util.List<any>, param1: com.mongodb.AggregationOptions, param2: com.mongodb.ReadPreference): com.mongodb.Cursor;
			public distinct(param0: string, param1: com.mongodb.ReadPreference): java.util.List;
			public getReadConcern(): com.mongodb.ReadConcern;
			public toString(): string;
			public insert(param0: java.util.List<any>, param1: com.mongodb.WriteConcern, param2: com.mongodb.DBEncoder): com.mongodb.WriteResult;
			public count(param0: com.mongodb.DBObject, param1: com.mongodb.ReadPreference): number;
			public group(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: string, param4: string): com.mongodb.DBObject;
			public remove(param0: com.mongodb.DBObject): com.mongodb.WriteResult;
			public group(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: string): com.mongodb.DBObject;
			public setReadPreference(param0: com.mongodb.ReadPreference): void;
			public explainAggregate(param0: java.util.List<any>, param1: com.mongodb.AggregationOptions): com.mongodb.CommandResult;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBCollectionObjectFactory extends com.mongodb.DBObjectFactory {
			public static class: java.lang.Class<com.mongodb.DBCollectionObjectFactory>;
			public update(param0: java.lang.Class<any>): com.mongodb.DBCollectionObjectFactory;
			public getInstance(param0: java.util.List<string>): com.mongodb.DBObject;
			public update(param0: java.lang.Class<any>, param1: java.util.List<string>): com.mongodb.DBCollectionObjectFactory;
			public getInstance(): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBCursor extends java.lang.Object {
			public static class: java.lang.Class<com.mongodb.DBCursor>;
			public returnKey(): com.mongodb.DBCursor;
			public sort(param0: com.mongodb.DBObject): com.mongodb.DBCursor;
			public count(): number;
			public batchSize(param0: number): com.mongodb.DBCursor;
			public getOptions(): number;
			public addOption(param0: number): com.mongodb.DBCursor;
			public hint(param0: string): com.mongodb.DBCursor;
			public comment(param0: string): com.mongodb.DBCursor;
			public curr(): com.mongodb.DBObject;
			public explain(): com.mongodb.DBObject;
			public min(param0: com.mongodb.DBObject): com.mongodb.DBCursor;
			public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.DBCursor;
			public cursorType(param0: com.mongodb.CursorType): com.mongodb.DBCursor;
			public toArray(): java.util.List<com.mongodb.DBObject>;
			public hasNext(): boolean;
			public remove(): void;
			public showDiskLoc(): com.mongodb.DBCursor;
			public setOptions(param0: number): com.mongodb.DBCursor;
			public getReadPreference(): com.mongodb.ReadPreference;
			public hint(param0: com.mongodb.DBObject): com.mongodb.DBCursor;
			public snapshot(): com.mongodb.DBCursor;
			public getCollection(): com.mongodb.DBCollection;
			public addSpecial(param0: string, param1: any): com.mongodb.DBCursor;
			public getQuery(): com.mongodb.DBObject;
			public tryNext(): com.mongodb.DBObject;
			public getLimit(): number;
			public getCollation(): com.mongodb.client.model.Collation;
			public getKeysWanted(): com.mongodb.DBObject;
			public iterator(): java.util.Iterator<com.mongodb.DBObject>;
			public getServerAddress(): com.mongodb.ServerAddress;
			public oplogReplay(param0: boolean): com.mongodb.DBCursor;
			public setCollation(param0: com.mongodb.client.model.Collation): com.mongodb.DBCursor;
			public limit(param0: number): com.mongodb.DBCursor;
			public constructor(param0: com.mongodb.DBCollection, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: com.mongodb.ReadPreference);
			public toArray(param0: number): java.util.List<com.mongodb.DBObject>;
			public close(): void;
			public slaveOk(): com.mongodb.DBCursor;
			public one(): com.mongodb.DBObject;
			public getBatchSize(): number;
			public noCursorTimeout(param0: boolean): com.mongodb.DBCursor;
			public next(): com.mongodb.DBObject;
			public copy(): com.mongodb.DBCursor;
			public setDecoderFactory(param0: com.mongodb.DBDecoderFactory): com.mongodb.DBCursor;
			public size(): number;
			public length(): number;
			public setReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.DBCursor;
			public resetOptions(): com.mongodb.DBCursor;
			public partial(param0: boolean): com.mongodb.DBCursor;
			public numSeen(): number;
			public getCursorId(): number;
			public getDecoderFactory(): com.mongodb.DBDecoderFactory;
			public toString(): string;
			public itcount(): number;
			public maxScan(param0: number): com.mongodb.DBCursor;
			public max(param0: com.mongodb.DBObject): com.mongodb.DBCursor;
			public skip(param0: number): com.mongodb.DBCursor;
		}
		export module DBCursor {
			export class IteratorOrArray {
				public static class: java.lang.Class<com.mongodb.DBCursor.IteratorOrArray>;
				public static ITERATOR: com.mongodb.DBCursor.IteratorOrArray;
				public static ARRAY: com.mongodb.DBCursor.IteratorOrArray;
				public static values(): native.Array<com.mongodb.DBCursor.IteratorOrArray>;
				public static valueOf(param0: string): com.mongodb.DBCursor.IteratorOrArray;
			}
			export class OptionalFinalizer {
				public static class: java.lang.Class<com.mongodb.DBCursor.OptionalFinalizer>;
				public finalize(): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class DBDecoder extends org.bson.BSONDecoder {
			public static class: java.lang.Class<com.mongodb.DBDecoder>;
			/**
			 * Constructs a new instance of the com.mongodb.DBDecoder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				getDBCallback(param0: com.mongodb.DBCollection): com.mongodb.DBCallback;
				decode(param0: java.io.InputStream, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
				decode(param0: native.Array<number>, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
				readObject(param0: native.Array<number>): org.bson.BSONObject;
				readObject(param0: java.io.InputStream): org.bson.BSONObject;
				decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
				decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
			});
			public constructor();
			public readObject(param0: java.io.InputStream): org.bson.BSONObject;
			public decode(param0: java.io.InputStream, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
			public decode(param0: native.Array<number>, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
			public decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
			public getDBCallback(param0: com.mongodb.DBCollection): com.mongodb.DBCallback;
			public readObject(param0: native.Array<number>): org.bson.BSONObject;
			public decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBDecoderAdapter extends org.bson.codecs.Decoder<com.mongodb.DBObject> {
			public static class: java.lang.Class<com.mongodb.DBDecoderAdapter>;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.DBObject;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
		}
		export module DBDecoderAdapter {
			export class BufferExposingByteArrayOutputStream {
				public static class: java.lang.Class<com.mongodb.DBDecoderAdapter.BufferExposingByteArrayOutputStream>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class DBDecoderFactory {
			public static class: java.lang.Class<com.mongodb.DBDecoderFactory>;
			/**
			 * Constructs a new instance of the com.mongodb.DBDecoderFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				create(): com.mongodb.DBDecoder;
			});
			public constructor();
			public create(): com.mongodb.DBDecoder;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBEncoder {
			public static class: java.lang.Class<com.mongodb.DBEncoder>;
			/**
			 * Constructs a new instance of the com.mongodb.DBEncoder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				writeObject(param0: org.bson.io.OutputBuffer, param1: org.bson.BSONObject): number;
			});
			public constructor();
			public writeObject(param0: org.bson.io.OutputBuffer, param1: org.bson.BSONObject): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBEncoderAdapter extends org.bson.codecs.Encoder<com.mongodb.DBObject> {
			public static class: java.lang.Class<com.mongodb.DBEncoderAdapter>;
			public getEncoderClass(): java.lang.Class<com.mongodb.DBObject>;
			public getEncoderClass(): java.lang.Class<any>;
			public encode(param0: org.bson.BsonWriter, param1: com.mongodb.DBObject, param2: org.bson.codecs.EncoderContext): void;
			public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBEncoderFactory {
			public static class: java.lang.Class<com.mongodb.DBEncoderFactory>;
			/**
			 * Constructs a new instance of the com.mongodb.DBEncoderFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				create(): com.mongodb.DBEncoder;
			});
			public constructor();
			public create(): com.mongodb.DBEncoder;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBEncoderFactoryAdapter extends org.bson.codecs.Encoder<com.mongodb.DBObject> {
			public static class: java.lang.Class<com.mongodb.DBEncoderFactoryAdapter>;
			public getEncoderClass(): java.lang.Class<com.mongodb.DBObject>;
			public getEncoderClass(): java.lang.Class<any>;
			public encode(param0: org.bson.BsonWriter, param1: com.mongodb.DBObject, param2: org.bson.codecs.EncoderContext): void;
			public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBObject extends org.bson.BSONObject {
			public static class: java.lang.Class<com.mongodb.DBObject>;
			/**
			 * Constructs a new instance of the com.mongodb.DBObject interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				markAsPartialObject(): void;
				isPartialObject(): boolean;
				put(param0: string, param1: any): any;
				putAll(param0: org.bson.BSONObject): void;
				putAll(param0: java.util.Map): void;
				get(param0: string): any;
				toMap(): java.util.Map;
				removeField(param0: string): any;
				containsKey(param0: string): boolean;
				containsField(param0: string): boolean;
				keySet(): java.util.Set<string>;
			});
			public constructor();
			public removeField(param0: string): any;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public toMap(): java.util.Map;
			public containsField(param0: string): boolean;
			public markAsPartialObject(): void;
			public putAll(param0: org.bson.BSONObject): void;
			public containsKey(param0: string): boolean;
			public isPartialObject(): boolean;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBObjectCodec extends org.bson.codecs.CollectibleCodec<com.mongodb.DBObject> {
			public static class: java.lang.Class<com.mongodb.DBObjectCodec>;
			public generateIdIfAbsentFromDocument(param0: any): any;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
			public constructor();
			public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap, param2: com.mongodb.DBObjectFactory);
			public documentHasId(param0: com.mongodb.DBObject): boolean;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.DBObject;
			public getDocumentId(param0: any): org.bson.BsonValue;
			public getEncoderClass(): java.lang.Class<com.mongodb.DBObject>;
			public documentHasId(param0: any): boolean;
			public getEncoderClass(): java.lang.Class<any>;
			public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap);
			public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
			public getDocumentId(param0: com.mongodb.DBObject): org.bson.BsonValue;
			public encode(param0: org.bson.BsonWriter, param1: com.mongodb.DBObject, param2: org.bson.codecs.EncoderContext): void;
			public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
			public generateIdIfAbsentFromDocument(param0: com.mongodb.DBObject): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBObjectCodecProvider extends org.bson.codecs.configuration.CodecProvider {
			public static class: java.lang.Class<com.mongodb.DBObjectCodecProvider>;
			public equals(param0: any): boolean;
			public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
			public constructor();
			public constructor(param0: org.bson.codecs.BsonTypeClassMap);
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBObjectCollationHelper {
			public static class: java.lang.Class<com.mongodb.DBObjectCollationHelper>;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBObjectFactory {
			public static class: java.lang.Class<com.mongodb.DBObjectFactory>;
			/**
			 * Constructs a new instance of the com.mongodb.DBObjectFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				getInstance(): com.mongodb.DBObject;
				getInstance(param0: java.util.List<string>): com.mongodb.DBObject;
			});
			public constructor();
			public getInstance(param0: java.util.List<string>): com.mongodb.DBObject;
			public getInstance(): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBObjects {
			public static class: java.lang.Class<com.mongodb.DBObjects>;
			public static toDBObject(param0: org.bson.BsonDocument): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBRef {
			public static class: java.lang.Class<com.mongodb.DBRef>;
			public getCollectionName(): string;
			public equals(param0: any): boolean;
			public toString(): string;
			public getId(): any;
			public constructor(param0: string, param1: string, param2: any);
			public constructor(param0: string, param1: any);
			public getDatabaseName(): string;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBRefCodec extends org.bson.codecs.Codec<com.mongodb.DBRef> {
			public static class: java.lang.Class<com.mongodb.DBRefCodec>;
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.DBRef;
			public getEncoderClass(): java.lang.Class<com.mongodb.DBRef>;
			public getEncoderClass(): java.lang.Class<any>;
			public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
			public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
			public encode(param0: org.bson.BsonWriter, param1: com.mongodb.DBRef, param2: org.bson.codecs.EncoderContext): void;
			public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class DBRefCodecProvider extends org.bson.codecs.configuration.CodecProvider {
			public static class: java.lang.Class<com.mongodb.DBRefCodecProvider>;
			public equals(param0: any): boolean;
			public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
			public constructor();
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DefaultDBCallback extends org.bson.BasicBSONCallback implements com.mongodb.DBCallback {
			public static class: java.lang.Class<com.mongodb.DefaultDBCallback>;
			public static FACTORY: com.mongodb.DBCallbackFactory;
			public arrayDone(): any;
			public arrayStart(param0: string): void;
			public get(): any;
			public objectStart(): void;
			public gotTimestamp(param0: string, param1: number, param2: number): void;
			public gotSymbol(param0: string, param1: string): void;
			public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public objectDone(): any;
			public arrayStart(): void;
			public gotMaxKey(param0: string): void;
			public reset(): void;
			public gotUndefined(param0: string): void;
			public gotMinKey(param0: string): void;
			public gotInt(param0: string, param1: number): void;
			public gotCode(param0: string, param1: string): void;
			public constructor();
			public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
			public objectStart(param0: string): void;
			public gotDouble(param0: string, param1: number): void;
			public create(param0: boolean, param1: java.util.List<string>): org.bson.BSONObject;
			public gotString(param0: string, param1: string): void;
			public gotCodeWScope(param0: string, param1: string, param2: any): void;
			public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public gotBoolean(param0: string, param1: boolean): void;
			public gotBinaryArray(param0: string, param1: native.Array<number>): void;
			public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
			public gotUUID(param0: string, param1: number, param2: number): void;
			public gotNull(param0: string): void;
			public gotDate(param0: string, param1: number): void;
			public constructor(param0: com.mongodb.DBCollection);
			public create(): org.bson.BSONObject;
			public gotLong(param0: string, param1: number): void;
			public createBSONCallback(): org.bson.BSONCallback;
			public gotRegex(param0: string, param1: string, param2: string): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class DefaultDBDecoder extends org.bson.BasicBSONDecoder implements com.mongodb.DBDecoder {
			public static class: java.lang.Class<com.mongodb.DefaultDBDecoder>;
			public static FACTORY: com.mongodb.DBDecoderFactory;
			public readObject(param0: java.io.InputStream): org.bson.BSONObject;
			public toString(): string;
			public decode(param0: java.io.InputStream, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
			public decode(param0: native.Array<number>, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
			public decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
			public getDBCallback(param0: com.mongodb.DBCollection): com.mongodb.DBCallback;
			public readObject(param0: native.Array<number>): org.bson.BSONObject;
			public constructor();
			public decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DefaultDBEncoder extends org.bson.BasicBSONEncoder implements com.mongodb.DBEncoder {
			public static class: java.lang.Class<com.mongodb.DefaultDBEncoder>;
			public static FACTORY: com.mongodb.DBEncoderFactory;
			public putObject(param0: string, param1: org.bson.BSONObject): number;
			public toString(): string;
			public putObject(param0: org.bson.BSONObject): number;
			public set(param0: org.bson.io.OutputBuffer): void;
			public done(): void;
			public putSpecial(param0: string, param1: any): boolean;
			public putDBRef(param0: string, param1: com.mongodb.DBRef): void;
			public encode(param0: org.bson.BSONObject): native.Array<number>;
			public constructor();
			public writeObject(param0: org.bson.io.OutputBuffer, param1: org.bson.BSONObject): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DocumentToDBRefTransformer extends org.bson.Transformer {
			public static class: java.lang.Class<com.mongodb.DocumentToDBRefTransformer>;
			public equals(param0: any): boolean;
			public transform(param0: any): any;
			public constructor();
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class DuplicateKeyException extends com.mongodb.WriteConcernException {
			public static class: java.lang.Class<com.mongodb.DuplicateKeyException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress, param2: com.mongodb.WriteConcernResult);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class ErrorCategory {
			public static class: java.lang.Class<com.mongodb.ErrorCategory>;
			public static UNCATEGORIZED: com.mongodb.ErrorCategory;
			public static DUPLICATE_KEY: com.mongodb.ErrorCategory;
			public static EXECUTION_TIMEOUT: com.mongodb.ErrorCategory;
			public static fromErrorCode(param0: number): com.mongodb.ErrorCategory;
			public static valueOf(param0: string): com.mongodb.ErrorCategory;
			public static values(): native.Array<com.mongodb.ErrorCategory>;
		}
	}
}

declare module com {
	export module mongodb {
		export class ExplainVerbosity {
			public static class: java.lang.Class<com.mongodb.ExplainVerbosity>;
			public static QUERY_PLANNER: com.mongodb.ExplainVerbosity;
			public static EXECUTION_STATS: com.mongodb.ExplainVerbosity;
			public static ALL_PLANS_EXECUTIONS: com.mongodb.ExplainVerbosity;
			public static valueOf(param0: string): com.mongodb.ExplainVerbosity;
			public static values(): native.Array<com.mongodb.ExplainVerbosity>;
		}
	}
}

declare module com {
	export module mongodb {
		export class Function<T, R>  extends java.lang.Object {
			public static class: java.lang.Class<com.mongodb.Function<any,any>>;
			/**
			 * Constructs a new instance of the com.mongodb.Function<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				apply(param0: T): R;
			});
			public constructor();
			public apply(param0: T): R;
		}
	}
}

declare module com {
	export module mongodb {
		export class GroupCommand {
			public static class: java.lang.Class<com.mongodb.GroupCommand>;
			public constructor(param0: com.mongodb.DBCollection, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: com.mongodb.DBObject, param4: string, param5: string, param6: com.mongodb.client.model.Collation);
			public toDBObject(): com.mongodb.DBObject;
			public constructor(param0: com.mongodb.DBCollection, param1: string, param2: com.mongodb.DBObject, param3: com.mongodb.DBObject, param4: string, param5: string);
			public constructor(param0: com.mongodb.DBCollection, param1: string, param2: com.mongodb.DBObject, param3: com.mongodb.DBObject, param4: string, param5: string, param6: com.mongodb.client.model.Collation);
			public constructor(param0: com.mongodb.DBCollection, param1: com.mongodb.DBObject, param2: com.mongodb.DBObject, param3: com.mongodb.DBObject, param4: string, param5: string);
		}
	}
}

declare module com {
	export module mongodb {
		export class InsertOptions {
			public static class: java.lang.Class<com.mongodb.InsertOptions>;
			public writeConcern(param0: com.mongodb.WriteConcern): com.mongodb.InsertOptions;
			public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.InsertOptions;
			public isContinueOnError(): boolean;
			public dbEncoder(param0: com.mongodb.DBEncoder): com.mongodb.InsertOptions;
			public constructor();
			public getWriteConcern(): com.mongodb.WriteConcern;
			public getBypassDocumentValidation(): java.lang.Boolean;
			public getDbEncoder(): com.mongodb.DBEncoder;
			public continueOnError(param0: boolean): com.mongodb.InsertOptions;
		}
	}
}

declare module com {
	export module mongodb {
		export class InsertRequest extends com.mongodb.WriteRequest {
			public static class: java.lang.Class<com.mongodb.InsertRequest>;
			public getDocument(): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class LazyDBCallback extends org.bson.LazyBSONCallback implements com.mongodb.DBCallback {
			public static class: java.lang.Class<com.mongodb.LazyDBCallback>;
			public createArray(param0: native.Array<number>, param1: number): java.util.List;
			public arrayDone(): any;
			public arrayStart(param0: string): void;
			public get(): any;
			public objectStart(): void;
			public createDBRef(param0: string, param1: org.bson.types.ObjectId): any;
			public gotTimestamp(param0: string, param1: number, param2: number): void;
			public gotSymbol(param0: string, param1: string): void;
			public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public objectDone(): any;
			public arrayStart(): void;
			public gotMaxKey(param0: string): void;
			public createObject(param0: native.Array<number>, param1: number): any;
			public reset(): void;
			public gotUndefined(param0: string): void;
			public gotMinKey(param0: string): void;
			public gotInt(param0: string, param1: number): void;
			public gotCode(param0: string, param1: string): void;
			public constructor();
			public objectStart(param0: string): void;
			public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
			public gotDouble(param0: string, param1: number): void;
			public gotString(param0: string, param1: string): void;
			public gotCodeWScope(param0: string, param1: string, param2: any): void;
			public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public gotBoolean(param0: string, param1: boolean): void;
			public gotBinaryArray(param0: string, param1: native.Array<number>): void;
			public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
			public gotUUID(param0: string, param1: number, param2: number): void;
			public gotNull(param0: string): void;
			public gotDate(param0: string, param1: number): void;
			public constructor(param0: com.mongodb.DBCollection);
			public gotLong(param0: string, param1: number): void;
			public createBSONCallback(): org.bson.BSONCallback;
			public gotRegex(param0: string, param1: string, param2: string): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class LazyDBDecoder extends org.bson.LazyBSONDecoder implements com.mongodb.DBDecoder {
			public static class: java.lang.Class<com.mongodb.LazyDBDecoder>;
			public static FACTORY: com.mongodb.DBDecoderFactory;
			public readObject(param0: java.io.InputStream): org.bson.BSONObject;
			public decode(param0: java.io.InputStream, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
			public decode(param0: native.Array<number>, param1: com.mongodb.DBCollection): com.mongodb.DBObject;
			public decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
			public getDBCallback(param0: com.mongodb.DBCollection): com.mongodb.DBCallback;
			public readObject(param0: native.Array<number>): org.bson.BSONObject;
			public constructor();
			public readObject(param0: java.io.InputStream): com.mongodb.DBObject;
			public decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class LazyDBEncoder extends com.mongodb.DBEncoder {
			public static class: java.lang.Class<com.mongodb.LazyDBEncoder>;
			public constructor();
			public writeObject(param0: org.bson.io.OutputBuffer, param1: org.bson.BSONObject): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class LazyDBList extends org.bson.LazyBSONList implements com.mongodb.DBObject {
			public static class: java.lang.Class<com.mongodb.LazyDBList>;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public constructor(param0: native.Array<number>, param1: org.bson.LazyBSONCallback);
			public toMap(): java.util.Map;
			public containsField(param0: string): boolean;
			public removeField(param0: string): any;
			public toString(): string;
			public constructor(param0: native.Array<number>, param1: number, param2: org.bson.LazyBSONCallback);
			public get(param0: number): any;
			public markAsPartialObject(): void;
			public putAll(param0: org.bson.BSONObject): void;
			public containsKey(param0: string): boolean;
			public isPartialObject(): boolean;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class LazyDBObject extends org.bson.LazyBSONObject implements com.mongodb.DBObject {
			public static class: java.lang.Class<com.mongodb.LazyDBObject>;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public constructor(param0: native.Array<number>, param1: org.bson.LazyBSONCallback);
			public toMap(): java.util.Map;
			public containsField(param0: string): boolean;
			public removeField(param0: string): any;
			public toString(): string;
			public constructor(param0: native.Array<number>, param1: number, param2: org.bson.LazyBSONCallback);
			public markAsPartialObject(): void;
			public putAll(param0: org.bson.BSONObject): void;
			public containsKey(param0: string): boolean;
			public isPartialObject(): boolean;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class MapReduceCommand {
			public static class: java.lang.Class<com.mongodb.MapReduceCommand>;
			public setBypassDocumentValidation(param0: java.lang.Boolean): void;
			public getOutputTarget(): string;
			public getFinalize(): string;
			public getLimit(): number;
			public getCollation(): com.mongodb.client.model.Collation;
			public setFinalize(param0: string): void;
			public setSort(param0: com.mongodb.DBObject): void;
			public getScope(): java.util.Map<string,any>;
			public getBypassDocumentValidation(): java.lang.Boolean;
			public setVerbose(param0: java.lang.Boolean): void;
			public setScope(param0: java.util.Map<string,any>): void;
			public getOutputDB(): string;
			public toDBObject(): com.mongodb.DBObject;
			public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
			public setMaxTime(param0: number, param1: java.util.concurrent.TimeUnit): void;
			public constructor(param0: com.mongodb.DBCollection, param1: string, param2: string, param3: string, param4: com.mongodb.MapReduceCommand.OutputType, param5: com.mongodb.DBObject);
			public getInput(): string;
			public setJsMode(param0: java.lang.Boolean): void;
			public getMap(): string;
			public toString(): string;
			public getOutputType(): com.mongodb.MapReduceCommand.OutputType;
			public getSort(): com.mongodb.DBObject;
			public getJsMode(): java.lang.Boolean;
			public getReadPreference(): com.mongodb.ReadPreference;
			public setLimit(param0: number): void;
			public setOutputDB(param0: string): void;
			public getReduce(): string;
			public getQuery(): com.mongodb.DBObject;
			public setReadPreference(param0: com.mongodb.ReadPreference): void;
			public isVerbose(): java.lang.Boolean;
			public setCollation(param0: com.mongodb.client.model.Collation): void;
		}
		export module MapReduceCommand {
			export class OutputType {
				public static class: java.lang.Class<com.mongodb.MapReduceCommand.OutputType>;
				public static REPLACE: com.mongodb.MapReduceCommand.OutputType;
				public static MERGE: com.mongodb.MapReduceCommand.OutputType;
				public static REDUCE: com.mongodb.MapReduceCommand.OutputType;
				public static INLINE: com.mongodb.MapReduceCommand.OutputType;
				public static valueOf(param0: string): com.mongodb.MapReduceCommand.OutputType;
				public static values(): native.Array<com.mongodb.MapReduceCommand.OutputType>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class MapReduceOutput {
			public static class: java.lang.Class<com.mongodb.MapReduceOutput>;
			public getCollectionName(): string;
			public getCommand(): com.mongodb.DBObject;
			public toString(): string;
			public results(): java.lang.Iterable<com.mongodb.DBObject>;
			public drop(): void;
			public getDuration(): number;
			public getEmitCount(): number;
			public getDatabaseName(): string;
			public getInputCount(): number;
			public getOutputCollection(): com.mongodb.DBCollection;
			public getOutputCount(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class Mongo {
			public static class: java.lang.Class<com.mongodb.Mongo>;
			public getUsedDatabases(): java.util.Collection<com.mongodb.DB>;
			public constructor(param0: string, param1: com.mongodb.MongoOptions);
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: com.mongodb.MongoOptions);
			public getOptions(): number;
			public getConnectPoint(): string;
			public unlock(): com.mongodb.DBObject;
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.ServerAddress, param2: com.mongodb.MongoOptions);
			public getMongoOptions(): com.mongodb.MongoOptions;
			public slaveOk(): void;
			public constructor(param0: string, param1: number);
			public resetOptions(): void;
			public getDatabaseNames(): java.util.List<string>;
			public close(): void;
			public fsyncAndLock(): com.mongodb.CommandResult;
			public constructor(param0: string);
			public fsync(param0: boolean): com.mongodb.CommandResult;
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>);
			public getMaxBsonObjectSize(): number;
			public constructor();
			public getAllAddress(): java.util.List<com.mongodb.ServerAddress>;
			public constructor(param0: com.mongodb.MongoURI);
			public getReplicaSetStatus(): com.mongodb.ReplicaSetStatus;
			public dropDatabase(param0: string): void;
			public getAddress(): com.mongodb.ServerAddress;
			public isLocked(): boolean;
			public getReadConcern(): com.mongodb.ReadConcern;
			public getDB(param0: string): com.mongodb.DB;
			public toString(): string;
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.MongoOptions);
			public getServerAddressList(): java.util.List<com.mongodb.ServerAddress>;
			public setOptions(param0: number): void;
			public addOption(param0: number): void;
			public setWriteConcern(param0: com.mongodb.WriteConcern): void;
			public getReadPreference(): com.mongodb.ReadPreference;
			public getWriteConcern(): com.mongodb.WriteConcern;
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.ServerAddress);
			public setReadPreference(param0: com.mongodb.ReadPreference): void;
			public constructor(param0: com.mongodb.ServerAddress);
		}
		export module Mongo {
			export class Holder {
				public static class: java.lang.Class<com.mongodb.Mongo.Holder>;
				public connect(param0: com.mongodb.MongoClientURI): com.mongodb.Mongo;
				public connect(param0: com.mongodb.MongoURI): com.mongodb.Mongo;
				public static singleton(): com.mongodb.Mongo.Holder;
				public constructor();
			}
			export class ServerCursorAndNamespace {
				public static class: java.lang.Class<com.mongodb.Mongo.ServerCursorAndNamespace>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoBulkWriteException extends com.mongodb.MongoServerException {
			public static class: java.lang.Class<com.mongodb.MongoBulkWriteException>;
			public equals(param0: any): boolean;
			public constructor(param0: number, param1: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public getWriteConcernError(): com.mongodb.bulk.WriteConcernError;
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public getServerAddress(): com.mongodb.ServerAddress;
			public getWriteErrors(): java.util.List<com.mongodb.bulk.BulkWriteError>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: string);
			public constructor(param0: com.mongodb.bulk.BulkWriteResult, param1: java.util.List<com.mongodb.bulk.BulkWriteError>, param2: com.mongodb.bulk.WriteConcernError, param3: com.mongodb.ServerAddress);
			public getWriteResult(): com.mongodb.bulk.BulkWriteResult;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoChangeStreamException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoChangeStreamException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoClient extends com.mongodb.Mongo {
			public static class: java.lang.Class<com.mongodb.MongoClient>;
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: java.util.List<com.mongodb.MongoCredential>);
			public listDatabases(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
			public constructor(param0: string, param1: com.mongodb.MongoClientOptions);
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: com.mongodb.MongoCredential, param2: com.mongodb.MongoClientOptions, param3: com.mongodb.MongoDriverInformation);
			public getMongoClientOptions(): com.mongodb.MongoClientOptions;
			public getCredentialsList(): java.util.List<com.mongodb.MongoCredential>;
			public constructor(param0: string, param1: com.mongodb.MongoOptions);
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: com.mongodb.MongoOptions);
			public startSession(param0: com.mongodb.ClientSessionOptions): com.mongodb.client.ClientSession;
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: java.util.List<com.mongodb.MongoCredential>, param2: com.mongodb.MongoClientOptions, param3: com.mongodb.MongoDriverInformation);
			public listDatabases(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
			public listDatabases(): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.ServerAddress, param2: com.mongodb.MongoOptions);
			public constructor(param0: string, param1: number);
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.MongoCredential, param2: com.mongodb.MongoClientOptions);
			public watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
			public close(): void;
			public constructor(param0: com.mongodb.ServerAddress, param1: java.util.List<com.mongodb.MongoCredential>, param2: com.mongodb.MongoClientOptions, param3: com.mongodb.MongoDriverInformation);
			public constructor(param0: string);
			public constructor(param0: com.mongodb.MongoClientURI, param1: com.mongodb.MongoDriverInformation);
			public listDatabases(param0: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.MongoCredential, param2: com.mongodb.MongoClientOptions, param3: com.mongodb.MongoDriverInformation);
			public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
			public getCredential(): com.mongodb.MongoCredential;
			public static getDefaultCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
			public constructor(param0: com.mongodb.MongoClientURI);
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>);
			public constructor();
			public constructor(param0: com.mongodb.ServerAddress, param1: java.util.List<com.mongodb.MongoCredential>);
			public constructor(param0: com.mongodb.MongoURI);
			public startSession(): com.mongodb.client.ClientSession;
			public watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: com.mongodb.MongoClientOptions);
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: java.util.List<com.mongodb.MongoCredential>, param2: com.mongodb.MongoClientOptions);
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.MongoClientOptions);
			public watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
			public listDatabaseNames(): com.mongodb.client.MongoIterable<string>;
			public constructor(param0: java.util.List<com.mongodb.ServerAddress>, param1: com.mongodb.MongoCredential, param2: com.mongodb.MongoClientOptions);
			public watch(): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.MongoOptions);
			public constructor(param0: com.mongodb.ServerAddress, param1: java.util.List<com.mongodb.MongoCredential>, param2: com.mongodb.MongoClientOptions);
			public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
			public watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
			public listDatabaseNames(param0: com.mongodb.client.ClientSession): com.mongodb.client.MongoIterable<string>;
			public getDatabase(param0: string): com.mongodb.client.MongoDatabase;
			public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.ServerAddress);
			public watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
			public constructor(param0: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoClientException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoClientException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoClientOptions {
			public static class: java.lang.Class<com.mongodb.MongoClientOptions>;
			public getConnectionsPerHost(): number;
			public getSocketFactory(): javax.net.SocketFactory;
			public getServerListeners(): java.util.List<com.mongodb.event.ServerListener>;
			public equals(param0: any): boolean;
			public getClusterListeners(): java.util.List<com.mongodb.event.ClusterListener>;
			public getSslContext(): javax.net.ssl.SSLContext;
			public getMaxConnectionIdleTime(): number;
			public getApplicationName(): string;
			public static builder(param0: com.mongodb.MongoClientOptions): com.mongodb.MongoClientOptions.Builder;
			public isSocketKeepAlive(): boolean;
			public static builder(): com.mongodb.MongoClientOptions.Builder;
			public getHeartbeatFrequency(): number;
			public getServerMonitorListeners(): java.util.List<com.mongodb.event.ServerMonitorListener>;
			public getThreadsAllowedToBlockForConnectionMultiplier(): number;
			public getLocalThreshold(): number;
			public getConnectionPoolListeners(): java.util.List<com.mongodb.event.ConnectionPoolListener>;
			public getHeartbeatSocketTimeout(): number;
			public getRequiredReplicaSetName(): string;
			public getServerSelectionTimeout(): number;
			public getMaxConnectionLifeTime(): number;
			public getRetryWrites(): boolean;
			public getServerSelector(): com.mongodb.selector.ServerSelector;
			public isSslEnabled(): boolean;
			public getMinConnectionsPerHost(): number;
			public getSocketTimeout(): number;
			public isSslInvalidHostNameAllowed(): boolean;
			public getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
			public getMaxWaitTime(): number;
			public getMinHeartbeatFrequency(): number;
			public getConnectTimeout(): number;
			public isCursorFinalizerEnabled(): boolean;
			public isAlwaysUseMBeans(): boolean;
			public getDbEncoderFactory(): com.mongodb.DBEncoderFactory;
			public getHeartbeatConnectTimeout(): number;
			public getReadConcern(): com.mongodb.ReadConcern;
			public toString(): string;
			public getCompressorList(): java.util.List<com.mongodb.MongoCompressor>;
			public getCommandListeners(): java.util.List<com.mongodb.event.CommandListener>;
			public getReadPreference(): com.mongodb.ReadPreference;
			public getDescription(): string;
			public getWriteConcern(): com.mongodb.WriteConcern;
			public getDbDecoderFactory(): com.mongodb.DBDecoderFactory;
			public hashCode(): number;
		}
		export module MongoClientOptions {
			export class Builder {
				public static class: java.lang.Class<com.mongodb.MongoClientOptions.Builder>;
				public maxConnectionLifeTime(param0: number): com.mongodb.MongoClientOptions.Builder;
				public connectionsPerHost(param0: number): com.mongodb.MongoClientOptions.Builder;
				public addServerListener(param0: com.mongodb.event.ServerListener): com.mongodb.MongoClientOptions.Builder;
				public alwaysUseMBeans(param0: boolean): com.mongodb.MongoClientOptions.Builder;
				public maxWaitTime(param0: number): com.mongodb.MongoClientOptions.Builder;
				public addConnectionPoolListener(param0: com.mongodb.event.ConnectionPoolListener): com.mongodb.MongoClientOptions.Builder;
				public addCommandListener(param0: com.mongodb.event.CommandListener): com.mongodb.MongoClientOptions.Builder;
				public sslInvalidHostNameAllowed(param0: boolean): com.mongodb.MongoClientOptions.Builder;
				public socketFactory(param0: javax.net.SocketFactory): com.mongodb.MongoClientOptions.Builder;
				public sslContext(param0: javax.net.ssl.SSLContext): com.mongodb.MongoClientOptions.Builder;
				public sslEnabled(param0: boolean): com.mongodb.MongoClientOptions.Builder;
				public requiredReplicaSetName(param0: string): com.mongodb.MongoClientOptions.Builder;
				public build(): com.mongodb.MongoClientOptions;
				public constructor();
				public socketTimeout(param0: number): com.mongodb.MongoClientOptions.Builder;
				public dbDecoderFactory(param0: com.mongodb.DBDecoderFactory): com.mongodb.MongoClientOptions.Builder;
				public localThreshold(param0: number): com.mongodb.MongoClientOptions.Builder;
				public compressorList(param0: java.util.List<com.mongodb.MongoCompressor>): com.mongodb.MongoClientOptions.Builder;
				public minConnectionsPerHost(param0: number): com.mongodb.MongoClientOptions.Builder;
				public socketKeepAlive(param0: boolean): com.mongodb.MongoClientOptions.Builder;
				public legacyDefaults(): com.mongodb.MongoClientOptions.Builder;
				public addClusterListener(param0: com.mongodb.event.ClusterListener): com.mongodb.MongoClientOptions.Builder;
				public constructor(param0: com.mongodb.MongoClientOptions);
				public threadsAllowedToBlockForConnectionMultiplier(param0: number): com.mongodb.MongoClientOptions.Builder;
				public maxConnectionIdleTime(param0: number): com.mongodb.MongoClientOptions.Builder;
				public readConcern(param0: com.mongodb.ReadConcern): com.mongodb.MongoClientOptions.Builder;
				public addServerMonitorListener(param0: com.mongodb.event.ServerMonitorListener): com.mongodb.MongoClientOptions.Builder;
				public minHeartbeatFrequency(param0: number): com.mongodb.MongoClientOptions.Builder;
				public serverSelectionTimeout(param0: number): com.mongodb.MongoClientOptions.Builder;
				public dbEncoderFactory(param0: com.mongodb.DBEncoderFactory): com.mongodb.MongoClientOptions.Builder;
				public cursorFinalizerEnabled(param0: boolean): com.mongodb.MongoClientOptions.Builder;
				public codecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.MongoClientOptions.Builder;
				public description(param0: string): com.mongodb.MongoClientOptions.Builder;
				public applicationName(param0: string): com.mongodb.MongoClientOptions.Builder;
				public heartbeatSocketTimeout(param0: number): com.mongodb.MongoClientOptions.Builder;
				public readPreference(param0: com.mongodb.ReadPreference): com.mongodb.MongoClientOptions.Builder;
				public serverSelector(param0: com.mongodb.selector.ServerSelector): com.mongodb.MongoClientOptions.Builder;
				public connectTimeout(param0: number): com.mongodb.MongoClientOptions.Builder;
				public heartbeatConnectTimeout(param0: number): com.mongodb.MongoClientOptions.Builder;
				public heartbeatFrequency(param0: number): com.mongodb.MongoClientOptions.Builder;
				public retryWrites(param0: boolean): com.mongodb.MongoClientOptions.Builder;
				public writeConcern(param0: com.mongodb.WriteConcern): com.mongodb.MongoClientOptions.Builder;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoClientSettings {
			public static class: java.lang.Class<com.mongodb.MongoClientSettings>;
			public static builder(): com.mongodb.MongoClientSettings.Builder;
			public getCredential(): com.mongodb.MongoCredential;
			public static getDefaultCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
			public getApplicationName(): string;
			public getSslSettings(): com.mongodb.connection.SslSettings;
			public static builder(param0: com.mongodb.MongoClientSettings): com.mongodb.MongoClientSettings.Builder;
			public getHeartbeatSocketSettings(): com.mongodb.connection.SocketSettings;
			public getConnectionPoolSettings(): com.mongodb.connection.ConnectionPoolSettings;
			public getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
			public getSocketSettings(): com.mongodb.connection.SocketSettings;
			public getReadConcern(): com.mongodb.ReadConcern;
			public getClusterSettings(): com.mongodb.connection.ClusterSettings;
			public getCompressorList(): java.util.List<com.mongodb.MongoCompressor>;
			public getCommandListeners(): java.util.List<com.mongodb.event.CommandListener>;
			public getReadPreference(): com.mongodb.ReadPreference;
			public getServerSettings(): com.mongodb.connection.ServerSettings;
			public getRetryWrites(): boolean;
			public getWriteConcern(): com.mongodb.WriteConcern;
			public getStreamFactoryFactory(): com.mongodb.connection.StreamFactoryFactory;
		}
		export module MongoClientSettings {
			export class Builder {
				public static class: java.lang.Class<com.mongodb.MongoClientSettings.Builder>;
				public readConcern(param0: com.mongodb.ReadConcern): com.mongodb.MongoClientSettings.Builder;
				public readPreference(param0: com.mongodb.ReadPreference): com.mongodb.MongoClientSettings.Builder;
				public applicationName(param0: string): com.mongodb.MongoClientSettings.Builder;
				public compressorList(param0: java.util.List<com.mongodb.MongoCompressor>): com.mongodb.MongoClientSettings.Builder;
				public credential(param0: com.mongodb.MongoCredential): com.mongodb.MongoClientSettings.Builder;
				public codecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.MongoClientSettings.Builder;
				public applyToClusterSettings(param0: com.mongodb.Block<com.mongodb.connection.ClusterSettings.Builder>): com.mongodb.MongoClientSettings.Builder;
				public applyToSslSettings(param0: com.mongodb.Block<com.mongodb.connection.SslSettings.Builder>): com.mongodb.MongoClientSettings.Builder;
				public applyToConnectionPoolSettings(param0: com.mongodb.Block<com.mongodb.connection.ConnectionPoolSettings.Builder>): com.mongodb.MongoClientSettings.Builder;
				public streamFactoryFactory(param0: com.mongodb.connection.StreamFactoryFactory): com.mongodb.MongoClientSettings.Builder;
				public commandListenerList(param0: java.util.List<com.mongodb.event.CommandListener>): com.mongodb.MongoClientSettings.Builder;
				public addCommandListener(param0: com.mongodb.event.CommandListener): com.mongodb.MongoClientSettings.Builder;
				public applyConnectionString(param0: com.mongodb.ConnectionString): com.mongodb.MongoClientSettings.Builder;
				public build(): com.mongodb.MongoClientSettings;
				public applyToServerSettings(param0: com.mongodb.Block<com.mongodb.connection.ServerSettings.Builder>): com.mongodb.MongoClientSettings.Builder;
				public applyToSocketSettings(param0: com.mongodb.Block<com.mongodb.connection.SocketSettings.Builder>): com.mongodb.MongoClientSettings.Builder;
				public writeConcern(param0: com.mongodb.WriteConcern): com.mongodb.MongoClientSettings.Builder;
				public retryWrites(param0: boolean): com.mongodb.MongoClientSettings.Builder;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoClientURI {
			public static class: java.lang.Class<com.mongodb.MongoClientURI>;
			public equals(param0: any): boolean;
			public getCollection(): string;
			public getUsername(): string;
			public getHosts(): java.util.List<string>;
			public getURI(): string;
			public getOptions(): com.mongodb.MongoClientOptions;
			public getCredentials(): com.mongodb.MongoCredential;
			public toString(): string;
			public constructor(param0: string, param1: com.mongodb.MongoClientOptions.Builder);
			public getPassword(): native.Array<string>;
			public getDatabase(): string;
			public constructor(param0: string);
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoCommandException extends com.mongodb.MongoServerException {
			public static class: java.lang.Class<com.mongodb.MongoCommandException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public getErrorCode(): number;
			public getErrorMessage(): string;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress);
			public getErrorCodeName(): string;
			public getResponse(): org.bson.BsonDocument;
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoCompressor {
			public static class: java.lang.Class<com.mongodb.MongoCompressor>;
			public static LEVEL: string;
			public withProperty(param0: string, param1: any): com.mongodb.MongoCompressor;
			public equals(param0: any): boolean;
			public getProperty(param0: string, param1: any): any;
			public getPropertyNonNull(param0: string, param1: any): any;
			public toString(): string;
			public getName(): string;
			public static createSnappyCompressor(): com.mongodb.MongoCompressor;
			public static createZlibCompressor(): com.mongodb.MongoCompressor;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoConfigurationException extends com.mongodb.MongoClientException {
			public static class: java.lang.Class<com.mongodb.MongoConfigurationException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoCredential {
			public static class: java.lang.Class<com.mongodb.MongoCredential>;
			public static MONGODB_CR_MECHANISM: string;
			public static GSSAPI_MECHANISM: string;
			public static PLAIN_MECHANISM: string;
			public static MONGODB_X509_MECHANISM: string;
			public static SCRAM_SHA_1_MECHANISM: string;
			public static SCRAM_SHA_256_MECHANISM: string;
			public static SERVICE_NAME_KEY: string;
			public static CANONICALIZE_HOST_NAME_KEY: string;
			public static JAVA_SASL_CLIENT_PROPERTIES_KEY: string;
			public static JAVA_SUBJECT_KEY: string;
			public static createCredential(param0: string, param1: string, param2: native.Array<string>): com.mongodb.MongoCredential;
			public equals(param0: any): boolean;
			public getSource(): string;
			public getMechanism(): string;
			public static createScramSha1Credential(param0: string, param1: string, param2: native.Array<string>): com.mongodb.MongoCredential;
			public getMechanismProperty(param0: string, param1: any): any;
			public withMechanism(param0: com.mongodb.AuthenticationMechanism): com.mongodb.MongoCredential;
			public getUserName(): string;
			public static createMongoX509Credential(param0: string): com.mongodb.MongoCredential;
			public toString(): string;
			public static createPlainCredential(param0: string, param1: string, param2: native.Array<string>): com.mongodb.MongoCredential;
			public getAuthenticationMechanism(): com.mongodb.AuthenticationMechanism;
			public getPassword(): native.Array<string>;
			public static createScramSha256Credential(param0: string, param1: string, param2: native.Array<string>): com.mongodb.MongoCredential;
			public static createMongoX509Credential(): com.mongodb.MongoCredential;
			public static createGSSAPICredential(param0: string): com.mongodb.MongoCredential;
			public withMechanismProperty(param0: string, param1: any): com.mongodb.MongoCredential;
			public static createMongoCRCredential(param0: string, param1: string, param2: native.Array<string>): com.mongodb.MongoCredential;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoCursorAdapter extends com.mongodb.Cursor {
			public static class: java.lang.Class<com.mongodb.MongoCursorAdapter>;
			public next(): com.mongodb.DBObject;
			public getCursorId(): number;
			public getServerAddress(): com.mongodb.ServerAddress;
			public close(): void;
			public hasNext(): boolean;
			public remove(): void;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoCursorNotFoundException extends com.mongodb.MongoQueryException {
			public static class: java.lang.Class<com.mongodb.MongoCursorNotFoundException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public getCursorId(): number;
			public getServerAddress(): com.mongodb.ServerAddress;
			public constructor(param0: com.mongodb.MongoCommandException);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: com.mongodb.ServerAddress);
			public constructor(param0: number, param1: string);
			public constructor(param0: com.mongodb.ServerAddress, param1: number, param2: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoDriverInformation {
			public static class: java.lang.Class<com.mongodb.MongoDriverInformation>;
			public getDriverPlatforms(): java.util.List<string>;
			public static builder(param0: com.mongodb.MongoDriverInformation): com.mongodb.MongoDriverInformation.Builder;
			public static builder(): com.mongodb.MongoDriverInformation.Builder;
			public getDriverNames(): java.util.List<string>;
			public getDriverVersions(): java.util.List<string>;
		}
		export module MongoDriverInformation {
			export class Builder {
				public static class: java.lang.Class<com.mongodb.MongoDriverInformation.Builder>;
				public driverVersion(param0: string): com.mongodb.MongoDriverInformation.Builder;
				public build(): com.mongodb.MongoDriverInformation;
				public driverName(param0: string): com.mongodb.MongoDriverInformation.Builder;
				public driverPlatform(param0: string): com.mongodb.MongoDriverInformation.Builder;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoException {
			public static class: java.lang.Class<com.mongodb.MongoException>;
			public static TRANSIENT_TRANSACTION_ERROR_LABEL: string;
			public static UNKNOWN_TRANSACTION_COMMIT_RESULT_LABEL: string;
			public addLabel(param0: string): void;
			public getErrorLabels(): java.util.Set<string>;
			public removeLabel(param0: string): void;
			public hasErrorLabel(param0: string): boolean;
			public constructor(param0: string, param1: java.lang.Throwable);
			public static fromThrowableNonNull(param0: java.lang.Throwable): com.mongodb.MongoException;
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public getCode(): number;
			public static fromThrowable(param0: java.lang.Throwable): com.mongodb.MongoException;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoExecutionTimeoutException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoExecutionTimeoutException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoGridFSException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoGridFSException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoIncompatibleDriverException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoIncompatibleDriverException>;
			public constructor(param0: string, param1: com.mongodb.connection.ClusterDescription);
			public getClusterDescription(): com.mongodb.connection.ClusterDescription;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoInternalException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoInternalException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoInterruptedException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoInterruptedException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string, param1: java.lang.Exception);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoNamespace {
			public static class: java.lang.Class<com.mongodb.MongoNamespace>;
			public static COMMAND_COLLECTION_NAME: string;
			public static checkCollectionNameValidity(param0: string): void;
			public constructor(param0: string, param1: string);
			public getCollectionName(): string;
			public equals(param0: any): boolean;
			public toString(): string;
			public static checkDatabaseNameValidity(param0: string): void;
			public getFullName(): string;
			public getDatabaseName(): string;
			public constructor(param0: string);
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoNodeIsRecoveringException extends com.mongodb.MongoCommandException {
			public static class: java.lang.Class<com.mongodb.MongoNodeIsRecoveringException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
			public constructor(param0: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoNotPrimaryException extends com.mongodb.MongoCommandException {
			public static class: java.lang.Class<com.mongodb.MongoNotPrimaryException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
			public constructor(param0: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoOptions {
			public static class: java.lang.Class<com.mongodb.MongoOptions>;
			public description: string;
			public connectionsPerHost: number;
			public threadsAllowedToBlockForConnectionMultiplier: number;
			public maxWaitTime: number;
			public connectTimeout: number;
			public socketTimeout: number;
			public socketKeepAlive: boolean;
			public readPreference: com.mongodb.ReadPreference;
			public dbDecoderFactory: com.mongodb.DBDecoderFactory;
			public dbEncoderFactory: com.mongodb.DBEncoderFactory;
			public safe: boolean;
			public w: number;
			public wtimeout: number;
			public fsync: boolean;
			public j: boolean;
			public socketFactory: javax.net.SocketFactory;
			public cursorFinalizerEnabled: boolean;
			public writeConcern: com.mongodb.WriteConcern;
			public alwaysUseMBeans: boolean;
			public getSocketFactory(): javax.net.SocketFactory;
			public getConnectionsPerHost(): number;
			public equals(param0: any): boolean;
			public isFsync(): boolean;
			public copy(): com.mongodb.MongoOptions;
			public setSocketFactory(param0: javax.net.SocketFactory): void;
			public isSocketKeepAlive(): boolean;
			public setFsync(param0: boolean): void;
			public setSocketKeepAlive(param0: boolean): void;
			public setConnectTimeout(param0: number): void;
			public setCursorFinalizerEnabled(param0: boolean): void;
			public getThreadsAllowedToBlockForConnectionMultiplier(): number;
			public setThreadsAllowedToBlockForConnectionMultiplier(param0: number): void;
			public getWtimeout(): number;
			public setWtimeout(param0: number): void;
			public setJ(param0: boolean): void;
			public getRequiredReplicaSetName(): string;
			public reset(): void;
			public setW(param0: number): void;
			public setDbDecoderFactory(param0: com.mongodb.DBDecoderFactory): void;
			public setAlwaysUseMBeans(param0: boolean): void;
			public isSafe(): boolean;
			public getSocketTimeout(): number;
			public setDescription(param0: string): void;
			public isJ(): boolean;
			public constructor();
			public getMaxWaitTime(): number;
			public setDbEncoderFactory(param0: com.mongodb.DBEncoderFactory): void;
			public getConnectTimeout(): number;
			public isCursorFinalizerEnabled(): boolean;
			public setMaxWaitTime(param0: number): void;
			public isAlwaysUseMBeans(): boolean;
			public getDbEncoderFactory(): com.mongodb.DBEncoderFactory;
			public getW(): number;
			public toString(): string;
			public setWriteConcern(param0: com.mongodb.WriteConcern): void;
			public getReadPreference(): com.mongodb.ReadPreference;
			public constructor(param0: com.mongodb.MongoClientOptions);
			public getWriteConcern(): com.mongodb.WriteConcern;
			public getDescription(): string;
			public setSafe(param0: boolean): void;
			public setReadPreference(param0: com.mongodb.ReadPreference): void;
			public setSocketTimeout(param0: number): void;
			public getDbDecoderFactory(): com.mongodb.DBDecoderFactory;
			public setConnectionsPerHost(param0: number): void;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoQueryException extends com.mongodb.MongoServerException {
			public static class: java.lang.Class<com.mongodb.MongoQueryException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public getErrorCode(): number;
			public getErrorMessage(): string;
			public constructor(param0: com.mongodb.MongoCommandException);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: com.mongodb.ServerAddress, param1: number, param2: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoSecurityException extends com.mongodb.MongoClientException {
			public static class: java.lang.Class<com.mongodb.MongoSecurityException>;
			public getCredential(): com.mongodb.MongoCredential;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: com.mongodb.MongoCredential, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: com.mongodb.MongoCredential, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class MongoServerException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoServerException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public getServerAddress(): com.mongodb.ServerAddress;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoSocketClosedException extends com.mongodb.MongoSocketException {
			public static class: java.lang.Class<com.mongodb.MongoSocketClosedException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoSocketException extends com.mongodb.MongoException {
			public static class: java.lang.Class<com.mongodb.MongoSocketException>;
			public getServerAddress(): com.mongodb.ServerAddress;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoSocketOpenException extends com.mongodb.MongoSocketException {
			public static class: java.lang.Class<com.mongodb.MongoSocketOpenException>;
			public constructor(param0: string, param1: com.mongodb.ServerAddress, param2: java.lang.Throwable);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoSocketReadException extends com.mongodb.MongoSocketException {
			public static class: java.lang.Class<com.mongodb.MongoSocketReadException>;
			public constructor(param0: string, param1: com.mongodb.ServerAddress, param2: java.lang.Throwable);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoSocketReadTimeoutException extends com.mongodb.MongoSocketException {
			public static class: java.lang.Class<com.mongodb.MongoSocketReadTimeoutException>;
			public constructor(param0: string, param1: com.mongodb.ServerAddress, param2: java.lang.Throwable);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoSocketWriteException extends com.mongodb.MongoSocketException {
			public static class: java.lang.Class<com.mongodb.MongoSocketWriteException>;
			public constructor(param0: string, param1: com.mongodb.ServerAddress, param2: java.lang.Throwable);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoTimeoutException extends com.mongodb.MongoClientException {
			public static class: java.lang.Class<com.mongodb.MongoTimeoutException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoURI {
			public static class: java.lang.Class<com.mongodb.MongoURI>;
			public static MONGODB_PREFIX: string;
			public constructor(param0: com.mongodb.MongoClientURI);
			public getCollection(): string;
			public connectCollection(param0: com.mongodb.Mongo): com.mongodb.DBCollection;
			public getUsername(): string;
			public getHosts(): java.util.List<string>;
			public connectCollection(param0: com.mongodb.DB): com.mongodb.DBCollection;
			public getCredentials(): com.mongodb.MongoCredential;
			public toString(): string;
			public getPassword(): native.Array<string>;
			public connectDB(): com.mongodb.DB;
			public connectDB(param0: com.mongodb.Mongo): com.mongodb.DB;
			public connect(): com.mongodb.Mongo;
			public getDatabase(): string;
			public constructor(param0: string);
			public getOptions(): com.mongodb.MongoOptions;
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoWaitQueueFullException extends com.mongodb.MongoClientException {
			public static class: java.lang.Class<com.mongodb.MongoWaitQueueFullException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoWriteConcernException extends com.mongodb.MongoServerException {
			public static class: java.lang.Class<com.mongodb.MongoWriteConcernException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public getWriteResult(): com.mongodb.WriteConcernResult;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public getWriteConcernError(): com.mongodb.bulk.WriteConcernError;
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
			public constructor(param0: com.mongodb.bulk.WriteConcernError, param1: com.mongodb.ServerAddress);
			public constructor(param0: com.mongodb.bulk.WriteConcernError, param1: com.mongodb.WriteConcernResult, param2: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class MongoWriteException extends com.mongodb.MongoServerException {
			public static class: java.lang.Class<com.mongodb.MongoWriteException>;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: com.mongodb.WriteError, param1: com.mongodb.ServerAddress);
			public getError(): com.mongodb.WriteError;
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
		}
	}
}

declare module com {
	export module mongodb {
		export class ParallelScanOptions {
			public static class: java.lang.Class<com.mongodb.ParallelScanOptions>;
			public static builder(): com.mongodb.ParallelScanOptions.Builder;
			public getNumCursors(): number;
			public getReadPreference(): com.mongodb.ReadPreference;
			public getBatchSize(): number;
		}
		export module ParallelScanOptions {
			export class Builder {
				public static class: java.lang.Class<com.mongodb.ParallelScanOptions.Builder>;
				public numCursors(param0: number): com.mongodb.ParallelScanOptions.Builder;
				public readPreference(param0: com.mongodb.ReadPreference): com.mongodb.ParallelScanOptions.Builder;
				public batchSize(param0: number): com.mongodb.ParallelScanOptions.Builder;
				public build(): com.mongodb.ParallelScanOptions;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class QueryBuilder {
			public static class: java.lang.Class<com.mongodb.QueryBuilder>;
			public regex(param0: java.util.regex.Pattern): com.mongodb.QueryBuilder;
			public text(param0: string, param1: string): com.mongodb.QueryBuilder;
			public withinCenter(param0: number, param1: number, param2: number): com.mongodb.QueryBuilder;
			public withinBox(param0: number, param1: number, param2: number, param3: number): com.mongodb.QueryBuilder;
			public withinPolygon(param0: java.util.List<native.Array<java.lang.Double>>): com.mongodb.QueryBuilder;
			public get(): com.mongodb.DBObject;
			public elemMatch(param0: com.mongodb.DBObject): com.mongodb.QueryBuilder;
			public size(param0: any): com.mongodb.QueryBuilder;
			public all(param0: any): com.mongodb.QueryBuilder;
			public near(param0: number, param1: number, param2: number): com.mongodb.QueryBuilder;
			public greaterThan(param0: any): com.mongodb.QueryBuilder;
			public or(param0: native.Array<com.mongodb.DBObject>): com.mongodb.QueryBuilder;
			public notIn(param0: any): com.mongodb.QueryBuilder;
			public text(param0: string): com.mongodb.QueryBuilder;
			public lessThanEquals(param0: any): com.mongodb.QueryBuilder;
			public nearSphere(param0: number, param1: number): com.mongodb.QueryBuilder;
			public static start(): com.mongodb.QueryBuilder;
			public withinCenterSphere(param0: number, param1: number, param2: number): com.mongodb.QueryBuilder;
			public exists(param0: any): com.mongodb.QueryBuilder;
			public near(param0: number, param1: number): com.mongodb.QueryBuilder;
			public and(param0: native.Array<com.mongodb.DBObject>): com.mongodb.QueryBuilder;
			public nearSphere(param0: number, param1: number, param2: number): com.mongodb.QueryBuilder;
			public greaterThanEquals(param0: any): com.mongodb.QueryBuilder;
			public not(): com.mongodb.QueryBuilder;
			public in(param0: any): com.mongodb.QueryBuilder;
			public constructor();
			public mod(param0: any): com.mongodb.QueryBuilder;
			public and(param0: string): com.mongodb.QueryBuilder;
			public static start(param0: string): com.mongodb.QueryBuilder;
			public lessThan(param0: any): com.mongodb.QueryBuilder;
			public notEquals(param0: any): com.mongodb.QueryBuilder;
			public is(param0: any): com.mongodb.QueryBuilder;
			public put(param0: string): com.mongodb.QueryBuilder;
		}
		export module QueryBuilder {
			export class NullObject {
				public static class: java.lang.Class<com.mongodb.QueryBuilder.NullObject>;
			}
			export class QueryBuilderException {
				public static class: java.lang.Class<com.mongodb.QueryBuilder.QueryBuilderException>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class QueryOperators {
			public static class: java.lang.Class<com.mongodb.QueryOperators>;
			public static OR: string;
			public static AND: string;
			public static GT: string;
			public static GTE: string;
			public static LT: string;
			public static LTE: string;
			public static NE: string;
			public static IN: string;
			public static NIN: string;
			public static MOD: string;
			public static ALL: string;
			public static SIZE: string;
			public static EXISTS: string;
			public static ELEM_MATCH: string;
			public static WHERE: string;
			public static NOR: string;
			public static TYPE: string;
			public static NOT: string;
			public static WITHIN: string;
			public static NEAR: string;
			public static NEAR_SPHERE: string;
			public static BOX: string;
			public static CENTER: string;
			public static POLYGON: string;
			public static CENTER_SPHERE: string;
			public static MAX_DISTANCE: string;
			public static UNIQUE_DOCS: string;
			public static TEXT: string;
			public static SEARCH: string;
			public static LANGUAGE: string;
			public static RETURN_KEY: string;
			public static MAX_SCAN: string;
			public static ORDER_BY: string;
			public static EXPLAIN: string;
			public static SNAPSHOT: string;
			public static MIN: string;
			public static MAX: string;
			public static SHOW_DISK_LOC: string;
			public static HINT: string;
			public static COMMENT: string;
		}
	}
}

declare module com {
	export module mongodb {
		export class ReadConcern {
			public static class: java.lang.Class<com.mongodb.ReadConcern>;
			public static DEFAULT: com.mongodb.ReadConcern;
			public static LOCAL: com.mongodb.ReadConcern;
			public static MAJORITY: com.mongodb.ReadConcern;
			public static LINEARIZABLE: com.mongodb.ReadConcern;
			public static SNAPSHOT: com.mongodb.ReadConcern;
			public static AVAILABLE: com.mongodb.ReadConcern;
			public equals(param0: any): boolean;
			public asDocument(): org.bson.BsonDocument;
			public getLevel(): com.mongodb.ReadConcernLevel;
			public constructor(param0: com.mongodb.ReadConcernLevel);
			public isServerDefault(): boolean;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class ReadConcernLevel {
			public static class: java.lang.Class<com.mongodb.ReadConcernLevel>;
			public static LOCAL: com.mongodb.ReadConcernLevel;
			public static MAJORITY: com.mongodb.ReadConcernLevel;
			public static LINEARIZABLE: com.mongodb.ReadConcernLevel;
			public static SNAPSHOT: com.mongodb.ReadConcernLevel;
			public static AVAILABLE: com.mongodb.ReadConcernLevel;
			public static values(): native.Array<com.mongodb.ReadConcernLevel>;
			public static fromString(param0: string): com.mongodb.ReadConcernLevel;
			public static valueOf(param0: string): com.mongodb.ReadConcernLevel;
			public getValue(): string;
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class ReadPreference {
			public static class: java.lang.Class<com.mongodb.ReadPreference>;
			public static secondary(param0: com.mongodb.TagSet): com.mongodb.TaggableReadPreference;
			public static secondaryPreferred(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.ReadPreference;
			public static primaryPreferred(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.ReadPreference;
			public static primary(): com.mongodb.ReadPreference;
			public static primaryPreferred(param0: java.util.List<com.mongodb.TagSet>): com.mongodb.TaggableReadPreference;
			public static valueOf(param0: string, param1: java.util.List<com.mongodb.TagSet>): com.mongodb.TaggableReadPreference;
			public static nearest(param0: java.util.List<com.mongodb.TagSet>): com.mongodb.TaggableReadPreference;
			public static secondary(param0: java.util.List<com.mongodb.TagSet>, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public static nearest(): com.mongodb.ReadPreference;
			public static primaryPreferred(param0: java.util.List<com.mongodb.TagSet>, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public static secondaryPreferred(param0: com.mongodb.TagSet): com.mongodb.TaggableReadPreference;
			public static nearest(param0: com.mongodb.TagSet): com.mongodb.TaggableReadPreference;
			public static secondary(param0: com.mongodb.TagSet, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public isSlaveOk(): boolean;
			public choose(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
			public static primaryPreferred(param0: com.mongodb.TagSet): com.mongodb.TaggableReadPreference;
			public static secondary(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.ReadPreference;
			public static valueOf(param0: string, param1: java.util.List<com.mongodb.TagSet>, param2: number, param3: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public toDocument(): org.bson.BsonDocument;
			public static secondaryPreferred(param0: com.mongodb.TagSet, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public chooseForReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
			public static secondaryPreferred(param0: java.util.List<com.mongodb.TagSet>): com.mongodb.TaggableReadPreference;
			public chooseForNonReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
			public static nearest(param0: java.util.List<com.mongodb.TagSet>, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public static primaryPreferred(param0: com.mongodb.TagSet, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public static secondary(param0: java.util.List<com.mongodb.TagSet>): com.mongodb.TaggableReadPreference;
			public static nearest(param0: com.mongodb.TagSet, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public static secondary(): com.mongodb.ReadPreference;
			public static nearest(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.ReadPreference;
			public getName(): string;
			public static secondaryPreferred(param0: java.util.List<com.mongodb.TagSet>, param1: number, param2: java.util.concurrent.TimeUnit): com.mongodb.TaggableReadPreference;
			public static primaryPreferred(): com.mongodb.ReadPreference;
			public static valueOf(param0: string): com.mongodb.ReadPreference;
			public static secondaryPreferred(): com.mongodb.ReadPreference;
		}
		export module ReadPreference {
			export class PrimaryReadPreference extends com.mongodb.ReadPreference {
				public static class: java.lang.Class<com.mongodb.ReadPreference.PrimaryReadPreference>;
				public isSlaveOk(): boolean;
				public toDocument(): org.bson.BsonDocument;
				public chooseForReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public chooseForNonReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public getName(): string;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class ReflectionDBObject extends com.mongodb.DBObject {
			public static class: java.lang.Class<com.mongodb.ReflectionDBObject>;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public toMap(): java.util.Map;
			public set_id(param0: any): void;
			public static getWrapperIfReflectionObject(param0: java.lang.Class): com.mongodb.ReflectionDBObject.JavaWrapper;
			public static getWrapper(param0: java.lang.Class): com.mongodb.ReflectionDBObject.JavaWrapper;
			public constructor();
			public containsField(param0: string): boolean;
			public get_id(): any;
			public removeField(param0: string): any;
			public markAsPartialObject(): void;
			public containsKey(param0: string): boolean;
			public putAll(param0: org.bson.BSONObject): void;
			public putAll(param0: java.util.Map): void;
			public isPartialObject(): boolean;
		}
		export module ReflectionDBObject {
			export class FieldInfo {
				public static class: java.lang.Class<com.mongodb.ReflectionDBObject.FieldInfo>;
			}
			export class JavaWrapper {
				public static class: java.lang.Class<com.mongodb.ReflectionDBObject.JavaWrapper>;
				public keySet(): java.util.Set<string>;
				public containsKey(param0: string): boolean;
				public get(param0: com.mongodb.ReflectionDBObject, param1: string): any;
				public set(param0: com.mongodb.ReflectionDBObject, param1: string, param2: any): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class RemoveRequest extends com.mongodb.WriteRequest {
			public static class: java.lang.Class<com.mongodb.RemoveRequest>;
			public isMulti(): boolean;
			public getQuery(): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class ReplaceRequest extends com.mongodb.WriteRequest {
			public static class: java.lang.Class<com.mongodb.ReplaceRequest>;
			public isUpsert(): boolean;
			public getCollation(): com.mongodb.client.model.Collation;
			public getDocument(): com.mongodb.DBObject;
			public getQuery(): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class ReplicaSetStatus {
			public static class: java.lang.Class<com.mongodb.ReplicaSetStatus>;
			public toString(): string;
			public getName(): string;
			public getMaster(): com.mongodb.ServerAddress;
			public isMaster(param0: com.mongodb.ServerAddress): boolean;
			public getMaxBsonObjectSize(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class ServerAddress {
			public static class: java.lang.Class<com.mongodb.ServerAddress>;
			public equals(param0: any): boolean;
			public constructor(param0: java.net.InetAddress);
			public constructor(param0: java.net.InetSocketAddress);
			public getHost(): string;
			public constructor();
			public getSocketAddress(): java.net.InetSocketAddress;
			public static defaultHost(): string;
			public toString(): string;
			public constructor(param0: string, param1: number);
			public sameHost(param0: string): boolean;
			public getPort(): number;
			public constructor(param0: string);
			public getSocketAddresses(): java.util.List<java.net.InetSocketAddress>;
			public static defaultPort(): number;
			public constructor(param0: java.net.InetAddress, param1: number);
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class ServerCursor {
			public static class: java.lang.Class<com.mongodb.ServerCursor>;
			public getAddress(): com.mongodb.ServerAddress;
			public equals(param0: any): boolean;
			public toString(): string;
			public getId(): number;
			public constructor(param0: number, param1: com.mongodb.ServerAddress);
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class Tag {
			public static class: java.lang.Class<com.mongodb.Tag>;
			public constructor(param0: string, param1: string);
			public equals(param0: any): boolean;
			public toString(): string;
			public getName(): string;
			public getValue(): string;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class TagSet extends java.lang.Iterable<com.mongodb.Tag> {
			public static class: java.lang.Class<com.mongodb.TagSet>;
			public equals(param0: any): boolean;
			public constructor(param0: com.mongodb.Tag);
			public toString(): string;
			public containsAll(param0: com.mongodb.TagSet): boolean;
			public constructor();
			public constructor(param0: java.util.List<com.mongodb.Tag>);
			public iterator(): java.util.Iterator<com.mongodb.Tag>;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class TaggableReadPreference extends com.mongodb.ReadPreference {
			public static class: java.lang.Class<com.mongodb.TaggableReadPreference>;
			public toDocument(): org.bson.BsonDocument;
			public equals(param0: any): boolean;
			public toString(): string;
			public chooseForNonReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
			public getMaxStaleness(param0: java.util.concurrent.TimeUnit): java.lang.Long;
			public static copyClusterDescription(param0: com.mongodb.connection.ClusterDescription, param1: java.util.List<com.mongodb.connection.ServerDescription>): com.mongodb.connection.ClusterDescription;
			public isSlaveOk(): boolean;
			public getTagSetList(): java.util.List<com.mongodb.TagSet>;
			public hashCode(): number;
			public selectFreshServers(param0: com.mongodb.connection.ClusterDescription, param1: java.util.List<com.mongodb.connection.ServerDescription>): java.util.List<com.mongodb.connection.ServerDescription>;
		}
		export module TaggableReadPreference {
			export class NearestReadPreference extends com.mongodb.TaggableReadPreference {
				public static class: java.lang.Class<com.mongodb.TaggableReadPreference.NearestReadPreference>;
				public chooseForReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public getName(): string;
			}
			export class PrimaryPreferredReadPreference extends com.mongodb.TaggableReadPreference.SecondaryReadPreference {
				public static class: java.lang.Class<com.mongodb.TaggableReadPreference.PrimaryPreferredReadPreference>;
				public chooseForReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public getName(): string;
			}
			export class SecondaryPreferredReadPreference extends com.mongodb.TaggableReadPreference.SecondaryReadPreference {
				public static class: java.lang.Class<com.mongodb.TaggableReadPreference.SecondaryPreferredReadPreference>;
				public chooseForReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public getName(): string;
			}
			export class SecondaryReadPreference extends com.mongodb.TaggableReadPreference {
				public static class: java.lang.Class<com.mongodb.TaggableReadPreference.SecondaryReadPreference>;
				public chooseForReplicaSet(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public getName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class TransactionOptions {
			public static class: java.lang.Class<com.mongodb.TransactionOptions>;
			public equals(param0: any): boolean;
			public getReadConcern(): com.mongodb.ReadConcern;
			public toString(): string;
			public static builder(): com.mongodb.TransactionOptions.Builder;
			public static merge(param0: com.mongodb.TransactionOptions, param1: com.mongodb.TransactionOptions): com.mongodb.TransactionOptions;
			public getReadPreference(): com.mongodb.ReadPreference;
			public getWriteConcern(): com.mongodb.WriteConcern;
			public hashCode(): number;
		}
		export module TransactionOptions {
			export class Builder {
				public static class: java.lang.Class<com.mongodb.TransactionOptions.Builder>;
				public readConcern(param0: com.mongodb.ReadConcern): com.mongodb.TransactionOptions.Builder;
				public writeConcern(param0: com.mongodb.WriteConcern): com.mongodb.TransactionOptions.Builder;
				public build(): com.mongodb.TransactionOptions;
				public readPreference(param0: com.mongodb.ReadPreference): com.mongodb.TransactionOptions.Builder;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class UnacknowledgedBulkWriteResult extends com.mongodb.BulkWriteResult {
			public static class: java.lang.Class<com.mongodb.UnacknowledgedBulkWriteResult>;
			public getMatchedCount(): number;
			public equals(param0: any): boolean;
			public getInsertedCount(): number;
			public isModifiedCountAvailable(): boolean;
			public toString(): string;
			public getModifiedCount(): number;
			public getUpserts(): java.util.List<com.mongodb.BulkWriteUpsert>;
			public getRemovedCount(): number;
			public isAcknowledged(): boolean;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class UnixServerAddress extends com.mongodb.ServerAddress {
			public static class: java.lang.Class<com.mongodb.UnixServerAddress>;
			public toString(): string;
			public constructor(param0: java.net.InetAddress);
			public constructor(param0: java.net.InetSocketAddress);
			public constructor(param0: string, param1: number);
			public getUnixSocketAddress(): java.net.SocketAddress;
			public constructor();
			public getSocketAddress(): java.net.InetSocketAddress;
			public constructor(param0: string);
			public constructor(param0: java.net.InetAddress, param1: number);
		}
	}
}

declare module com {
	export module mongodb {
		export class UpdateRequest extends com.mongodb.WriteRequest {
			public static class: java.lang.Class<com.mongodb.UpdateRequest>;
			public isMulti(): boolean;
			public getArrayFilters(): java.util.List<any>;
			public isUpsert(): boolean;
			public getCollation(): com.mongodb.client.model.Collation;
			public getUpdate(): com.mongodb.DBObject;
			public getQuery(): com.mongodb.DBObject;
		}
	}
}

declare module com {
	export module mongodb {
		export class WriteConcern {
			public static class: java.lang.Class<com.mongodb.WriteConcern>;
			public static ACKNOWLEDGED: com.mongodb.WriteConcern;
			public static W1: com.mongodb.WriteConcern;
			public static W2: com.mongodb.WriteConcern;
			public static W3: com.mongodb.WriteConcern;
			public static UNACKNOWLEDGED: com.mongodb.WriteConcern;
			public static FSYNCED: com.mongodb.WriteConcern;
			public static JOURNALED: com.mongodb.WriteConcern;
			public static REPLICA_ACKNOWLEDGED: com.mongodb.WriteConcern;
			public static NORMAL: com.mongodb.WriteConcern;
			public static SAFE: com.mongodb.WriteConcern;
			public static MAJORITY: com.mongodb.WriteConcern;
			public static FSYNC_SAFE: com.mongodb.WriteConcern;
			public static JOURNAL_SAFE: com.mongodb.WriteConcern;
			public static REPLICAS_SAFE: com.mongodb.WriteConcern;
			public withWTimeout(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.WriteConcern;
			public equals(param0: any): boolean;
			public constructor(param0: boolean);
			public getFsync(): boolean;
			public constructor(param0: number, param1: number, param2: boolean, param3: boolean);
			public getWTimeout(param0: java.util.concurrent.TimeUnit): java.lang.Integer;
			public isServerDefault(): boolean;
			public constructor(param0: number, param1: number, param2: boolean);
			public getJournal(): java.lang.Boolean;
			public getWtimeout(): number;
			public withW(param0: number): com.mongodb.WriteConcern;
			public withJournal(param0: java.lang.Boolean): com.mongodb.WriteConcern;
			public callGetLastError(): boolean;
			public constructor(param0: string);
			public constructor(param0: number, param1: number);
			public fsync(): boolean;
			public getJ(): boolean;
			public asDocument(): org.bson.BsonDocument;
			public withW(param0: string): com.mongodb.WriteConcern;
			public constructor(param0: number);
			public constructor(param0: string, param1: number, param2: boolean, param3: boolean);
			public constructor();
			public static majorityWriteConcern(param0: number, param1: boolean, param2: boolean): com.mongodb.WriteConcern.Majority;
			public static valueOf(param0: string): com.mongodb.WriteConcern;
			public getWString(): string;
			public withFsync(param0: boolean): com.mongodb.WriteConcern;
			public withJ(param0: boolean): com.mongodb.WriteConcern;
			public getW(): number;
			public toString(): string;
			public getWObject(): any;
			public isAcknowledged(): boolean;
			public hashCode(): number;
		}
		export module WriteConcern {
			export class Majority extends com.mongodb.WriteConcern {
				public static class: java.lang.Class<com.mongodb.WriteConcern.Majority>;
				public constructor(param0: number, param1: number);
				public constructor(param0: number, param1: number, param2: boolean);
				public constructor(param0: number);
				public constructor(param0: boolean);
				public constructor(param0: string, param1: number, param2: boolean, param3: boolean);
				public constructor(param0: string);
				public constructor();
				public constructor(param0: number, param1: number, param2: boolean, param3: boolean);
				public constructor(param0: number, param1: boolean, param2: boolean);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export class WriteConcernError {
			public static class: java.lang.Class<com.mongodb.WriteConcernError>;
			public getMessage(): string;
			public equals(param0: any): boolean;
			public toString(): string;
			public constructor(param0: number, param1: string, param2: com.mongodb.DBObject);
			public getDetails(): com.mongodb.DBObject;
			public getCode(): number;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export class WriteConcernException extends com.mongodb.MongoServerException {
			public static class: java.lang.Class<com.mongodb.WriteConcernException>;
			public getErrorCode(): number;
			public constructor(param0: number, param1: string);
			public getWriteConcernResult(): com.mongodb.WriteConcernResult;
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public constructor(param0: string, param1: com.mongodb.ServerAddress);
			public static extractErrorCode(param0: org.bson.BsonDocument): number;
			public constructor(param0: number, param1: string, param2: com.mongodb.ServerAddress);
			public getErrorMessage(): string;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress, param2: com.mongodb.WriteConcernResult);
			public static extractErrorMessage(param0: org.bson.BsonDocument): string;
			public getResponse(): org.bson.BsonDocument;
			public constructor(param0: string);
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class WriteConcernResult {
			public static class: java.lang.Class<com.mongodb.WriteConcernResult>;
			public wasAcknowledged(): boolean;
			public getUpsertedId(): org.bson.BsonValue;
			public constructor();
			public getCount(): number;
			public static acknowledged(param0: number, param1: boolean, param2: org.bson.BsonValue): com.mongodb.WriteConcernResult;
			public static unacknowledged(): com.mongodb.WriteConcernResult;
			public isUpdateOfExisting(): boolean;
		}
	}
}

declare module com {
	export module mongodb {
		export class WriteError {
			public static class: java.lang.Class<com.mongodb.WriteError>;
			public getMessage(): string;
			public equals(param0: any): boolean;
			public constructor(param0: number, param1: string, param2: org.bson.BsonDocument);
			public getDetails(): org.bson.BsonDocument;
			public toString(): string;
			public getCategory(): com.mongodb.ErrorCategory;
			public constructor(param0: com.mongodb.WriteError);
			public getCode(): number;
			public hashCode(): number;
		}
	}
}

declare module com {
	export module mongodb {
		export abstract class WriteRequest {
			public static class: java.lang.Class<com.mongodb.WriteRequest>;
		}
	}
}

declare module com {
	export module mongodb {
		export class WriteResult {
			public static class: java.lang.Class<com.mongodb.WriteResult>;
			public toString(): string;
			public getN(): number;
			public static unacknowledged(): com.mongodb.WriteResult;
			public getUpsertedId(): any;
			public wasAcknowledged(): boolean;
			public constructor(param0: number, param1: boolean, param2: any);
			public isUpdateOfExisting(): boolean;
		}
	}
}

declare module com {
	export module mongodb {
		export module annotations {
			export class Beta {
				public static class: java.lang.Class<com.mongodb.annotations.Beta>;
				/**
				 * Constructs a new instance of the com.mongodb.annotations.Beta interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module annotations {
			export class Immutable {
				public static class: java.lang.Class<com.mongodb.annotations.Immutable>;
				/**
				 * Constructs a new instance of the com.mongodb.annotations.Immutable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module annotations {
			export class NotThreadSafe {
				public static class: java.lang.Class<com.mongodb.annotations.NotThreadSafe>;
				/**
				 * Constructs a new instance of the com.mongodb.annotations.NotThreadSafe interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module annotations {
			export class ThreadSafe {
				public static class: java.lang.Class<com.mongodb.annotations.ThreadSafe>;
				/**
				 * Constructs a new instance of the com.mongodb.annotations.ThreadSafe interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module assertions {
			export class Assertions {
				public static class: java.lang.Class<com.mongodb.assertions.Assertions>;
				public static isTrue(param0: string, param1: boolean): void;
				public static notNull(param0: string, param1: any): any;
				public static notNull(param0: string, param1: any, param2: com.mongodb.async.SingleResultCallback<any>): any;
				public static isTrueArgument(param0: string, param1: boolean): void;
				public static isTrue(param0: string, param1: boolean, param2: com.mongodb.async.SingleResultCallback<any>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module async {
			export class AsyncBatchCursor<T>  extends java.io.Closeable {
				public static class: java.lang.Class<com.mongodb.async.AsyncBatchCursor<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.async.AsyncBatchCursor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
					tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
					setBatchSize(param0: number): void;
					getBatchSize(): number;
					isClosed(): boolean;
					close(): void;
				});
				public constructor();
				public close(): void;
				public tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public isClosed(): boolean;
				public getBatchSize(): number;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module async {
			export class SingleResultCallback<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.async.SingleResultCallback<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.async.SingleResultCallback<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					onResult(param0: T, param1: java.lang.Throwable): void;
				});
				public constructor();
				public onResult(param0: T, param1: java.lang.Throwable): void;
			}
		}
	}
}


declare module com {
	export module mongodb {
		export module binding {
			export abstract class AbstractReferenceCounted extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.AbstractReferenceCounted>;
				public release(): void;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getCount(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class AsyncClusterBinding extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.AsyncReadWriteBinding {
				public static class: java.lang.Class<com.mongodb.binding.AsyncClusterBinding>;
				public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern);
				public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.ReadPreference);
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.AsyncWriteBinding;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public retain(): com.mongodb.binding.AsyncReadWriteBinding;
				public getReadPreference(): com.mongodb.ReadPreference;
				public getWriteConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
				public retain(): com.mongodb.binding.AsyncReadBinding;
				public getCount(): number;
				public getReadConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
			}
			export module AsyncClusterBinding {
				export class AsyncClusterBindingConnectionSource extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.AsyncConnectionSource {
					public static class: java.lang.Class<com.mongodb.binding.AsyncClusterBinding.AsyncClusterBindingConnectionSource>;
					public retain(): com.mongodb.binding.AsyncConnectionSource;
					public getServerDescription(): com.mongodb.connection.ServerDescription;
					public getCount(): number;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public getSessionContext(): com.mongodb.session.SessionContext;
					public getConnection(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
					public release(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class AsyncConnectionSource extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.AsyncConnectionSource>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.AsyncConnectionSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getServerDescription(): com.mongodb.connection.ServerDescription;
					getSessionContext(): com.mongodb.session.SessionContext;
					getConnection(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
					retain(): com.mongodb.binding.AsyncConnectionSource;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getServerDescription(): com.mongodb.connection.ServerDescription;
				public getCount(): number;
				public retain(): com.mongodb.binding.AsyncConnectionSource;
				public getConnection(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class AsyncReadBinding extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.AsyncReadBinding>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.AsyncReadBinding interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getReadPreference(): com.mongodb.ReadPreference;
					getSessionContext(): com.mongodb.session.SessionContext;
					getReadConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
					retain(): com.mongodb.binding.AsyncReadBinding;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getReadPreference(): com.mongodb.ReadPreference;
				public retain(): com.mongodb.binding.AsyncReadBinding;
				public getCount(): number;
				public getReadConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class AsyncReadWriteBinding implements com.mongodb.binding.AsyncReadBinding, com.mongodb.binding.AsyncWriteBinding, com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.AsyncReadWriteBinding>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.AsyncReadWriteBinding interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					retain(): com.mongodb.binding.AsyncReadWriteBinding;
					getReadPreference(): com.mongodb.ReadPreference;
					getSessionContext(): com.mongodb.session.SessionContext;
					getReadConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
					retain(): com.mongodb.binding.AsyncReadBinding;
					getWriteConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
					getSessionContext(): com.mongodb.session.SessionContext;
					retain(): com.mongodb.binding.AsyncWriteBinding;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.AsyncWriteBinding;
				public retain(): com.mongodb.binding.AsyncReadWriteBinding;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getReadPreference(): com.mongodb.ReadPreference;
				public retain(): com.mongodb.binding.AsyncReadBinding;
				public getWriteConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
				public getCount(): number;
				public getReadConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class AsyncSingleConnectionReadBinding extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.AsyncReadBinding {
				public static class: java.lang.Class<com.mongodb.binding.AsyncSingleConnectionReadBinding>;
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getReadPreference(): com.mongodb.ReadPreference;
				public retain(): com.mongodb.binding.AsyncReadBinding;
				public getCount(): number;
				public constructor(param0: com.mongodb.ReadPreference, param1: com.mongodb.connection.ServerDescription, param2: com.mongodb.connection.AsyncConnection);
				public getReadConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
			}
			export module AsyncSingleConnectionReadBinding {
				export class AsyncSingleConnectionSource extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.AsyncConnectionSource {
					public static class: java.lang.Class<com.mongodb.binding.AsyncSingleConnectionReadBinding.AsyncSingleConnectionSource>;
					public retain(): com.mongodb.binding.AsyncConnectionSource;
					public getServerDescription(): com.mongodb.connection.ServerDescription;
					public getCount(): number;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public getSessionContext(): com.mongodb.session.SessionContext;
					public getConnection(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
					public release(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class AsyncWriteBinding extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.AsyncWriteBinding>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.AsyncWriteBinding interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getWriteConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
					getSessionContext(): com.mongodb.session.SessionContext;
					retain(): com.mongodb.binding.AsyncWriteBinding;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.AsyncWriteBinding;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getWriteConnectionSource(param0: com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>): void;
				public getCount(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class ClusterBinding extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.ReadWriteBinding {
				public static class: java.lang.Class<com.mongodb.binding.ClusterBinding>;
				public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern);
				public retain(): com.mongodb.binding.WriteBinding;
				public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.ReadPreference);
				public release(): void;
				public getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public retain(): com.mongodb.binding.ReadBinding;
				public getReadPreference(): com.mongodb.ReadPreference;
				public getCount(): number;
				public retain(): com.mongodb.binding.ReadWriteBinding;
				public getWriteConnectionSource(): com.mongodb.binding.ConnectionSource;
			}
			export module ClusterBinding {
				export class ClusterBindingConnectionSource extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.ConnectionSource {
					public static class: java.lang.Class<com.mongodb.binding.ClusterBinding.ClusterBindingConnectionSource>;
					public getConnection(): com.mongodb.connection.Connection;
					public getServerDescription(): com.mongodb.connection.ServerDescription;
					public getCount(): number;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public retain(): com.mongodb.binding.ConnectionSource;
					public getSessionContext(): com.mongodb.session.SessionContext;
					public release(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class ConnectionSource extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.ConnectionSource>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.ConnectionSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getServerDescription(): com.mongodb.connection.ServerDescription;
					getSessionContext(): com.mongodb.session.SessionContext;
					getConnection(): com.mongodb.connection.Connection;
					retain(): com.mongodb.binding.ConnectionSource;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ConnectionSource;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getServerDescription(): com.mongodb.connection.ServerDescription;
				public getCount(): number;
				public getConnection(): com.mongodb.connection.Connection;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class ReadBinding extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.ReadBinding>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.ReadBinding interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getReadPreference(): com.mongodb.ReadPreference;
					getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
					getSessionContext(): com.mongodb.session.SessionContext;
					retain(): com.mongodb.binding.ReadBinding;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public release(): void;
				public getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReadBinding;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getReadPreference(): com.mongodb.ReadPreference;
				public getCount(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class ReadWriteBinding implements com.mongodb.binding.ReadBinding, com.mongodb.binding.WriteBinding, com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.ReadWriteBinding>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.ReadWriteBinding interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					retain(): com.mongodb.binding.ReadWriteBinding;
					getReadPreference(): com.mongodb.ReadPreference;
					getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
					getSessionContext(): com.mongodb.session.SessionContext;
					retain(): com.mongodb.binding.ReadBinding;
					getWriteConnectionSource(): com.mongodb.binding.ConnectionSource;
					getSessionContext(): com.mongodb.session.SessionContext;
					retain(): com.mongodb.binding.WriteBinding;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public retain(): com.mongodb.binding.WriteBinding;
				public release(): void;
				public getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReadBinding;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getReadPreference(): com.mongodb.ReadPreference;
				public getCount(): number;
				public retain(): com.mongodb.binding.ReadWriteBinding;
				public getWriteConnectionSource(): com.mongodb.binding.ConnectionSource;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.ReferenceCounted>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.ReferenceCounted interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public release(): void;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getCount(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class SingleConnectionReadBinding extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.ReadBinding {
				public static class: java.lang.Class<com.mongodb.binding.SingleConnectionReadBinding>;
				public release(): void;
				public getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public retain(): com.mongodb.binding.ReadBinding;
				public constructor(param0: com.mongodb.ReadPreference, param1: com.mongodb.connection.ServerDescription, param2: com.mongodb.connection.Connection);
				public getReadPreference(): com.mongodb.ReadPreference;
				public getCount(): number;
			}
			export module SingleConnectionReadBinding {
				export class SingleConnectionSource extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.ConnectionSource {
					public static class: java.lang.Class<com.mongodb.binding.SingleConnectionReadBinding.SingleConnectionSource>;
					public getConnection(): com.mongodb.connection.Connection;
					public getServerDescription(): com.mongodb.connection.ServerDescription;
					public getCount(): number;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public retain(): com.mongodb.binding.ConnectionSource;
					public getSessionContext(): com.mongodb.session.SessionContext;
					public release(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class SingleServerBinding extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.ReadWriteBinding {
				public static class: java.lang.Class<com.mongodb.binding.SingleServerBinding>;
				public retain(): com.mongodb.binding.WriteBinding;
				public release(): void;
				public getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public retain(): com.mongodb.binding.ReadBinding;
				public getCount(): number;
				public getWriteConnectionSource(): com.mongodb.binding.ConnectionSource;
				public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.ServerAddress);
				public getReadPreference(): com.mongodb.ReadPreference;
				public retain(): com.mongodb.binding.SingleServerBinding;
				public retain(): com.mongodb.binding.ReadWriteBinding;
				public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.ServerAddress, param2: com.mongodb.ReadPreference);
			}
			export module SingleServerBinding {
				export class SingleServerBindingConnectionSource extends com.mongodb.binding.AbstractReferenceCounted implements com.mongodb.binding.ConnectionSource {
					public static class: java.lang.Class<com.mongodb.binding.SingleServerBinding.SingleServerBindingConnectionSource>;
					public getConnection(): com.mongodb.connection.Connection;
					public getServerDescription(): com.mongodb.connection.ServerDescription;
					public getCount(): number;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public retain(): com.mongodb.binding.ConnectionSource;
					public getSessionContext(): com.mongodb.session.SessionContext;
					public release(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module binding {
			export class WriteBinding extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.binding.WriteBinding>;
				/**
				 * Constructs a new instance of the com.mongodb.binding.WriteBinding interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getWriteConnectionSource(): com.mongodb.binding.ConnectionSource;
					getSessionContext(): com.mongodb.session.SessionContext;
					retain(): com.mongodb.binding.WriteBinding;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public retain(): com.mongodb.binding.WriteBinding;
				public release(): void;
				public getSessionContext(): com.mongodb.session.SessionContext;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getCount(): number;
				public getWriteConnectionSource(): com.mongodb.binding.ConnectionSource;
			}
		}
	}
}


declare module com {
	export module mongodb {
		export module bulk {
			export class BulkWriteError extends com.mongodb.WriteError {
				public static class: java.lang.Class<com.mongodb.bulk.BulkWriteError>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: com.mongodb.WriteError);
				public constructor(param0: number, param1: string, param2: org.bson.BsonDocument, param3: number);
				public getIndex(): number;
				public toString(): string;
				public constructor(param0: number, param1: string, param2: org.bson.BsonDocument);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export abstract class BulkWriteResult {
				public static class: java.lang.Class<com.mongodb.bulk.BulkWriteResult>;
				public getUpserts(): java.util.List<com.mongodb.bulk.BulkWriteUpsert>;
				public static acknowledged(param0: number, param1: number, param2: number, param3: java.lang.Integer, param4: java.util.List<com.mongodb.bulk.BulkWriteUpsert>): com.mongodb.bulk.BulkWriteResult;
				public static acknowledged(param0: com.mongodb.bulk.WriteRequest.Type, param1: number, param2: java.util.List<com.mongodb.bulk.BulkWriteUpsert>): com.mongodb.bulk.BulkWriteResult;
				public static acknowledged(param0: com.mongodb.bulk.WriteRequest.Type, param1: number, param2: java.lang.Integer, param3: java.util.List<com.mongodb.bulk.BulkWriteUpsert>): com.mongodb.bulk.BulkWriteResult;
				public getInsertedCount(): number;
				public getModifiedCount(): number;
				public wasAcknowledged(): boolean;
				public getDeletedCount(): number;
				public static unacknowledged(): com.mongodb.bulk.BulkWriteResult;
				public isModifiedCountAvailable(): boolean;
				public constructor();
				public getMatchedCount(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export class BulkWriteUpsert {
				public static class: java.lang.Class<com.mongodb.bulk.BulkWriteUpsert>;
				public constructor(param0: number, param1: org.bson.BsonValue);
				public getId(): org.bson.BsonValue;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getIndex(): number;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export class DeleteRequest extends com.mongodb.bulk.WriteRequest {
				public static class: java.lang.Class<com.mongodb.bulk.DeleteRequest>;
				public getCollation(): com.mongodb.client.model.Collation;
				public multi(param0: boolean): com.mongodb.bulk.DeleteRequest;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.bulk.DeleteRequest;
				public getFilter(): org.bson.BsonDocument;
				public getType(): com.mongodb.bulk.WriteRequest.Type;
				public constructor(param0: org.bson.BsonDocument);
				public isMulti(): boolean;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export class IndexRequest {
				public static class: java.lang.Class<com.mongodb.bulk.IndexRequest>;
				public getBits(): java.lang.Integer;
				public sphereVersion(param0: java.lang.Integer): com.mongodb.bulk.IndexRequest;
				public getSphereVersion(): java.lang.Integer;
				public weights(param0: org.bson.BsonDocument): com.mongodb.bulk.IndexRequest;
				public version(param0: java.lang.Integer): com.mongodb.bulk.IndexRequest;
				public languageOverride(param0: string): com.mongodb.bulk.IndexRequest;
				public isBackground(): boolean;
				public sparse(param0: boolean): com.mongodb.bulk.IndexRequest;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.bulk.IndexRequest;
				public getKeys(): org.bson.BsonDocument;
				public bits(param0: java.lang.Integer): com.mongodb.bulk.IndexRequest;
				public max(param0: java.lang.Double): com.mongodb.bulk.IndexRequest;
				public background(param0: boolean): com.mongodb.bulk.IndexRequest;
				public getMin(): java.lang.Double;
				public name(param0: string): com.mongodb.bulk.IndexRequest;
				public getTextVersion(): java.lang.Integer;
				public storageEngine(param0: org.bson.BsonDocument): com.mongodb.bulk.IndexRequest;
				public getCollation(): com.mongodb.client.model.Collation;
				public bucketSize(param0: java.lang.Double): com.mongodb.bulk.IndexRequest;
				public getLanguageOverride(): string;
				public getMax(): java.lang.Double;
				public dropDups(param0: boolean): com.mongodb.bulk.IndexRequest;
				public getStorageEngine(): org.bson.BsonDocument;
				public partialFilterExpression(param0: org.bson.BsonDocument): com.mongodb.bulk.IndexRequest;
				public getName(): string;
				public expireAfter(param0: java.lang.Long, param1: java.util.concurrent.TimeUnit): com.mongodb.bulk.IndexRequest;
				public textVersion(param0: java.lang.Integer): com.mongodb.bulk.IndexRequest;
				public constructor(param0: org.bson.BsonDocument);
				public isUnique(): boolean;
				public getWeights(): org.bson.BsonDocument;
				public min(param0: java.lang.Double): com.mongodb.bulk.IndexRequest;
				public getVersion(): java.lang.Integer;
				public getDefaultLanguage(): string;
				public isSparse(): boolean;
				public defaultLanguage(param0: string): com.mongodb.bulk.IndexRequest;
				public unique(param0: boolean): com.mongodb.bulk.IndexRequest;
				public getExpireAfter(param0: java.util.concurrent.TimeUnit): java.lang.Long;
				public getPartialFilterExpression(): org.bson.BsonDocument;
				public getBucketSize(): java.lang.Double;
				public getDropDups(): boolean;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export class InsertRequest extends com.mongodb.bulk.WriteRequest {
				public static class: java.lang.Class<com.mongodb.bulk.InsertRequest>;
				public getDocument(): org.bson.BsonDocument;
				public getType(): com.mongodb.bulk.WriteRequest.Type;
				public constructor(param0: org.bson.BsonDocument);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export class UpdateRequest extends com.mongodb.bulk.WriteRequest {
				public static class: java.lang.Class<com.mongodb.bulk.UpdateRequest>;
				public constructor(param0: org.bson.BsonDocument, param1: org.bson.BsonDocument, param2: com.mongodb.bulk.WriteRequest.Type);
				public getCollation(): com.mongodb.client.model.Collation;
				public getArrayFilters(): java.util.List<org.bson.BsonDocument>;
				public getUpdate(): org.bson.BsonDocument;
				public isUpsert(): boolean;
				public arrayFilters(param0: java.util.List<org.bson.BsonDocument>): com.mongodb.bulk.UpdateRequest;
				public getType(): com.mongodb.bulk.WriteRequest.Type;
				public getFilter(): org.bson.BsonDocument;
				public upsert(param0: boolean): com.mongodb.bulk.UpdateRequest;
				public isMulti(): boolean;
				public multi(param0: boolean): com.mongodb.bulk.UpdateRequest;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.bulk.UpdateRequest;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export class WriteConcernError {
				public static class: java.lang.Class<com.mongodb.bulk.WriteConcernError>;
				public hashCode(): number;
				public constructor(param0: number, param1: string, param2: string, param3: org.bson.BsonDocument);
				public getCode(): number;
				public equals(param0: any): boolean;
				public getCodeName(): string;
				public getMessage(): string;
				public toString(): string;
				public constructor(param0: number, param1: string, param2: org.bson.BsonDocument);
				public getDetails(): org.bson.BsonDocument;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module bulk {
			export abstract class WriteRequest {
				public static class: java.lang.Class<com.mongodb.bulk.WriteRequest>;
				public getType(): com.mongodb.bulk.WriteRequest.Type;
			}
			export module WriteRequest {
				export class Type {
					public static class: java.lang.Class<com.mongodb.bulk.WriteRequest.Type>;
					public static INSERT: com.mongodb.bulk.WriteRequest.Type;
					public static UPDATE: com.mongodb.bulk.WriteRequest.Type;
					public static REPLACE: com.mongodb.bulk.WriteRequest.Type;
					public static DELETE: com.mongodb.bulk.WriteRequest.Type;
					public static values(): native.Array<com.mongodb.bulk.WriteRequest.Type>;
					public static valueOf(param0: string): com.mongodb.bulk.WriteRequest.Type;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class AggregateIterable<TResult>  extends com.mongodb.client.MongoIterable<any> {
				public static class: java.lang.Class<com.mongodb.client.AggregateIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.AggregateIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					toCollection(): void;
					allowDiskUse(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					batchSize(param0: number): com.mongodb.client.AggregateIterable<any>;
					maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
					useCursor(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
					bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.AggregateIterable<any>;
					comment(param0: string): com.mongodb.client.AggregateIterable<any>;
					hint(param0: org.bson.conversions.Bson): com.mongodb.client.AggregateIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
				public batchSize(param0: number): com.mongodb.client.AggregateIterable<any>;
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.AggregateIterable<any>;
				public allowDiskUse(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
				public useCursor(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
				public hint(param0: org.bson.conversions.Bson): com.mongodb.client.AggregateIterable<any>;
				public forEach(param0: com.mongodb.Block<any>): void;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public toCollection(): void;
				public first(): any;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
				public into(param0: java.util.Collection): java.util.Collection;
				public comment(param0: string): com.mongodb.client.AggregateIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class ChangeStreamIterable<TResult>  extends com.mongodb.client.MongoIterable<com.mongodb.client.model.changestream.ChangeStreamDocument<any>> {
				public static class: java.lang.Class<com.mongodb.client.ChangeStreamIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.ChangeStreamIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					fullDocument(param0: com.mongodb.client.model.changestream.FullDocument): com.mongodb.client.ChangeStreamIterable<any>;
					resumeAfter(param0: org.bson.BsonDocument): com.mongodb.client.ChangeStreamIterable<any>;
					batchSize(param0: number): com.mongodb.client.ChangeStreamIterable<any>;
					maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ChangeStreamIterable<any>;
					collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.ChangeStreamIterable<any>;
					withDocumentClass(param0: java.lang.Class): com.mongodb.client.MongoIterable<any>;
					startAtOperationTime(param0: org.bson.BsonTimestamp): com.mongodb.client.ChangeStreamIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public startAtOperationTime(param0: org.bson.BsonTimestamp): com.mongodb.client.ChangeStreamIterable<any>;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.ChangeStreamIterable<any>;
				public resumeAfter(param0: org.bson.BsonDocument): com.mongodb.client.ChangeStreamIterable<any>;
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public withDocumentClass(param0: java.lang.Class): com.mongodb.client.MongoIterable<any>;
				public fullDocument(param0: com.mongodb.client.model.changestream.FullDocument): com.mongodb.client.ChangeStreamIterable<any>;
				public forEach(param0: com.mongodb.Block<any>): void;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public batchSize(param0: number): com.mongodb.client.ChangeStreamIterable<any>;
				public first(): any;
				public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ChangeStreamIterable<any>;
				public into(param0: java.util.Collection): java.util.Collection;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class ClientSession extends com.mongodb.session.ClientSession {
				public static class: java.lang.Class<com.mongodb.client.ClientSession>;
				/**
				 * Constructs a new instance of the com.mongodb.client.ClientSession interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					hasActiveTransaction(): boolean;
					notifyMessageSent(): boolean;
					getTransactionOptions(): com.mongodb.TransactionOptions;
					startTransaction(): void;
					startTransaction(param0: com.mongodb.TransactionOptions): void;
					commitTransaction(): void;
					abortTransaction(): void;
					getOptions(): com.mongodb.ClientSessionOptions;
					isCausallyConsistent(): boolean;
					getOriginator(): any;
					getServerSession(): com.mongodb.session.ServerSession;
					getOperationTime(): org.bson.BsonTimestamp;
					advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					advanceClusterTime(param0: org.bson.BsonDocument): void;
					getClusterTime(): org.bson.BsonDocument;
					close(): void;
				});
				public constructor();
				public hasActiveTransaction(): boolean;
				public getOperationTime(): org.bson.BsonTimestamp;
				public getClusterTime(): org.bson.BsonDocument;
				public close(): void;
				public isCausallyConsistent(): boolean;
				public getOriginator(): any;
				public startTransaction(): void;
				public abortTransaction(): void;
				public getOptions(): com.mongodb.ClientSessionOptions;
				public notifyMessageSent(): boolean;
				public startTransaction(param0: com.mongodb.TransactionOptions): void;
				public commitTransaction(): void;
				public getTransactionOptions(): com.mongodb.TransactionOptions;
				public getServerSession(): com.mongodb.session.ServerSession;
				public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
				public advanceClusterTime(param0: org.bson.BsonDocument): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class DistinctIterable<TResult>  extends com.mongodb.client.MongoIterable<any> {
				public static class: java.lang.Class<com.mongodb.client.DistinctIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.DistinctIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					filter(param0: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
					maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.DistinctIterable<any>;
					batchSize(param0: number): com.mongodb.client.DistinctIterable<any>;
					collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.DistinctIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public batchSize(param0: number): com.mongodb.client.DistinctIterable<any>;
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.DistinctIterable<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public first(): any;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.DistinctIterable<any>;
				public into(param0: java.util.Collection): java.util.Collection;
				public forEach(param0: com.mongodb.Block<any>): void;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
				public filter(param0: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class FindIterable<TResult>  extends com.mongodb.client.MongoIterable<any> {
				public static class: java.lang.Class<com.mongodb.client.FindIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.FindIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					filter(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					limit(param0: number): com.mongodb.client.FindIterable<any>;
					skip(param0: number): com.mongodb.client.FindIterable<any>;
					maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
					maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
					modifiers(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					projection(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					sort(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					noCursorTimeout(param0: boolean): com.mongodb.client.FindIterable<any>;
					oplogReplay(param0: boolean): com.mongodb.client.FindIterable<any>;
					partial(param0: boolean): com.mongodb.client.FindIterable<any>;
					cursorType(param0: com.mongodb.CursorType): com.mongodb.client.FindIterable<any>;
					batchSize(param0: number): com.mongodb.client.FindIterable<any>;
					collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.FindIterable<any>;
					comment(param0: string): com.mongodb.client.FindIterable<any>;
					hint(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					max(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					min(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					maxScan(param0: number): com.mongodb.client.FindIterable<any>;
					returnKey(param0: boolean): com.mongodb.client.FindIterable<any>;
					showRecordId(param0: boolean): com.mongodb.client.FindIterable<any>;
					snapshot(param0: boolean): com.mongodb.client.FindIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public modifiers(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
				public returnKey(param0: boolean): com.mongodb.client.FindIterable<any>;
				public showRecordId(param0: boolean): com.mongodb.client.FindIterable<any>;
				public maxScan(param0: number): com.mongodb.client.FindIterable<any>;
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public partial(param0: boolean): com.mongodb.client.FindIterable<any>;
				public skip(param0: number): com.mongodb.client.FindIterable<any>;
				public forEach(param0: com.mongodb.Block<any>): void;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.FindIterable<any>;
				public filter(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
				public cursorType(param0: com.mongodb.CursorType): com.mongodb.client.FindIterable<any>;
				public batchSize(param0: number): com.mongodb.client.FindIterable<any>;
				public projection(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public max(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
				public oplogReplay(param0: boolean): com.mongodb.client.FindIterable<any>;
				public noCursorTimeout(param0: boolean): com.mongodb.client.FindIterable<any>;
				public limit(param0: number): com.mongodb.client.FindIterable<any>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
				public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
				public sort(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
				public comment(param0: string): com.mongodb.client.FindIterable<any>;
				public hint(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
				public snapshot(param0: boolean): com.mongodb.client.FindIterable<any>;
				public first(): any;
				public min(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
				public into(param0: java.util.Collection): java.util.Collection;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class ListCollectionsIterable<TResult>  extends com.mongodb.client.MongoIterable<any> {
				public static class: java.lang.Class<com.mongodb.client.ListCollectionsIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.ListCollectionsIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListCollectionsIterable<any>;
					maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListCollectionsIterable<any>;
					batchSize(param0: number): com.mongodb.client.ListCollectionsIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListCollectionsIterable<any>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListCollectionsIterable<any>;
				public first(): any;
				public into(param0: java.util.Collection): java.util.Collection;
				public forEach(param0: com.mongodb.Block<any>): void;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
				public batchSize(param0: number): com.mongodb.client.ListCollectionsIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class ListDatabasesIterable<TResult>  extends com.mongodb.client.MongoIterable<any> {
				public static class: java.lang.Class<com.mongodb.client.ListDatabasesIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.ListDatabasesIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListDatabasesIterable<any>;
					batchSize(param0: number): com.mongodb.client.ListDatabasesIterable<any>;
					filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListDatabasesIterable<any>;
					nameOnly(param0: java.lang.Boolean): com.mongodb.client.ListDatabasesIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public batchSize(param0: number): com.mongodb.client.ListDatabasesIterable<any>;
				public nameOnly(param0: java.lang.Boolean): com.mongodb.client.ListDatabasesIterable<any>;
				public first(): any;
				public filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListDatabasesIterable<any>;
				public into(param0: java.util.Collection): java.util.Collection;
				public forEach(param0: com.mongodb.Block<any>): void;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListDatabasesIterable<any>;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class ListIndexesIterable<TResult>  extends com.mongodb.client.MongoIterable<any> {
				public static class: java.lang.Class<com.mongodb.client.ListIndexesIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.ListIndexesIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListIndexesIterable<any>;
					batchSize(param0: number): com.mongodb.client.ListIndexesIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public first(): any;
				public into(param0: java.util.Collection): java.util.Collection;
				public forEach(param0: com.mongodb.Block<any>): void;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListIndexesIterable<any>;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
				public batchSize(param0: number): com.mongodb.client.ListIndexesIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MapReduceIterable<TResult>  extends com.mongodb.client.MongoIterable<any> {
				public static class: java.lang.Class<com.mongodb.client.MapReduceIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.MapReduceIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					toCollection(): void;
					collectionName(param0: string): com.mongodb.client.MapReduceIterable<any>;
					finalizeFunction(param0: string): com.mongodb.client.MapReduceIterable<any>;
					scope(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					sort(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					filter(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					limit(param0: number): com.mongodb.client.MapReduceIterable<any>;
					jsMode(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					verbose(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.MapReduceIterable<any>;
					action(param0: com.mongodb.client.model.MapReduceAction): com.mongodb.client.MapReduceIterable<any>;
					databaseName(param0: string): com.mongodb.client.MapReduceIterable<any>;
					sharded(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					nonAtomic(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					batchSize(param0: number): com.mongodb.client.MapReduceIterable<any>;
					bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.MapReduceIterable<any>;
					collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.MapReduceIterable<any>;
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public verbose(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
				public scope(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
				public action(param0: com.mongodb.client.model.MapReduceAction): com.mongodb.client.MapReduceIterable<any>;
				public sharded(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.MapReduceIterable<any>;
				public finalizeFunction(param0: string): com.mongodb.client.MapReduceIterable<any>;
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public sort(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.MapReduceIterable<any>;
				public jsMode(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
				public forEach(param0: com.mongodb.Block<any>): void;
				public collectionName(param0: string): com.mongodb.client.MapReduceIterable<any>;
				public batchSize(param0: number): com.mongodb.client.MapReduceIterable<any>;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
				public limit(param0: number): com.mongodb.client.MapReduceIterable<any>;
				public nonAtomic(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public toCollection(): void;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.MapReduceIterable<any>;
				public first(): any;
				public databaseName(param0: string): com.mongodb.client.MapReduceIterable<any>;
				public into(param0: java.util.Collection): java.util.Collection;
				public filter(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MongoClient {
				public static class: java.lang.Class<com.mongodb.client.MongoClient>;
				/**
				 * Constructs a new instance of the com.mongodb.client.MongoClient interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getDatabase(param0: string): com.mongodb.client.MongoDatabase;
					startSession(): com.mongodb.client.ClientSession;
					startSession(param0: com.mongodb.ClientSessionOptions): com.mongodb.client.ClientSession;
					close(): void;
					listDatabaseNames(): com.mongodb.client.MongoIterable<string>;
					listDatabaseNames(param0: com.mongodb.client.ClientSession): com.mongodb.client.MongoIterable<string>;
					listDatabases(): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
					listDatabases(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
					listDatabases(param0: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
					listDatabases(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
					watch(): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				});
				public constructor();
				public listDatabases(): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
				public watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public close(): void;
				public watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public getDatabase(param0: string): com.mongodb.client.MongoDatabase;
				public startSession(): com.mongodb.client.ClientSession;
				public watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public watch(): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public listDatabaseNames(): com.mongodb.client.MongoIterable<string>;
				public listDatabases(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
				public listDatabases(param0: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
				public listDatabaseNames(param0: com.mongodb.client.ClientSession): com.mongodb.client.MongoIterable<string>;
				public listDatabases(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public startSession(param0: com.mongodb.ClientSessionOptions): com.mongodb.client.ClientSession;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MongoClientFactory {
				public static class: java.lang.Class<com.mongodb.client.MongoClientFactory>;
				public getObjectInstance(param0: any, param1: javax.naming.Name, param2: javax.naming.Context, param3: java.util.Hashtable<any,any>): any;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MongoClients {
				public static class: java.lang.Class<com.mongodb.client.MongoClients>;
				public static create(): com.mongodb.client.MongoClient;
				public static create(param0: com.mongodb.MongoClientSettings, param1: com.mongodb.MongoDriverInformation): com.mongodb.client.MongoClient;
				public static create(param0: com.mongodb.ConnectionString): com.mongodb.client.MongoClient;
				public static create(param0: com.mongodb.ConnectionString, param1: com.mongodb.MongoDriverInformation): com.mongodb.client.MongoClient;
				public static create(param0: com.mongodb.MongoClientSettings): com.mongodb.client.MongoClient;
				public static create(param0: string): com.mongodb.client.MongoClient;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MongoCollection<TDocument>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.client.MongoCollection<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.MongoCollection<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getNamespace(): com.mongodb.MongoNamespace;
					getDocumentClass(): java.lang.Class<TDocument>;
					getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
					getReadPreference(): com.mongodb.ReadPreference;
					getWriteConcern(): com.mongodb.WriteConcern;
					getReadConcern(): com.mongodb.ReadConcern;
					withDocumentClass(param0: java.lang.Class): com.mongodb.client.MongoCollection<any>;
					withCodecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.client.MongoCollection<TDocument>;
					withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.MongoCollection<TDocument>;
					withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.MongoCollection<TDocument>;
					withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.MongoCollection<TDocument>;
					count(): number;
					count(param0: org.bson.conversions.Bson): number;
					count(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions): number;
					count(param0: com.mongodb.client.ClientSession): number;
					count(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): number;
					count(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.CountOptions): number;
					countDocuments(): number;
					countDocuments(param0: org.bson.conversions.Bson): number;
					countDocuments(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions): number;
					countDocuments(param0: com.mongodb.client.ClientSession): number;
					countDocuments(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): number;
					countDocuments(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.CountOptions): number;
					estimatedDocumentCount(): number;
					estimatedDocumentCount(param0: com.mongodb.client.model.EstimatedDocumentCountOptions): number;
					distinct(param0: string, param1: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					distinct(param0: string, param1: org.bson.conversions.Bson, param2: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					distinct(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					distinct(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.conversions.Bson, param3: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					find(): com.mongodb.client.FindIterable<TDocument>;
					find(param0: java.lang.Class): com.mongodb.client.FindIterable<any>;
					find(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<TDocument>;
					find(param0: org.bson.conversions.Bson, param1: java.lang.Class): com.mongodb.client.FindIterable<any>;
					find(param0: com.mongodb.client.ClientSession): com.mongodb.client.FindIterable<TDocument>;
					find(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.FindIterable<any>;
					find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.FindIterable<TDocument>;
					find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: java.lang.Class): com.mongodb.client.FindIterable<any>;
					aggregate(param0: java.util.List<any>): com.mongodb.client.AggregateIterable<TDocument>;
					aggregate(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
					aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.AggregateIterable<TDocument>;
					aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
					watch(): com.mongodb.client.ChangeStreamIterable<TDocument>;
					watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<TDocument>;
					watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<TDocument>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<TDocument>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					mapReduce(param0: string, param1: string): com.mongodb.client.MapReduceIterable<TDocument>;
					mapReduce(param0: string, param1: string, param2: java.lang.Class): com.mongodb.client.MapReduceIterable<any>;
					mapReduce(param0: com.mongodb.client.ClientSession, param1: string, param2: string): com.mongodb.client.MapReduceIterable<TDocument>;
					mapReduce(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.lang.Class): com.mongodb.client.MapReduceIterable<any>;
					bulkWrite(param0: java.util.List<any>): com.mongodb.bulk.BulkWriteResult;
					bulkWrite(param0: java.util.List<any>, param1: com.mongodb.client.model.BulkWriteOptions): com.mongodb.bulk.BulkWriteResult;
					bulkWrite(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.bulk.BulkWriteResult;
					bulkWrite(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>, param2: com.mongodb.client.model.BulkWriteOptions): com.mongodb.bulk.BulkWriteResult;
					insertOne(param0: TDocument): void;
					insertOne(param0: TDocument, param1: com.mongodb.client.model.InsertOneOptions): void;
					insertOne(param0: com.mongodb.client.ClientSession, param1: TDocument): void;
					insertOne(param0: com.mongodb.client.ClientSession, param1: TDocument, param2: com.mongodb.client.model.InsertOneOptions): void;
					insertMany(param0: java.util.List<any>): void;
					insertMany(param0: java.util.List<any>, param1: com.mongodb.client.model.InsertManyOptions): void;
					insertMany(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): void;
					insertMany(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>, param2: com.mongodb.client.model.InsertManyOptions): void;
					deleteOne(param0: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					deleteOne(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					deleteOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					deleteOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					deleteMany(param0: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					deleteMany(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					deleteMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					deleteMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					replaceOne(param0: org.bson.conversions.Bson, param1: TDocument): com.mongodb.client.result.UpdateResult;
					replaceOne(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					replaceOne(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.ReplaceOptions): com.mongodb.client.result.UpdateResult;
					replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument): com.mongodb.client.result.UpdateResult;
					replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument, param3: com.mongodb.client.model.ReplaceOptions): com.mongodb.client.result.UpdateResult;
					updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					updateOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					updateOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					updateMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					updateMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					findOneAndDelete(param0: org.bson.conversions.Bson): TDocument;
					findOneAndDelete(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.FindOneAndDeleteOptions): TDocument;
					findOneAndDelete(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): TDocument;
					findOneAndDelete(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndDeleteOptions): TDocument;
					findOneAndReplace(param0: org.bson.conversions.Bson, param1: TDocument): TDocument;
					findOneAndReplace(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.FindOneAndReplaceOptions): TDocument;
					findOneAndReplace(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument): TDocument;
					findOneAndReplace(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument, param3: com.mongodb.client.model.FindOneAndReplaceOptions): TDocument;
					findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): TDocument;
					findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndUpdateOptions): TDocument;
					findOneAndUpdate(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): TDocument;
					findOneAndUpdate(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.FindOneAndUpdateOptions): TDocument;
					drop(): void;
					drop(param0: com.mongodb.client.ClientSession): void;
					createIndex(param0: org.bson.conversions.Bson): string;
					createIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.IndexOptions): string;
					createIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): string;
					createIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.IndexOptions): string;
					createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>): java.util.List<string>;
					createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>, param1: com.mongodb.client.model.CreateIndexOptions): java.util.List<string>;
					createIndexes(param0: com.mongodb.client.ClientSession, param1: java.util.List<com.mongodb.client.model.IndexModel>): java.util.List<string>;
					createIndexes(param0: com.mongodb.client.ClientSession, param1: java.util.List<com.mongodb.client.model.IndexModel>, param2: com.mongodb.client.model.CreateIndexOptions): java.util.List<string>;
					listIndexes(): com.mongodb.client.ListIndexesIterable<org.bson.Document>;
					listIndexes(param0: java.lang.Class): com.mongodb.client.ListIndexesIterable<any>;
					listIndexes(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListIndexesIterable<org.bson.Document>;
					listIndexes(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListIndexesIterable<any>;
					dropIndex(param0: string): void;
					dropIndex(param0: string, param1: com.mongodb.client.model.DropIndexOptions): void;
					dropIndex(param0: org.bson.conversions.Bson): void;
					dropIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DropIndexOptions): void;
					dropIndex(param0: com.mongodb.client.ClientSession, param1: string): void;
					dropIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): void;
					dropIndex(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.model.DropIndexOptions): void;
					dropIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DropIndexOptions): void;
					dropIndexes(): void;
					dropIndexes(param0: com.mongodb.client.ClientSession): void;
					dropIndexes(param0: com.mongodb.client.model.DropIndexOptions): void;
					dropIndexes(param0: com.mongodb.client.ClientSession, param1: com.mongodb.client.model.DropIndexOptions): void;
					renameCollection(param0: com.mongodb.MongoNamespace): void;
					renameCollection(param0: com.mongodb.MongoNamespace, param1: com.mongodb.client.model.RenameCollectionOptions): void;
					renameCollection(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace): void;
					renameCollection(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: com.mongodb.client.model.RenameCollectionOptions): void;
				});
				public constructor();
				public insertOne(param0: com.mongodb.client.ClientSession, param1: TDocument): void;
				public dropIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DropIndexOptions): void;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<TDocument>;
				public findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndUpdateOptions): TDocument;
				public drop(param0: com.mongodb.client.ClientSession): void;
				public countDocuments(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): number;
				public deleteOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
				public mapReduce(param0: string, param1: string, param2: java.lang.Class): com.mongodb.client.MapReduceIterable<any>;
				public insertOne(param0: TDocument, param1: com.mongodb.client.model.InsertOneOptions): void;
				public deleteMany(param0: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
				public createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>, param1: com.mongodb.client.model.CreateIndexOptions): java.util.List<string>;
				public updateOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
				public updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
				public findOneAndDelete(param0: org.bson.conversions.Bson): TDocument;
				public find(): com.mongodb.client.FindIterable<TDocument>;
				public dropIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DropIndexOptions): void;
				public withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.MongoCollection<TDocument>;
				public mapReduce(param0: com.mongodb.client.ClientSession, param1: string, param2: string): com.mongodb.client.MapReduceIterable<TDocument>;
				public deleteMany(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
				public countDocuments(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.CountOptions): number;
				public drop(): void;
				public createIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.IndexOptions): string;
				public count(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.CountOptions): number;
				public withDocumentClass(param0: java.lang.Class): com.mongodb.client.MongoCollection<any>;
				public bulkWrite(param0: java.util.List<any>): com.mongodb.bulk.BulkWriteResult;
				public count(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions): number;
				public withCodecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.client.MongoCollection<TDocument>;
				public withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.MongoCollection<TDocument>;
				public findOneAndReplace(param0: org.bson.conversions.Bson, param1: TDocument): TDocument;
				public findOneAndReplace(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument, param3: com.mongodb.client.model.FindOneAndReplaceOptions): TDocument;
				public createIndex(param0: org.bson.conversions.Bson): string;
				public replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument, param3: com.mongodb.client.model.ReplaceOptions): com.mongodb.client.result.UpdateResult;
				public replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument): com.mongodb.client.result.UpdateResult;
				public findOneAndReplace(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument): TDocument;
				public countDocuments(param0: org.bson.conversions.Bson): number;
				public distinct(param0: string, param1: org.bson.conversions.Bson, param2: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
				public createIndexes(param0: com.mongodb.client.ClientSession, param1: java.util.List<com.mongodb.client.model.IndexModel>): java.util.List<string>;
				public updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
				public count(param0: org.bson.conversions.Bson): number;
				public dropIndexes(param0: com.mongodb.client.model.DropIndexOptions): void;
				public deleteMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
				public findOneAndDelete(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): TDocument;
				public watch(): com.mongodb.client.ChangeStreamIterable<TDocument>;
				public withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.MongoCollection<TDocument>;
				public find(param0: java.lang.Class): com.mongodb.client.FindIterable<any>;
				public dropIndexes(param0: com.mongodb.client.ClientSession): void;
				public getReadConcern(): com.mongodb.ReadConcern;
				public watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<TDocument>;
				public countDocuments(): number;
				public find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: java.lang.Class): com.mongodb.client.FindIterable<any>;
				public bulkWrite(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.bulk.BulkWriteResult;
				public count(param0: com.mongodb.client.ClientSession): number;
				public insertOne(param0: TDocument): void;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public replaceOne(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
				public mapReduce(param0: string, param1: string): com.mongodb.client.MapReduceIterable<TDocument>;
				public estimatedDocumentCount(): number;
				public watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public mapReduce(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.lang.Class): com.mongodb.client.MapReduceIterable<any>;
				public deleteOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
				public findOneAndDelete(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndDeleteOptions): TDocument;
				public findOneAndDelete(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.FindOneAndDeleteOptions): TDocument;
				public createIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): string;
				public deleteOne(param0: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
				public listIndexes(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListIndexesIterable<any>;
				public getDocumentClass(): java.lang.Class<TDocument>;
				public insertMany(param0: java.util.List<any>, param1: com.mongodb.client.model.InsertManyOptions): void;
				public find(param0: com.mongodb.client.ClientSession): com.mongodb.client.FindIterable<TDocument>;
				public updateMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
				public count(): number;
				public listIndexes(): com.mongodb.client.ListIndexesIterable<org.bson.Document>;
				public countDocuments(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions): number;
				public distinct(param0: string, param1: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
				public aggregate(param0: java.util.List<any>): com.mongodb.client.AggregateIterable<TDocument>;
				public find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.FindIterable<TDocument>;
				public updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
				public findOneAndUpdate(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.FindOneAndUpdateOptions): TDocument;
				public createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>): java.util.List<string>;
				public bulkWrite(param0: java.util.List<any>, param1: com.mongodb.client.model.BulkWriteOptions): com.mongodb.bulk.BulkWriteResult;
				public updateOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
				public getNamespace(): com.mongodb.MongoNamespace;
				public replaceOne(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.ReplaceOptions): com.mongodb.client.result.UpdateResult;
				public getReadPreference(): com.mongodb.ReadPreference;
				public deleteMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
				public findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): TDocument;
				public dropIndex(param0: string): void;
				public renameCollection(param0: com.mongodb.MongoNamespace): void;
				public dropIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): void;
				public countDocuments(param0: com.mongodb.client.ClientSession): number;
				public watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<TDocument>;
				public count(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): number;
				public bulkWrite(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>, param2: com.mongodb.client.model.BulkWriteOptions): com.mongodb.bulk.BulkWriteResult;
				public createIndexes(param0: com.mongodb.client.ClientSession, param1: java.util.List<com.mongodb.client.model.IndexModel>, param2: com.mongodb.client.model.CreateIndexOptions): java.util.List<string>;
				public estimatedDocumentCount(param0: com.mongodb.client.model.EstimatedDocumentCountOptions): number;
				public findOneAndReplace(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.FindOneAndReplaceOptions): TDocument;
				public replaceOne(param0: org.bson.conversions.Bson, param1: TDocument): com.mongodb.client.result.UpdateResult;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public renameCollection(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace): void;
				public dropIndex(param0: org.bson.conversions.Bson): void;
				public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
				public insertOne(param0: com.mongodb.client.ClientSession, param1: TDocument, param2: com.mongodb.client.model.InsertOneOptions): void;
				public distinct(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
				public createIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.IndexOptions): string;
				public updateMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
				public dropIndex(param0: com.mongodb.client.ClientSession, param1: string): void;
				public listIndexes(param0: java.lang.Class): com.mongodb.client.ListIndexesIterable<any>;
				public distinct(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.conversions.Bson, param3: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
				public insertMany(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): void;
				public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.AggregateIterable<TDocument>;
				public dropIndex(param0: string, param1: com.mongodb.client.model.DropIndexOptions): void;
				public deleteOne(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
				public getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
				public dropIndexes(): void;
				public updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
				public dropIndex(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.model.DropIndexOptions): void;
				public renameCollection(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: com.mongodb.client.model.RenameCollectionOptions): void;
				public watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public insertMany(param0: java.util.List<any>): void;
				public insertMany(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>, param2: com.mongodb.client.model.InsertManyOptions): void;
				public find(param0: org.bson.conversions.Bson, param1: java.lang.Class): com.mongodb.client.FindIterable<any>;
				public replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: TDocument, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
				public find(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<TDocument>;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public renameCollection(param0: com.mongodb.MongoNamespace, param1: com.mongodb.client.model.RenameCollectionOptions): void;
				public listIndexes(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListIndexesIterable<org.bson.Document>;
				public dropIndexes(param0: com.mongodb.client.ClientSession, param1: com.mongodb.client.model.DropIndexOptions): void;
				public find(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.FindIterable<any>;
				public aggregate(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
				public findOneAndUpdate(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): TDocument;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MongoCursor<TResult>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.client.MongoCursor<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.MongoCursor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					close(): void;
					hasNext(): boolean;
					next(): TResult;
					tryNext(): TResult;
					getServerCursor(): com.mongodb.ServerCursor;
					getServerAddress(): com.mongodb.ServerAddress;
				});
				public constructor();
				public next(): TResult;
				public close(): void;
				public getServerCursor(): com.mongodb.ServerCursor;
				public hasNext(): boolean;
				public getServerAddress(): com.mongodb.ServerAddress;
				public tryNext(): TResult;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MongoDatabase {
				public static class: java.lang.Class<com.mongodb.client.MongoDatabase>;
				/**
				 * Constructs a new instance of the com.mongodb.client.MongoDatabase interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getName(): string;
					getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
					getReadPreference(): com.mongodb.ReadPreference;
					getWriteConcern(): com.mongodb.WriteConcern;
					getReadConcern(): com.mongodb.ReadConcern;
					withCodecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.client.MongoDatabase;
					withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.MongoDatabase;
					withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.MongoDatabase;
					withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.MongoDatabase;
					getCollection(param0: string): com.mongodb.client.MongoCollection<org.bson.Document>;
					getCollection(param0: string, param1: java.lang.Class): com.mongodb.client.MongoCollection<any>;
					runCommand(param0: org.bson.conversions.Bson): org.bson.Document;
					runCommand(param0: org.bson.conversions.Bson, param1: com.mongodb.ReadPreference): org.bson.Document;
					runCommand(param0: org.bson.conversions.Bson, param1: java.lang.Class): any;
					runCommand(param0: org.bson.conversions.Bson, param1: com.mongodb.ReadPreference, param2: java.lang.Class): any;
					runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): org.bson.Document;
					runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.ReadPreference): org.bson.Document;
					runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: java.lang.Class): any;
					runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.ReadPreference, param3: java.lang.Class): any;
					drop(): void;
					drop(param0: com.mongodb.client.ClientSession): void;
					listCollectionNames(): com.mongodb.client.MongoIterable<string>;
					listCollections(): com.mongodb.client.ListCollectionsIterable<org.bson.Document>;
					listCollections(param0: java.lang.Class): com.mongodb.client.ListCollectionsIterable<any>;
					listCollectionNames(param0: com.mongodb.client.ClientSession): com.mongodb.client.MongoIterable<string>;
					listCollections(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListCollectionsIterable<org.bson.Document>;
					listCollections(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListCollectionsIterable<any>;
					createCollection(param0: string): void;
					createCollection(param0: string, param1: com.mongodb.client.model.CreateCollectionOptions): void;
					createCollection(param0: com.mongodb.client.ClientSession, param1: string): void;
					createCollection(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.model.CreateCollectionOptions): void;
					createView(param0: string, param1: string, param2: java.util.List<any>): void;
					createView(param0: string, param1: string, param2: java.util.List<any>, param3: com.mongodb.client.model.CreateViewOptions): void;
					createView(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.util.List<any>): void;
					createView(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.util.List<any>, param4: com.mongodb.client.model.CreateViewOptions): void;
					watch(): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					aggregate(param0: java.util.List<any>): com.mongodb.client.AggregateIterable<org.bson.Document>;
					aggregate(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
					aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.AggregateIterable<org.bson.Document>;
					aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
				});
				public constructor();
				public getCollection(param0: string, param1: java.lang.Class): com.mongodb.client.MongoCollection<any>;
				public listCollections(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListCollectionsIterable<org.bson.Document>;
				public drop(param0: com.mongodb.client.ClientSession): void;
				public listCollections(): com.mongodb.client.ListCollectionsIterable<org.bson.Document>;
				public listCollectionNames(param0: com.mongodb.client.ClientSession): com.mongodb.client.MongoIterable<string>;
				public watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.MongoDatabase;
				public getReadConcern(): com.mongodb.ReadConcern;
				public withCodecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.client.MongoDatabase;
				public runCommand(param0: org.bson.conversions.Bson, param1: com.mongodb.ReadPreference): org.bson.Document;
				public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): org.bson.Document;
				public runCommand(param0: org.bson.conversions.Bson): org.bson.Document;
				public createView(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.util.List<any>): void;
				public createCollection(param0: com.mongodb.client.ClientSession, param1: string): void;
				public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.ReadPreference, param3: java.lang.Class): any;
				public getReadPreference(): com.mongodb.ReadPreference;
				public withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.MongoDatabase;
				public withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.MongoDatabase;
				public listCollectionNames(): com.mongodb.client.MongoIterable<string>;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
				public createCollection(param0: string): void;
				public drop(): void;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.AggregateIterable<org.bson.Document>;
				public createCollection(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.model.CreateCollectionOptions): void;
				public watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public runCommand(param0: org.bson.conversions.Bson, param1: java.lang.Class): any;
				public createView(param0: string, param1: string, param2: java.util.List<any>, param3: com.mongodb.client.model.CreateViewOptions): void;
				public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
				public getName(): string;
				public listCollections(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListCollectionsIterable<any>;
				public watch(): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
				public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: java.lang.Class): any;
				public createView(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.util.List<any>, param4: com.mongodb.client.model.CreateViewOptions): void;
				public aggregate(param0: java.util.List<any>): com.mongodb.client.AggregateIterable<org.bson.Document>;
				public createCollection(param0: string, param1: com.mongodb.client.model.CreateCollectionOptions): void;
				public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.ReadPreference): org.bson.Document;
				public getCollection(param0: string): com.mongodb.client.MongoCollection<org.bson.Document>;
				public listCollections(param0: java.lang.Class): com.mongodb.client.ListCollectionsIterable<any>;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public createView(param0: string, param1: string, param2: java.util.List<any>): void;
				public aggregate(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
				public runCommand(param0: org.bson.conversions.Bson, param1: com.mongodb.ReadPreference, param2: java.lang.Class): any;
				public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export class MongoIterable<TResult>  extends java.lang.Iterable<any> {
				public static class: java.lang.Class<com.mongodb.client.MongoIterable<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.client.MongoIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					iterator(): com.mongodb.client.MongoCursor<any>;
					first(): any;
					map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					forEach(param0: com.mongodb.Block<any>): void;
					into(param0: java.util.Collection): java.util.Collection;
					batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				});
				public constructor();
				public iterator(): com.mongodb.client.MongoCursor<any>;
				public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				public first(): any;
				public into(param0: java.util.Collection): java.util.Collection;
				public forEach(param0: com.mongodb.Block<any>): void;
				public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export class GridFSBucket {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSBucket>;
					/**
					 * Constructs a new instance of the com.mongodb.client.gridfs.GridFSBucket interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getBucketName(): string;
						getChunkSizeBytes(): number;
						getWriteConcern(): com.mongodb.WriteConcern;
						getReadPreference(): com.mongodb.ReadPreference;
						getReadConcern(): com.mongodb.ReadConcern;
						getDisableMD5(): boolean;
						withChunkSizeBytes(param0: number): com.mongodb.client.gridfs.GridFSBucket;
						withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.gridfs.GridFSBucket;
						withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.gridfs.GridFSBucket;
						withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.gridfs.GridFSBucket;
						withDisableMD5(param0: boolean): com.mongodb.client.gridfs.GridFSBucket;
						openUploadStream(param0: string): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: string, param1: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: org.bson.BsonValue, param1: string): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: org.bson.BsonValue, param1: string, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: com.mongodb.client.ClientSession, param1: string): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: string): com.mongodb.client.gridfs.GridFSUploadStream;
						openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
						uploadFromStream(param0: string, param1: java.io.InputStream): org.bson.types.ObjectId;
						uploadFromStream(param0: string, param1: java.io.InputStream, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): org.bson.types.ObjectId;
						uploadFromStream(param0: org.bson.BsonValue, param1: string, param2: java.io.InputStream): void;
						uploadFromStream(param0: org.bson.BsonValue, param1: string, param2: java.io.InputStream, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): void;
						uploadFromStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.InputStream): org.bson.types.ObjectId;
						uploadFromStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.InputStream, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): org.bson.types.ObjectId;
						uploadFromStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: java.io.InputStream): void;
						uploadFromStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: java.io.InputStream, param4: com.mongodb.client.gridfs.model.GridFSUploadOptions): void;
						openDownloadStream(param0: org.bson.types.ObjectId): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStream(param0: org.bson.BsonValue): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStream(param0: string): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStream(param0: string, param1: com.mongodb.client.gridfs.model.GridFSDownloadOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStream(param0: com.mongodb.client.ClientSession, param1: string): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStream(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.gridfs.model.GridFSDownloadOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
						downloadToStream(param0: org.bson.types.ObjectId, param1: java.io.OutputStream): void;
						downloadToStream(param0: org.bson.BsonValue, param1: java.io.OutputStream): void;
						downloadToStream(param0: string, param1: java.io.OutputStream): void;
						downloadToStream(param0: string, param1: java.io.OutputStream, param2: com.mongodb.client.gridfs.model.GridFSDownloadOptions): void;
						downloadToStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: java.io.OutputStream): void;
						downloadToStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: java.io.OutputStream): void;
						downloadToStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.OutputStream): void;
						downloadToStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.OutputStream, param3: com.mongodb.client.gridfs.model.GridFSDownloadOptions): void;
						find(): com.mongodb.client.gridfs.GridFSFindIterable;
						find(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
						find(param0: com.mongodb.client.ClientSession): com.mongodb.client.gridfs.GridFSFindIterable;
						find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
						delete(param0: org.bson.types.ObjectId): void;
						delete(param0: org.bson.BsonValue): void;
						delete(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId): void;
						delete(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue): void;
						rename(param0: org.bson.types.ObjectId, param1: string): void;
						rename(param0: org.bson.BsonValue, param1: string): void;
						rename(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: string): void;
						rename(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string): void;
						drop(): void;
						drop(param0: com.mongodb.client.ClientSession): void;
						openDownloadStreamByName(param0: string): com.mongodb.client.gridfs.GridFSDownloadStream;
						openDownloadStreamByName(param0: string, param1: com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
						downloadToStreamByName(param0: string, param1: java.io.OutputStream): void;
						downloadToStreamByName(param0: string, param1: java.io.OutputStream, param2: com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions): void;
					});
					public constructor();
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public getBucketName(): string;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public delete(param0: org.bson.BsonValue): void;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: java.io.InputStream, param4: com.mongodb.client.gridfs.model.GridFSUploadOptions): void;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: java.io.OutputStream): void;
					public rename(param0: org.bson.types.ObjectId, param1: string): void;
					public rename(param0: org.bson.BsonValue, param1: string): void;
					public getReadConcern(): com.mongodb.ReadConcern;
					public drop(): void;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: java.io.OutputStream): void;
					public downloadToStream(param0: org.bson.BsonValue, param1: java.io.OutputStream): void;
					public downloadToStream(param0: string, param1: java.io.OutputStream): void;
					public rename(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: string): void;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.InputStream, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): org.bson.types.ObjectId;
					public getDisableMD5(): boolean;
					public withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.gridfs.GridFSBucket;
					public withDisableMD5(param0: boolean): com.mongodb.client.gridfs.GridFSBucket;
					public downloadToStream(param0: string, param1: java.io.OutputStream, param2: com.mongodb.client.gridfs.model.GridFSDownloadOptions): void;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public uploadFromStream(param0: string, param1: java.io.InputStream, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): org.bson.types.ObjectId;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue): com.mongodb.client.gridfs.GridFSDownloadStream;
					public withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.gridfs.GridFSBucket;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public openUploadStream(param0: org.bson.BsonValue, param1: string, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.InputStream): org.bson.types.ObjectId;
					public delete(param0: org.bson.types.ObjectId): void;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: string): com.mongodb.client.gridfs.GridFSDownloadStream;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.OutputStream, param3: com.mongodb.client.gridfs.model.GridFSDownloadOptions): void;
					public uploadFromStream(param0: org.bson.BsonValue, param1: string, param2: java.io.InputStream, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): void;
					public find(): com.mongodb.client.gridfs.GridFSFindIterable;
					public find(param0: com.mongodb.client.ClientSession): com.mongodb.client.gridfs.GridFSFindIterable;
					public downloadToStreamByName(param0: string, param1: java.io.OutputStream): void;
					public withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.gridfs.GridFSBucket;
					public openDownloadStream(param0: string): com.mongodb.client.gridfs.GridFSDownloadStream;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.OutputStream): void;
					public rename(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string): void;
					public find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public getChunkSizeBytes(): number;
					public find(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public downloadToStreamByName(param0: string, param1: java.io.OutputStream, param2: com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions): void;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: java.io.InputStream): void;
					public delete(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue): void;
					public drop(param0: com.mongodb.client.ClientSession): void;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public openUploadStream(param0: org.bson.BsonValue, param1: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public openDownloadStream(param0: string, param1: com.mongodb.client.gridfs.model.GridFSDownloadOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
					public getReadPreference(): com.mongodb.ReadPreference;
					public openDownloadStreamByName(param0: string, param1: com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openDownloadStream(param0: org.bson.BsonValue): com.mongodb.client.gridfs.GridFSDownloadStream;
					public uploadFromStream(param0: org.bson.BsonValue, param1: string, param2: java.io.InputStream): void;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openUploadStream(param0: string, param1: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public downloadToStream(param0: org.bson.types.ObjectId, param1: java.io.OutputStream): void;
					public openUploadStream(param0: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public uploadFromStream(param0: string, param1: java.io.InputStream): org.bson.types.ObjectId;
					public openDownloadStream(param0: org.bson.types.ObjectId): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openDownloadStreamByName(param0: string): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.gridfs.model.GridFSDownloadOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
					public withChunkSizeBytes(param0: number): com.mongodb.client.gridfs.GridFSBucket;
					public getWriteConcern(): com.mongodb.WriteConcern;
					public delete(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export class GridFSBucketImpl extends com.mongodb.client.gridfs.GridFSBucket {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSBucketImpl>;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public getBucketName(): string;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public delete(param0: org.bson.BsonValue): void;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: java.io.InputStream, param4: com.mongodb.client.gridfs.model.GridFSUploadOptions): void;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: java.io.OutputStream): void;
					public rename(param0: org.bson.types.ObjectId, param1: string): void;
					public rename(param0: org.bson.BsonValue, param1: string): void;
					public getReadConcern(): com.mongodb.ReadConcern;
					public drop(): void;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: java.io.OutputStream): void;
					public downloadToStream(param0: org.bson.BsonValue, param1: java.io.OutputStream): void;
					public downloadToStream(param0: string, param1: java.io.OutputStream): void;
					public rename(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: string): void;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.InputStream, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): org.bson.types.ObjectId;
					public getDisableMD5(): boolean;
					public withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.gridfs.GridFSBucket;
					public withDisableMD5(param0: boolean): com.mongodb.client.gridfs.GridFSBucket;
					public downloadToStream(param0: string, param1: java.io.OutputStream, param2: com.mongodb.client.gridfs.model.GridFSDownloadOptions): void;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public uploadFromStream(param0: string, param1: java.io.InputStream, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): org.bson.types.ObjectId;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue): com.mongodb.client.gridfs.GridFSDownloadStream;
					public withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.gridfs.GridFSBucket;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId, param2: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public openUploadStream(param0: org.bson.BsonValue, param1: string, param2: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.InputStream): org.bson.types.ObjectId;
					public delete(param0: org.bson.types.ObjectId): void;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: string): com.mongodb.client.gridfs.GridFSDownloadStream;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.OutputStream, param3: com.mongodb.client.gridfs.model.GridFSDownloadOptions): void;
					public uploadFromStream(param0: org.bson.BsonValue, param1: string, param2: java.io.InputStream, param3: com.mongodb.client.gridfs.model.GridFSUploadOptions): void;
					public find(): com.mongodb.client.gridfs.GridFSFindIterable;
					public find(param0: com.mongodb.client.ClientSession): com.mongodb.client.gridfs.GridFSFindIterable;
					public downloadToStreamByName(param0: string, param1: java.io.OutputStream): void;
					public withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.gridfs.GridFSBucket;
					public openDownloadStream(param0: string): com.mongodb.client.gridfs.GridFSDownloadStream;
					public downloadToStream(param0: com.mongodb.client.ClientSession, param1: string, param2: java.io.OutputStream): void;
					public rename(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string): void;
					public find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public getChunkSizeBytes(): number;
					public find(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public downloadToStreamByName(param0: string, param1: java.io.OutputStream, param2: com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions): void;
					public uploadFromStream(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue, param2: string, param3: java.io.InputStream): void;
					public delete(param0: com.mongodb.client.ClientSession, param1: org.bson.BsonValue): void;
					public drop(param0: com.mongodb.client.ClientSession): void;
					public openUploadStream(param0: com.mongodb.client.ClientSession, param1: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public openUploadStream(param0: org.bson.BsonValue, param1: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public openDownloadStream(param0: string, param1: com.mongodb.client.gridfs.model.GridFSDownloadOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
					public getReadPreference(): com.mongodb.ReadPreference;
					public openDownloadStreamByName(param0: string, param1: com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openDownloadStream(param0: org.bson.BsonValue): com.mongodb.client.gridfs.GridFSDownloadStream;
					public uploadFromStream(param0: org.bson.BsonValue, param1: string, param2: java.io.InputStream): void;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openUploadStream(param0: string, param1: com.mongodb.client.gridfs.model.GridFSUploadOptions): com.mongodb.client.gridfs.GridFSUploadStream;
					public downloadToStream(param0: org.bson.types.ObjectId, param1: java.io.OutputStream): void;
					public openUploadStream(param0: string): com.mongodb.client.gridfs.GridFSUploadStream;
					public uploadFromStream(param0: string, param1: java.io.InputStream): org.bson.types.ObjectId;
					public openDownloadStream(param0: org.bson.types.ObjectId): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openDownloadStreamByName(param0: string): com.mongodb.client.gridfs.GridFSDownloadStream;
					public openDownloadStream(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.gridfs.model.GridFSDownloadOptions): com.mongodb.client.gridfs.GridFSDownloadStream;
					public withChunkSizeBytes(param0: number): com.mongodb.client.gridfs.GridFSBucket;
					public getWriteConcern(): com.mongodb.WriteConcern;
					public delete(param0: com.mongodb.client.ClientSession, param1: org.bson.types.ObjectId): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export class GridFSBuckets {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSBuckets>;
					public static create(param0: com.mongodb.client.MongoDatabase): com.mongodb.client.gridfs.GridFSBucket;
					public static create(param0: com.mongodb.client.MongoDatabase, param1: string): com.mongodb.client.gridfs.GridFSBucket;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export abstract class GridFSDownloadStream {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSDownloadStream>;
					public available(): number;
					public mark(): void;
					public read(): number;
					public read(param0: native.Array<number>, param1: number, param2: number): number;
					public reset(): void;
					public constructor();
					public read(param0: native.Array<number>): number;
					public getGridFSFile(): com.mongodb.client.gridfs.model.GridFSFile;
					public skip(param0: number): number;
					public close(): void;
					public batchSize(param0: number): com.mongodb.client.gridfs.GridFSDownloadStream;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export class GridFSDownloadStreamImpl extends com.mongodb.client.gridfs.GridFSDownloadStream {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSDownloadStreamImpl>;
					public available(): number;
					public mark(): void;
					public read(): number;
					public read(param0: native.Array<number>, param1: number, param2: number): number;
					public reset(): void;
					public read(param0: native.Array<number>): number;
					public markSupported(): boolean;
					public getGridFSFile(): com.mongodb.client.gridfs.model.GridFSFile;
					public skip(param0: number): number;
					public close(): void;
					public batchSize(param0: number): com.mongodb.client.gridfs.GridFSDownloadStream;
					public mark(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export class GridFSFindIterable extends com.mongodb.client.MongoIterable<com.mongodb.client.gridfs.model.GridFSFile> {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSFindIterable>;
					/**
					 * Constructs a new instance of the com.mongodb.client.gridfs.GridFSFindIterable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						filter(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
						limit(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
						skip(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
						sort(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
						noCursorTimeout(param0: boolean): com.mongodb.client.gridfs.GridFSFindIterable;
						maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.gridfs.GridFSFindIterable;
						batchSize(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
						collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.gridfs.GridFSFindIterable;
						iterator(): com.mongodb.client.MongoCursor<any>;
						first(): any;
						map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
						forEach(param0: com.mongodb.Block<any>): void;
						into(param0: java.util.Collection): java.util.Collection;
						batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					});
					public constructor();
					public noCursorTimeout(param0: boolean): com.mongodb.client.gridfs.GridFSFindIterable;
					public limit(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public skip(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public batchSize(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.gridfs.GridFSFindIterable;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.gridfs.GridFSFindIterable;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export class GridFSFindIterableImpl extends com.mongodb.client.gridfs.GridFSFindIterable {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSFindIterableImpl>;
					public noCursorTimeout(param0: boolean): com.mongodb.client.gridfs.GridFSFindIterable;
					public limit(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public skip(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
					public batchSize(param0: number): com.mongodb.client.gridfs.GridFSFindIterable;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.gridfs.GridFSFindIterable;
					public first(): com.mongodb.client.gridfs.model.GridFSFile;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.gridfs.GridFSFindIterable;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.gridfs.GridFSFindIterable;
					public iterator(): com.mongodb.client.MongoCursor<com.mongodb.client.gridfs.model.GridFSFile>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export abstract class GridFSUploadStream {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSUploadStream>;
					public write(param0: native.Array<number>, param1: number, param2: number): void;
					public write(param0: native.Array<number>): void;
					public constructor();
					public close(): void;
					public getFileId(): org.bson.types.ObjectId;
					public getObjectId(): org.bson.types.ObjectId;
					public write(param0: number): void;
					public flush(): void;
					public abort(): void;
					public getId(): org.bson.BsonValue;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export class GridFSUploadStreamImpl extends com.mongodb.client.gridfs.GridFSUploadStream {
					public static class: java.lang.Class<com.mongodb.client.gridfs.GridFSUploadStreamImpl>;
					public write(param0: native.Array<number>, param1: number, param2: number): void;
					public write(param0: native.Array<number>): void;
					public close(): void;
					public getFileId(): org.bson.types.ObjectId;
					public getObjectId(): org.bson.types.ObjectId;
					public write(param0: number): void;
					public abort(): void;
					public getId(): org.bson.BsonValue;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export module codecs {
					export class GridFSFileCodec extends org.bson.codecs.Codec<com.mongodb.client.gridfs.model.GridFSFile> {
						public static class: java.lang.Class<com.mongodb.client.gridfs.codecs.GridFSFileCodec>;
						public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						public encode(param0: org.bson.BsonWriter, param1: com.mongodb.client.gridfs.model.GridFSFile, param2: org.bson.codecs.EncoderContext): void;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.client.gridfs.model.GridFSFile;
						public getEncoderClass(): java.lang.Class<com.mongodb.client.gridfs.model.GridFSFile>;
						public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
						public getEncoderClass(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export module codecs {
					export class GridFSFileCodecProvider extends org.bson.codecs.configuration.CodecProvider {
						public static class: java.lang.Class<com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider>;
						public constructor();
						public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
					}
				}
			}
		}
	}
}


declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export module model {
					export class GridFSDownloadByNameOptions {
						public static class: java.lang.Class<com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions>;
						public constructor();
						public revision(param0: number): com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions;
						public getRevision(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export module model {
					export class GridFSDownloadOptions {
						public static class: java.lang.Class<com.mongodb.client.gridfs.model.GridFSDownloadOptions>;
						public constructor();
						public revision(param0: number): com.mongodb.client.gridfs.model.GridFSDownloadOptions;
						public getRevision(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export module model {
					export class GridFSFile {
						public static class: java.lang.Class<com.mongodb.client.gridfs.model.GridFSFile>;
						public getId(): org.bson.BsonValue;
						public getAliases(): java.util.List<string>;
						public constructor(param0: org.bson.BsonValue, param1: string, param2: number, param3: number, param4: java.util.Date, param5: string, param6: org.bson.Document, param7: org.bson.Document);
						public getChunkSize(): number;
						public getUploadDate(): java.util.Date;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getLength(): number;
						public getObjectId(): org.bson.types.ObjectId;
						public getMetadata(): org.bson.Document;
						public toString(): string;
						public constructor(param0: org.bson.BsonValue, param1: string, param2: number, param3: number, param4: java.util.Date, param5: string, param6: org.bson.Document);
						public getExtraElements(): org.bson.Document;
						public getMD5(): string;
						public getContentType(): string;
						public getFilename(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module gridfs {
				export module model {
					export class GridFSUploadOptions {
						public static class: java.lang.Class<com.mongodb.client.gridfs.model.GridFSUploadOptions>;
						public chunkSizeBytes(param0: java.lang.Integer): com.mongodb.client.gridfs.model.GridFSUploadOptions;
						public constructor();
						public getChunkSizeBytes(): java.lang.Integer;
						public getMetadata(): org.bson.Document;
						public metadata(param0: org.bson.Document): com.mongodb.client.gridfs.model.GridFSUploadOptions;
					}
				}
			}
		}
	}
}



declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class AggregateIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.MongoIterableImpl<any> implements com.mongodb.client.AggregateIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.AggregateIterableImpl<any,any>>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.AggregateIterable<any>;
					public toCollection(): void;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					public allowDiskUse(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					public hint(param0: org.bson.conversions.Bson): com.mongodb.client.AggregateIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
					public first(): any;
					public comment(param0: string): com.mongodb.client.AggregateIterable<any>;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public batchSize(param0: number): com.mongodb.client.AggregateIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public useCursor(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class ChangeStreamIterableImpl<TResult>  extends com.mongodb.client.internal.MongoIterableImpl<com.mongodb.client.model.changestream.ChangeStreamDocument<any>> implements com.mongodb.client.ChangeStreamIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.ChangeStreamIterableImpl<any>>;
					public resumeAfter(param0: org.bson.BsonDocument): com.mongodb.client.ChangeStreamIterable<any>;
					public withDocumentClass(param0: java.lang.Class): com.mongodb.client.MongoIterable<any>;
					public fullDocument(param0: com.mongodb.client.model.changestream.FullDocument): com.mongodb.client.ChangeStreamIterable<any>;
					public batchSize(param0: number): com.mongodb.client.ChangeStreamIterable<any>;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ChangeStreamIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public first(): any;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.client.model.changestream.ChangeStreamDocument<any>>>;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.ChangeStreamIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public startAtOperationTime(param0: org.bson.BsonTimestamp): com.mongodb.client.ChangeStreamIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class ClientSessionBinding extends com.mongodb.binding.ReadWriteBinding {
					public static class: java.lang.Class<com.mongodb.client.internal.ClientSessionBinding>;
					public retain(): com.mongodb.binding.WriteBinding;
					public getReadConnectionSource(): com.mongodb.binding.ConnectionSource;
					public getCount(): number;
					public constructor(param0: com.mongodb.client.ClientSession, param1: boolean, param2: com.mongodb.binding.ReadWriteBinding);
					public retain(): com.mongodb.binding.ReadWriteBinding;
					public retain(): com.mongodb.binding.ReadBinding;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public getWriteConnectionSource(): com.mongodb.binding.ConnectionSource;
					public getSessionContext(): com.mongodb.session.SessionContext;
					public release(): void;
					public getReadPreference(): com.mongodb.ReadPreference;
				}
				export module ClientSessionBinding {
					export class SessionBindingConnectionSource extends com.mongodb.binding.ConnectionSource {
						public static class: java.lang.Class<com.mongodb.client.internal.ClientSessionBinding.SessionBindingConnectionSource>;
						public getSessionContext(): com.mongodb.session.SessionContext;
						public getConnection(): com.mongodb.connection.Connection;
						public getServerDescription(): com.mongodb.connection.ServerDescription;
						public getCount(): number;
						public release(): void;
						public retain(): com.mongodb.binding.ConnectionSource;
						public retain(): com.mongodb.binding.ReferenceCounted;
					}
					export class SyncClientSessionContext extends com.mongodb.internal.session.ClientSessionContext implements com.mongodb.session.SessionContext {
						public static class: java.lang.Class<com.mongodb.client.internal.ClientSessionBinding.SyncClientSessionContext>;
						public getOperationTime(): org.bson.BsonTimestamp;
						public notifyMessageSent(): boolean;
						public getReadConcern(): com.mongodb.ReadConcern;
						public hasSession(): boolean;
						public hasActiveTransaction(): boolean;
						public getSessionId(): org.bson.BsonDocument;
						public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
						public getTransactionNumber(): number;
						public advanceClusterTime(param0: org.bson.BsonDocument): void;
						public advanceTransactionNumber(): number;
						public isImplicitSession(): boolean;
						public getClusterTime(): org.bson.BsonDocument;
						public isCausallyConsistent(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class ClientSessionImpl extends com.mongodb.internal.session.BaseClientSessionImpl implements com.mongodb.client.ClientSession {
					public static class: java.lang.Class<com.mongodb.client.internal.ClientSessionImpl>;
					public isCausallyConsistent(): boolean;
					public advanceClusterTime(param0: org.bson.BsonDocument): void;
					public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					public getClusterTime(): org.bson.BsonDocument;
					public startTransaction(param0: com.mongodb.TransactionOptions): void;
					public notifyMessageSent(): boolean;
					public getOriginator(): any;
					public commitTransaction(): void;
					public getOptions(): com.mongodb.ClientSessionOptions;
					public startTransaction(): void;
					public getOperationTime(): org.bson.BsonTimestamp;
					public close(): void;
					public abortTransaction(): void;
					public hasActiveTransaction(): boolean;
					public getTransactionOptions(): com.mongodb.TransactionOptions;
					public getServerSession(): com.mongodb.session.ServerSession;
				}
				export module ClientSessionImpl {
					export class TransactionState {
						public static class: java.lang.Class<com.mongodb.client.internal.ClientSessionImpl.TransactionState>;
						public static NONE: com.mongodb.client.internal.ClientSessionImpl.TransactionState;
						public static IN: com.mongodb.client.internal.ClientSessionImpl.TransactionState;
						public static COMMITTED: com.mongodb.client.internal.ClientSessionImpl.TransactionState;
						public static ABORTED: com.mongodb.client.internal.ClientSessionImpl.TransactionState;
						public static valueOf(param0: string): com.mongodb.client.internal.ClientSessionImpl.TransactionState;
						public static values(): native.Array<com.mongodb.client.internal.ClientSessionImpl.TransactionState>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class DistinctIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.MongoIterableImpl<any> implements com.mongodb.client.DistinctIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.DistinctIterableImpl<any,any>>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.DistinctIterable<any>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public batchSize(param0: number): com.mongodb.client.DistinctIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.DistinctIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class FallbackMongoIterableFactory extends com.mongodb.client.internal.MongoIterableFactory {
					public static class: java.lang.Class<com.mongodb.client.internal.FallbackMongoIterableFactory>;
					public mapReduceOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: string, param10: string): com.mongodb.client.MapReduceIterable<any>;
					public aggregateOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public changeStreamOf(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public findOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public listCollectionsOf(param0: com.mongodb.client.ClientSession, param1: string, param2: boolean, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListCollectionsIterable<any>;
					public listIndexesOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: org.bson.codecs.configuration.CodecRegistry, param4: com.mongodb.ReadPreference, param5: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListIndexesIterable<any>;
					public aggregateOf(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public changeStreamOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public listDatabasesOf(param0: com.mongodb.client.ClientSession, param1: java.lang.Class, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListDatabasesIterable<any>;
					public distinctOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: string, param9: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class FindIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.MongoIterableImpl<any> implements com.mongodb.client.FindIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.FindIterableImpl<any,any>>;
					public skip(param0: number): com.mongodb.client.FindIterable<any>;
					public returnKey(param0: boolean): com.mongodb.client.FindIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public projection(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public max(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public noCursorTimeout(param0: boolean): com.mongodb.client.FindIterable<any>;
					public snapshot(param0: boolean): com.mongodb.client.FindIterable<any>;
					public modifiers(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public into(param0: java.util.Collection): java.util.Collection;
					public cursorType(param0: com.mongodb.CursorType): com.mongodb.client.FindIterable<any>;
					public oplogReplay(param0: boolean): com.mongodb.client.FindIterable<any>;
					public showRecordId(param0: boolean): com.mongodb.client.FindIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.FindIterable<any>;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public comment(param0: string): com.mongodb.client.FindIterable<any>;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public partial(param0: boolean): com.mongodb.client.FindIterable<any>;
					public maxScan(param0: number): com.mongodb.client.FindIterable<any>;
					public limit(param0: number): com.mongodb.client.FindIterable<any>;
					public batchSize(param0: number): com.mongodb.client.FindIterable<any>;
					public first(): any;
					public min(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public forEach(param0: com.mongodb.Block<any>): void;
					public hint(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8AggregateIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.AggregateIterableImpl<any,any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8AggregateIterableImpl<any,any>>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.AggregateIterable<any>;
					public toCollection(): void;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					public allowDiskUse(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					public hint(param0: org.bson.conversions.Bson): com.mongodb.client.AggregateIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
					public first(): any;
					public comment(param0: string): com.mongodb.client.AggregateIterable<any>;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public batchSize(param0: number): com.mongodb.client.AggregateIterable<any>;
					public forEach(param0: any /* any*/): void;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public useCursor(param0: java.lang.Boolean): com.mongodb.client.AggregateIterable<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.AggregateIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8ChangeStreamIterableImpl<TResult>  extends com.mongodb.client.internal.ChangeStreamIterableImpl<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8ChangeStreamIterableImpl<any>>;
					public resumeAfter(param0: org.bson.BsonDocument): com.mongodb.client.ChangeStreamIterable<any>;
					public withDocumentClass(param0: java.lang.Class): com.mongodb.client.MongoIterable<any>;
					public batchSize(param0: number): com.mongodb.client.ChangeStreamIterable<any>;
					public fullDocument(param0: com.mongodb.client.model.changestream.FullDocument): com.mongodb.client.ChangeStreamIterable<any>;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ChangeStreamIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.ChangeStreamIterable<any>;
					public forEach(param0: any /* any*/): void;
					public startAtOperationTime(param0: org.bson.BsonTimestamp): com.mongodb.client.ChangeStreamIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8DistinctIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.DistinctIterableImpl<any,any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8DistinctIterableImpl<any,any>>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.DistinctIterable<any>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public forEach(param0: any /* any*/): void;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public batchSize(param0: number): com.mongodb.client.DistinctIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.DistinctIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8FindIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.FindIterableImpl<any,any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8FindIterableImpl<any,any>>;
					public skip(param0: number): com.mongodb.client.FindIterable<any>;
					public returnKey(param0: boolean): com.mongodb.client.FindIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public projection(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public max(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public noCursorTimeout(param0: boolean): com.mongodb.client.FindIterable<any>;
					public snapshot(param0: boolean): com.mongodb.client.FindIterable<any>;
					public modifiers(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public into(param0: java.util.Collection): java.util.Collection;
					public cursorType(param0: com.mongodb.CursorType): com.mongodb.client.FindIterable<any>;
					public oplogReplay(param0: boolean): com.mongodb.client.FindIterable<any>;
					public showRecordId(param0: boolean): com.mongodb.client.FindIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.FindIterable<any>;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public comment(param0: string): com.mongodb.client.FindIterable<any>;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public partial(param0: boolean): com.mongodb.client.FindIterable<any>;
					public maxScan(param0: number): com.mongodb.client.FindIterable<any>;
					public limit(param0: number): com.mongodb.client.FindIterable<any>;
					public batchSize(param0: number): com.mongodb.client.FindIterable<any>;
					public first(): any;
					public forEach(param0: com.mongodb.Block<any>): void;
					public min(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public hint(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.FindIterable<any>;
					public forEach(param0: any /* any*/): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8ForEachHelper {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8ForEachHelper>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8ListCollectionsIterableImpl<TResult>  extends com.mongodb.client.internal.ListCollectionsIterableImpl<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8ListCollectionsIterableImpl<any>>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public batchSize(param0: number): com.mongodb.client.ListCollectionsIterable<any>;
					public forEach(param0: com.mongodb.Block<any>): void;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListCollectionsIterable<any>;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListCollectionsIterable<any>;
					public forEach(param0: any /* any*/): void;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8ListDatabasesIterableImpl<TResult>  extends com.mongodb.client.internal.ListDatabasesIterableImpl<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8ListDatabasesIterableImpl<any>>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListDatabasesIterable<any>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.internal.ListDatabasesIterableImpl<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListDatabasesIterable<any>;
					public nameOnly(param0: java.lang.Boolean): com.mongodb.client.ListDatabasesIterable<any>;
					public forEach(param0: any /* any*/): void;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public batchSize(param0: number): com.mongodb.client.ListDatabasesIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8ListIndexesIterableImpl<TResult>  extends com.mongodb.client.internal.ListIndexesIterableImpl<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8ListIndexesIterableImpl<any>>;
					public first(): any;
					public batchSize(param0: number): com.mongodb.client.ListIndexesIterable<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListIndexesIterable<any>;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public forEach(param0: any /* any*/): void;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8MapReduceIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.MapReduceIterableImpl<any,any> {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8MapReduceIterableImpl<any,any>>;
					public finalizeFunction(param0: string): com.mongodb.client.MapReduceIterable<any>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					public jsMode(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public toCollection(): void;
					public scope(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					public verbose(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					public databaseName(param0: string): com.mongodb.client.MapReduceIterable<any>;
					public collectionName(param0: string): com.mongodb.client.MapReduceIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.MapReduceIterable<any>;
					public nonAtomic(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.MapReduceIterable<any>;
					public action(param0: com.mongodb.client.model.MapReduceAction): com.mongodb.client.MapReduceIterable<any>;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public limit(param0: number): com.mongodb.client.MapReduceIterable<any>;
					public sharded(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MapReduceIterable<any>;
					public forEach(param0: any /* any*/): void;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.MapReduceIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class Java8MongoIterableFactory extends com.mongodb.client.internal.MongoIterableFactory {
					public static class: java.lang.Class<com.mongodb.client.internal.Java8MongoIterableFactory>;
					public mapReduceOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: string, param10: string): com.mongodb.client.MapReduceIterable<any>;
					public aggregateOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public changeStreamOf(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public findOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public listCollectionsOf(param0: com.mongodb.client.ClientSession, param1: string, param2: boolean, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListCollectionsIterable<any>;
					public listIndexesOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: org.bson.codecs.configuration.CodecRegistry, param4: com.mongodb.ReadPreference, param5: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListIndexesIterable<any>;
					public aggregateOf(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public changeStreamOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public listDatabasesOf(param0: com.mongodb.client.ClientSession, param1: java.lang.Class, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListDatabasesIterable<any>;
					public distinctOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: string, param9: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class ListCollectionsIterableImpl<TResult>  extends com.mongodb.client.internal.MongoIterableImpl<any> implements com.mongodb.client.ListCollectionsIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.ListCollectionsIterableImpl<any>>;
					public first(): any;
					public batchSize(param0: number): com.mongodb.client.ListCollectionsIterable<any>;
					public into(param0: java.util.Collection): java.util.Collection;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListCollectionsIterable<any>;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListCollectionsIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class ListDatabasesIterableImpl<TResult>  extends com.mongodb.client.internal.MongoIterableImpl<any> implements com.mongodb.client.ListDatabasesIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.ListDatabasesIterableImpl<any>>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.ListDatabasesIterable<any>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.internal.ListDatabasesIterableImpl<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListDatabasesIterable<any>;
					public nameOnly(param0: java.lang.Boolean): com.mongodb.client.ListDatabasesIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public batchSize(param0: number): com.mongodb.client.ListDatabasesIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class ListIndexesIterableImpl<TResult>  extends com.mongodb.client.internal.MongoIterableImpl<any> implements com.mongodb.client.ListIndexesIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.ListIndexesIterableImpl<any>>;
					public first(): any;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.ListIndexesIterable<any>;
					public batchSize(param0: number): com.mongodb.client.ListIndexesIterable<any>;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MapReduceIterableImpl<TDocument, TResult>  extends com.mongodb.client.internal.MongoIterableImpl<any> implements com.mongodb.client.MapReduceIterable<any>  {
					public static class: java.lang.Class<com.mongodb.client.internal.MapReduceIterableImpl<any,any>>;
					public finalizeFunction(param0: string): com.mongodb.client.MapReduceIterable<any>;
					public filter(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					public jsMode(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public toCollection(): void;
					public scope(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					public verbose(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.MapReduceIterable<any>;
					public databaseName(param0: string): com.mongodb.client.MapReduceIterable<any>;
					public collectionName(param0: string): com.mongodb.client.MapReduceIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.MapReduceIterable<any>;
					public nonAtomic(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.MapReduceIterable<any>;
					public action(param0: com.mongodb.client.model.MapReduceAction): com.mongodb.client.MapReduceIterable<any>;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public limit(param0: number): com.mongodb.client.MapReduceIterable<any>;
					public sharded(param0: boolean): com.mongodb.client.MapReduceIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MapReduceIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.MapReduceIterable<any>;
				}
				export module MapReduceIterableImpl {
					export class WrappedMapReduceReadOperation<TResult>  extends com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>> {
						public static class: java.lang.Class<com.mongodb.client.internal.MapReduceIterableImpl.WrappedMapReduceReadOperation<any>>;
						public execute(param0: com.mongodb.binding.ReadBinding): any;
						public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MappingIterable<U, V>  extends com.mongodb.client.MongoIterable<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.MappingIterable<any,any>>;
					public first(): any;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
					public batchSize(param0: number): com.mongodb.client.internal.MappingIterable<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoBatchCursorAdapter<T>  extends com.mongodb.client.MongoCursor<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoBatchCursorAdapter<any>>;
					public next(): any;
					public getServerCursor(): com.mongodb.ServerCursor;
					public constructor(param0: com.mongodb.operation.BatchCursor<any>);
					public close(): void;
					public tryNext(): any;
					public getServerAddress(): com.mongodb.ServerAddress;
					public remove(): void;
					public hasNext(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoClientDelegate {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoClientDelegate>;
					public getOperationExecutor(): com.mongodb.client.internal.OperationExecutor;
					public constructor(param0: com.mongodb.connection.Cluster, param1: java.util.List<com.mongodb.MongoCredential>, param2: any);
					public getCluster(): com.mongodb.connection.Cluster;
					public getServerAddressList(): java.util.List<com.mongodb.ServerAddress>;
					public close(): void;
					public constructor(param0: com.mongodb.connection.Cluster, param1: java.util.List<com.mongodb.MongoCredential>, param2: any, param3: com.mongodb.client.internal.OperationExecutor);
					public createClientSession(param0: com.mongodb.ClientSessionOptions, param1: com.mongodb.ReadConcern, param2: com.mongodb.WriteConcern, param3: com.mongodb.ReadPreference): com.mongodb.client.ClientSession;
					public getServerSessionPool(): com.mongodb.internal.session.ServerSessionPool;
				}
				export module MongoClientDelegate {
					export class DelegateOperationExecutor extends com.mongodb.client.internal.OperationExecutor {
						public static class: java.lang.Class<com.mongodb.client.internal.MongoClientDelegate.DelegateOperationExecutor>;
						public execute(param0: com.mongodb.operation.WriteOperation<any>, param1: com.mongodb.ReadConcern): any;
						public execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern): any;
						public execute(param0: com.mongodb.operation.WriteOperation<any>, param1: com.mongodb.ReadConcern, param2: com.mongodb.client.ClientSession): any;
						public execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern, param3: com.mongodb.client.ClientSession): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoClientImpl extends com.mongodb.client.MongoClient {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoClientImpl>;
					public startSession(param0: com.mongodb.ClientSessionOptions): com.mongodb.client.ClientSession;
					public watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public getCluster(): com.mongodb.connection.Cluster;
					public watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public listDatabases(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
					public getDatabase(param0: string): com.mongodb.client.MongoDatabase;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public listDatabases(): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
					public watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public listDatabaseNames(param0: com.mongodb.client.ClientSession): com.mongodb.client.MongoIterable<string>;
					public listDatabases(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListDatabasesIterable<org.bson.Document>;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public constructor(param0: com.mongodb.MongoClientSettings, param1: com.mongodb.MongoDriverInformation);
					public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.MongoClientSettings, param2: com.mongodb.client.internal.OperationExecutor);
					public watch(): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public listDatabases(param0: java.lang.Class): com.mongodb.client.ListDatabasesIterable<any>;
					public startSession(): com.mongodb.client.ClientSession;
					public close(): void;
					public listDatabaseNames(): com.mongodb.client.MongoIterable<string>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoCollectionImpl<TDocument>  extends com.mongodb.client.MongoCollection<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoCollectionImpl<any>>;
					public watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					public deleteMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					public watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public insertOne(param0: com.mongodb.client.ClientSession, param1: any): void;
					public replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: any): com.mongodb.client.result.UpdateResult;
					public dropIndexes(param0: com.mongodb.client.model.DropIndexOptions): void;
					public bulkWrite(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>, param2: com.mongodb.client.model.BulkWriteOptions): com.mongodb.bulk.BulkWriteResult;
					public findOneAndUpdate(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): any;
					public createIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.IndexOptions): string;
					public getReadConcern(): com.mongodb.ReadConcern;
					public findOneAndReplace(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: any, param3: com.mongodb.client.model.FindOneAndReplaceOptions): any;
					public dropIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DropIndexOptions): void;
					public withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.MongoCollection<any>;
					public find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public createIndexes(param0: com.mongodb.client.ClientSession, param1: java.util.List<com.mongodb.client.model.IndexModel>): java.util.List<string>;
					public withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.MongoCollection<any>;
					public createIndex(param0: org.bson.conversions.Bson): string;
					public withCodecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.client.MongoCollection<any>;
					public findOneAndReplace(param0: org.bson.conversions.Bson, param1: any): any;
					public createIndexes(param0: com.mongodb.client.ClientSession, param1: java.util.List<com.mongodb.client.model.IndexModel>, param2: com.mongodb.client.model.CreateIndexOptions): java.util.List<string>;
					public find(param0: java.lang.Class): com.mongodb.client.FindIterable<any>;
					public insertMany(param0: java.util.List<any>): void;
					public aggregate(param0: java.util.List<any>): com.mongodb.client.AggregateIterable<any>;
					public mapReduce(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.lang.Class): com.mongodb.client.MapReduceIterable<any>;
					public replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: any, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					public createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>, param1: com.mongodb.client.model.CreateIndexOptions): java.util.List<string>;
					public renameCollection(param0: com.mongodb.MongoNamespace, param1: com.mongodb.client.model.RenameCollectionOptions): void;
					public deleteMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					public find(param0: com.mongodb.client.ClientSession): com.mongodb.client.FindIterable<any>;
					public distinct(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.conversions.Bson, param3: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					public estimatedDocumentCount(): number;
					public find(): com.mongodb.client.FindIterable<any>;
					public dropIndexes(param0: com.mongodb.client.ClientSession): void;
					public replaceOne(param0: org.bson.conversions.Bson, param1: any, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					public distinct(param0: string, param1: org.bson.conversions.Bson, param2: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					public getNamespace(): com.mongodb.MongoNamespace;
					public watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<any>;
					public findOneAndDelete(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndDeleteOptions): any;
					public watch(): com.mongodb.client.ChangeStreamIterable<any>;
					public deleteOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					public countDocuments(param0: org.bson.conversions.Bson): number;
					public createIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): string;
					public findOneAndReplace(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: any): any;
					public findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): any;
					public dropIndexes(): void;
					public listIndexes(): com.mongodb.client.ListIndexesIterable<org.bson.Document>;
					public find(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.FindIterable<any>;
					public count(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.CountOptions): number;
					public dropIndex(param0: string): void;
					public dropIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.DropIndexOptions): void;
					public getReadPreference(): com.mongodb.ReadPreference;
					public createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>): java.util.List<string>;
					public renameCollection(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: com.mongodb.client.model.RenameCollectionOptions): void;
					public mapReduce(param0: com.mongodb.client.ClientSession, param1: string, param2: string): com.mongodb.client.MapReduceIterable<any>;
					public renameCollection(param0: com.mongodb.MongoNamespace): void;
					public insertMany(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): void;
					public mapReduce(param0: string, param1: string, param2: java.lang.Class): com.mongodb.client.MapReduceIterable<any>;
					public dropIndex(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.model.DropIndexOptions): void;
					public deleteMany(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					public bulkWrite(param0: java.util.List<any>): com.mongodb.bulk.BulkWriteResult;
					public renameCollection(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace): void;
					public count(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions): number;
					public insertMany(param0: java.util.List<any>, param1: com.mongodb.client.model.InsertManyOptions): void;
					public countDocuments(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions): number;
					public find(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: java.lang.Class): com.mongodb.client.FindIterable<any>;
					public withDocumentClass(param0: java.lang.Class): com.mongodb.client.MongoCollection<any>;
					public getWriteConcern(): com.mongodb.WriteConcern;
					public listIndexes(param0: java.lang.Class): com.mongodb.client.ListIndexesIterable<any>;
					public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.AggregateIterable<any>;
					public dropIndexes(param0: com.mongodb.client.ClientSession, param1: com.mongodb.client.model.DropIndexOptions): void;
					public watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<any>;
					public replaceOne(param0: org.bson.conversions.Bson, param1: any, param2: com.mongodb.client.model.ReplaceOptions): com.mongodb.client.result.UpdateResult;
					public estimatedDocumentCount(param0: com.mongodb.client.model.EstimatedDocumentCountOptions): number;
					public drop(): void;
					public updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					public insertOne(param0: any, param1: com.mongodb.client.model.InsertOneOptions): void;
					public createIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.IndexOptions): string;
					public dropIndex(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): void;
					public countDocuments(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.CountOptions): number;
					public updateOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					public findOneAndUpdate(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.FindOneAndUpdateOptions): any;
					public distinct(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					public mapReduce(param0: string, param1: string): com.mongodb.client.MapReduceIterable<any>;
					public count(): number;
					public replaceOne(param0: org.bson.conversions.Bson, param1: any): com.mongodb.client.result.UpdateResult;
					public updateOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					public updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					public getDocumentClass(): java.lang.Class<any>;
					public deleteOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					public getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
					public withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.MongoCollection<any>;
					public distinct(param0: string, param1: java.lang.Class): com.mongodb.client.DistinctIterable<any>;
					public findOneAndDelete(param0: org.bson.conversions.Bson): any;
					public listIndexes(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListIndexesIterable<any>;
					public aggregate(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
					public updateMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson, param3: com.mongodb.client.model.UpdateOptions): com.mongodb.client.result.UpdateResult;
					public dropIndex(param0: com.mongodb.client.ClientSession, param1: string): void;
					public findOneAndDelete(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.FindOneAndDeleteOptions): any;
					public findOneAndDelete(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): any;
					public count(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): number;
					public find(param0: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public dropIndex(param0: org.bson.conversions.Bson): void;
					public insertOne(param0: any): void;
					public drop(param0: com.mongodb.client.ClientSession): void;
					public count(param0: com.mongodb.client.ClientSession): number;
					public countDocuments(): number;
					public insertOne(param0: com.mongodb.client.ClientSession, param1: any, param2: com.mongodb.client.model.InsertOneOptions): void;
					public bulkWrite(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.bulk.BulkWriteResult;
					public dropIndex(param0: string, param1: com.mongodb.client.model.DropIndexOptions): void;
					public findOneAndReplace(param0: org.bson.conversions.Bson, param1: any, param2: com.mongodb.client.model.FindOneAndReplaceOptions): any;
					public findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndUpdateOptions): any;
					public deleteMany(param0: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					public countDocuments(param0: com.mongodb.client.ClientSession): number;
					public countDocuments(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): number;
					public find(param0: org.bson.conversions.Bson, param1: java.lang.Class): com.mongodb.client.FindIterable<any>;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public insertMany(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>, param2: com.mongodb.client.model.InsertManyOptions): void;
					public count(param0: org.bson.conversions.Bson): number;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public bulkWrite(param0: java.util.List<any>, param1: com.mongodb.client.model.BulkWriteOptions): com.mongodb.bulk.BulkWriteResult;
					public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<any>;
					public replaceOne(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: any, param3: com.mongodb.client.model.ReplaceOptions): com.mongodb.client.result.UpdateResult;
					public deleteOne(param0: org.bson.conversions.Bson): com.mongodb.client.result.DeleteResult;
					public deleteOne(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.client.result.DeleteResult;
					public updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					public updateMany(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: org.bson.conversions.Bson): com.mongodb.client.result.UpdateResult;
					public listIndexes(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListIndexesIterable<org.bson.Document>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoDatabaseImpl extends com.mongodb.client.MongoDatabase {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoDatabaseImpl>;
					public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson): org.bson.Document;
					public watch(param0: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public getCollection(param0: string): com.mongodb.client.MongoCollection<org.bson.Document>;
					public listCollections(param0: java.lang.Class): com.mongodb.client.ListCollectionsIterable<any>;
					public createView(param0: string, param1: string, param2: java.util.List<any>): void;
					public watch(param0: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public runCommand(param0: org.bson.conversions.Bson, param1: java.lang.Class): any;
					public aggregate(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
					public listCollections(): com.mongodb.client.ListCollectionsIterable<org.bson.Document>;
					public watch(param0: java.util.List, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public watch(param0: com.mongodb.client.ClientSession): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public withWriteConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.MongoDatabase;
					public watch(): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.ChangeStreamIterable<org.bson.Document>;
					public drop(param0: com.mongodb.client.ClientSession): void;
					public createView(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.util.List<any>, param4: com.mongodb.client.model.CreateViewOptions): void;
					public getReadConcern(): com.mongodb.ReadConcern;
					public runCommand(param0: org.bson.conversions.Bson, param1: com.mongodb.ReadPreference, param2: java.lang.Class): any;
					public drop(): void;
					public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List<any>): com.mongodb.client.AggregateIterable<org.bson.Document>;
					public listCollections(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ListCollectionsIterable<any>;
					public createView(param0: string, param1: string, param2: java.util.List<any>, param3: com.mongodb.client.model.CreateViewOptions): void;
					public withCodecRegistry(param0: org.bson.codecs.configuration.CodecRegistry): com.mongodb.client.MongoDatabase;
					public runCommand(param0: org.bson.conversions.Bson, param1: com.mongodb.ReadPreference): org.bson.Document;
					public listCollections(param0: com.mongodb.client.ClientSession): com.mongodb.client.ListCollectionsIterable<org.bson.Document>;
					public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.ReadPreference): org.bson.Document;
					public createCollection(param0: com.mongodb.client.ClientSession, param1: string, param2: com.mongodb.client.model.CreateCollectionOptions): void;
					public withReadConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.MongoDatabase;
					public runCommand(param0: org.bson.conversions.Bson): org.bson.Document;
					public getReadPreference(): com.mongodb.ReadPreference;
					public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: java.lang.Class): any;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public aggregate(param0: java.util.List<any>): com.mongodb.client.AggregateIterable<org.bson.Document>;
					public listCollectionNames(param0: com.mongodb.client.ClientSession): com.mongodb.client.MongoIterable<string>;
					public withReadPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.MongoDatabase;
					public createCollection(param0: string): void;
					public constructor(param0: string, param1: org.bson.codecs.configuration.CodecRegistry, param2: com.mongodb.ReadPreference, param3: com.mongodb.WriteConcern, param4: boolean, param5: com.mongodb.ReadConcern, param6: com.mongodb.client.internal.OperationExecutor);
					public getCollection(param0: string, param1: java.lang.Class): com.mongodb.client.MongoCollection<any>;
					public watch(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.ChangeStreamIterable<any>;
					public listCollectionNames(): com.mongodb.client.MongoIterable<string>;
					public createCollection(param0: com.mongodb.client.ClientSession, param1: string): void;
					public aggregate(param0: com.mongodb.client.ClientSession, param1: java.util.List, param2: java.lang.Class): com.mongodb.client.AggregateIterable<any>;
					public createView(param0: com.mongodb.client.ClientSession, param1: string, param2: string, param3: java.util.List<any>): void;
					public getName(): string;
					public runCommand(param0: com.mongodb.client.ClientSession, param1: org.bson.conversions.Bson, param2: com.mongodb.ReadPreference, param3: java.lang.Class): any;
					public createCollection(param0: string, param1: com.mongodb.client.model.CreateCollectionOptions): void;
					public getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
					public getWriteConcern(): com.mongodb.WriteConcern;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoIterableFactory {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoIterableFactory>;
					/**
					 * Constructs a new instance of the com.mongodb.client.internal.MongoIterableFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						findOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
						aggregateOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
						aggregateOf(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
						changeStreamOf(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
						changeStreamOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
						distinctOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: string, param9: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
						listDatabasesOf(param0: com.mongodb.client.ClientSession, param1: java.lang.Class, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListDatabasesIterable<any>;
						listCollectionsOf(param0: com.mongodb.client.ClientSession, param1: string, param2: boolean, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListCollectionsIterable<any>;
						listIndexesOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: org.bson.codecs.configuration.CodecRegistry, param4: com.mongodb.ReadPreference, param5: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListIndexesIterable<any>;
						mapReduceOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: string, param10: string): com.mongodb.client.MapReduceIterable<any>;
					});
					public constructor();
					public mapReduceOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: string, param10: string): com.mongodb.client.MapReduceIterable<any>;
					public aggregateOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public changeStreamOf(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public findOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public listCollectionsOf(param0: com.mongodb.client.ClientSession, param1: string, param2: boolean, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListCollectionsIterable<any>;
					public listIndexesOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: org.bson.codecs.configuration.CodecRegistry, param4: com.mongodb.ReadPreference, param5: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListIndexesIterable<any>;
					public aggregateOf(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public changeStreamOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public listDatabasesOf(param0: com.mongodb.client.ClientSession, param1: java.lang.Class, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListDatabasesIterable<any>;
					public distinctOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: string, param9: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export abstract class MongoIterableImpl<TResult>  extends com.mongodb.client.MongoIterable<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoIterableImpl<any>>;
					public first(): any;
					public getReadConcern(): com.mongodb.ReadConcern;
					public into(param0: java.util.Collection): java.util.Collection;
					public forEach(param0: com.mongodb.Block<any>): void;
					public map(param0: com.mongodb.Function<any,any>): com.mongodb.client.MongoIterable<any>;
					public asReadOperation(): com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<any>>;
					public getBatchSize(): java.lang.Integer;
					public constructor(param0: com.mongodb.client.ClientSession, param1: com.mongodb.client.internal.OperationExecutor, param2: com.mongodb.ReadConcern, param3: com.mongodb.ReadPreference);
					public batchSize(param0: number): com.mongodb.client.MongoIterable<any>;
					public iterator(): com.mongodb.client.MongoCursor<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoIterables {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoIterables>;
					public static changeStreamOf(param0: com.mongodb.client.ClientSession, param1: string, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public static findOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: org.bson.conversions.Bson): com.mongodb.client.FindIterable<any>;
					public static changeStreamOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.ReadConcern, param5: com.mongodb.client.internal.OperationExecutor, param6: java.util.List, param7: java.lang.Class, param8: com.mongodb.client.model.changestream.ChangeStreamLevel): com.mongodb.client.ChangeStreamIterable<any>;
					public static distinctOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.client.internal.OperationExecutor, param8: string, param9: org.bson.conversions.Bson): com.mongodb.client.DistinctIterable<any>;
					public static mapReduceOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: string, param10: string): com.mongodb.client.MapReduceIterable<any>;
					public static aggregateOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public static listDatabasesOf(param0: com.mongodb.client.ClientSession, param1: java.lang.Class, param2: org.bson.codecs.configuration.CodecRegistry, param3: com.mongodb.ReadPreference, param4: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListDatabasesIterable<any>;
					public static listIndexesOf(param0: com.mongodb.client.ClientSession, param1: com.mongodb.MongoNamespace, param2: java.lang.Class, param3: org.bson.codecs.configuration.CodecRegistry, param4: com.mongodb.ReadPreference, param5: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListIndexesIterable<any>;
					public static aggregateOf(param0: com.mongodb.client.ClientSession, param1: string, param2: java.lang.Class, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.ReadConcern, param7: com.mongodb.WriteConcern, param8: com.mongodb.client.internal.OperationExecutor, param9: java.util.List, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.client.AggregateIterable<any>;
					public static listCollectionsOf(param0: com.mongodb.client.ClientSession, param1: string, param2: boolean, param3: java.lang.Class, param4: org.bson.codecs.configuration.CodecRegistry, param5: com.mongodb.ReadPreference, param6: com.mongodb.client.internal.OperationExecutor): com.mongodb.client.ListCollectionsIterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class MongoMappingCursor<T, U>  extends com.mongodb.client.MongoCursor<any> {
					public static class: java.lang.Class<com.mongodb.client.internal.MongoMappingCursor<any,any>>;
					public next(): any;
					public getServerCursor(): com.mongodb.ServerCursor;
					public close(): void;
					public tryNext(): any;
					public getServerAddress(): com.mongodb.ServerAddress;
					public hasNext(): boolean;
					public remove(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module internal {
				export class OperationExecutor {
					public static class: java.lang.Class<com.mongodb.client.internal.OperationExecutor>;
					/**
					 * Constructs a new instance of the com.mongodb.client.internal.OperationExecutor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern): any;
						execute(param0: com.mongodb.operation.WriteOperation<any>, param1: com.mongodb.ReadConcern): any;
						execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern, param3: com.mongodb.client.ClientSession): any;
						execute(param0: com.mongodb.operation.WriteOperation<any>, param1: com.mongodb.ReadConcern, param2: com.mongodb.client.ClientSession): any;
					});
					public constructor();
					public execute(param0: com.mongodb.operation.WriteOperation<any>, param1: com.mongodb.ReadConcern, param2: com.mongodb.client.ClientSession): any;
					public execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern, param3: com.mongodb.client.ClientSession): any;
					public execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.ReadConcern): any;
					public execute(param0: com.mongodb.operation.WriteOperation<any>, param1: com.mongodb.ReadConcern): any;
				}
			}
		}
	}
}


declare module com {
	export module mongodb {
		export module client {
			export module jndi {
				export class MongoClientFactory {
					public static class: java.lang.Class<com.mongodb.client.jndi.MongoClientFactory>;
					public constructor();
					public getObjectInstance(param0: any, param1: javax.naming.Name, param2: javax.naming.Context, param3: java.util.Hashtable<any,any>): any;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Accumulators {
					public static class: java.lang.Class<com.mongodb.client.model.Accumulators>;
					public static first(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static sum(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static push(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static stdDevPop(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static last(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static avg(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static max(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static min(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static addToSet(param0: string, param1: any): com.mongodb.client.model.BsonField;
					public static stdDevSamp(param0: string, param1: any): com.mongodb.client.model.BsonField;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Aggregates {
					public static class: java.lang.Class<com.mongodb.client.model.Aggregates>;
					public static facet(param0: java.util.List<com.mongodb.client.model.Facet>): org.bson.conversions.Bson;
					public static project(param0: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static group(param0: any, param1: native.Array<com.mongodb.client.model.BsonField>): org.bson.conversions.Bson;
					public static facet(param0: native.Array<com.mongodb.client.model.Facet>): org.bson.conversions.Bson;
					public static count(): org.bson.conversions.Bson;
					public static graphLookup(param0: string, param1: any, param2: string, param3: string, param4: string): org.bson.conversions.Bson;
					public static sortByCount(param0: any): org.bson.conversions.Bson;
					public static bucket(param0: any, param1: java.util.List, param2: com.mongodb.client.model.BucketOptions): org.bson.conversions.Bson;
					public static replaceRoot(param0: any): org.bson.conversions.Bson;
					public static sample(param0: number): org.bson.conversions.Bson;
					public static bucket(param0: any, param1: java.util.List): org.bson.conversions.Bson;
					public static limit(param0: number): org.bson.conversions.Bson;
					public static lookup(param0: string, param1: string, param2: string, param3: string): org.bson.conversions.Bson;
					public static group(param0: any, param1: java.util.List): org.bson.conversions.Bson;
					public static unwind(param0: string, param1: com.mongodb.client.model.UnwindOptions): org.bson.conversions.Bson;
					public static addFields(param0: java.util.List<com.mongodb.client.model.Field<any>>): org.bson.conversions.Bson;
					public static match(param0: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static bucketAuto(param0: any, param1: number, param2: com.mongodb.client.model.BucketAutoOptions): org.bson.conversions.Bson;
					public static sort(param0: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static skip(param0: number): org.bson.conversions.Bson;
					public static lookup(param0: string, param1: java.util.List<any>, param2: string): org.bson.conversions.Bson;
					public static count(param0: string): org.bson.conversions.Bson;
					public static addFields(param0: native.Array<com.mongodb.client.model.Field<any>>): org.bson.conversions.Bson;
					public static bucketAuto(param0: any, param1: number): org.bson.conversions.Bson;
					public static graphLookup(param0: string, param1: any, param2: string, param3: string, param4: string, param5: com.mongodb.client.model.GraphLookupOptions): org.bson.conversions.Bson;
					public static lookup(param0: string, param1: java.util.List, param2: java.util.List, param3: string): org.bson.conversions.Bson;
					public static out(param0: string): org.bson.conversions.Bson;
					public static unwind(param0: string): org.bson.conversions.Bson;
				}
				export module Aggregates {
					export class AddFieldsStage extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.AddFieldsStage>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class BucketAutoStage<TExpression>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.BucketAutoStage<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class BucketStage<TExpression, TBoundary>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.BucketStage<any,any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class FacetStage extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.FacetStage>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class GraphLookupStage<TExpression>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.GraphLookupStage<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class GroupStage<TExpression>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.GroupStage<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class LookupStage<TExpression>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.LookupStage<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class ReplaceRootStage<TExpression>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.ReplaceRootStage<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class SimplePipelineStage extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.SimplePipelineStage>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class SortByCountStage<TExpression>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Aggregates.SortByCountStage<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class AggregationLevel {
					public static class: java.lang.Class<com.mongodb.client.model.AggregationLevel>;
					public static DATABASE: com.mongodb.client.model.AggregationLevel;
					public static COLLECTION: com.mongodb.client.model.AggregationLevel;
					public static valueOf(param0: string): com.mongodb.client.model.AggregationLevel;
					public static values(): native.Array<com.mongodb.client.model.AggregationLevel>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class BsonField {
					public static class: java.lang.Class<com.mongodb.client.model.BsonField>;
					public toString(): string;
					public getName(): string;
					public getValue(): org.bson.conversions.Bson;
					public constructor(param0: string, param1: org.bson.conversions.Bson);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class BucketAutoOptions {
					public static class: java.lang.Class<com.mongodb.client.model.BucketAutoOptions>;
					public granularity(param0: com.mongodb.client.model.BucketGranularity): com.mongodb.client.model.BucketAutoOptions;
					public toString(): string;
					public constructor();
					public getOutput(): java.util.List<com.mongodb.client.model.BsonField>;
					public output(param0: java.util.List<com.mongodb.client.model.BsonField>): com.mongodb.client.model.BucketAutoOptions;
					public output(param0: native.Array<com.mongodb.client.model.BsonField>): com.mongodb.client.model.BucketAutoOptions;
					public getGranularity(): com.mongodb.client.model.BucketGranularity;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class BucketGranularity {
					public static class: java.lang.Class<com.mongodb.client.model.BucketGranularity>;
					public static R5: com.mongodb.client.model.BucketGranularity;
					public static R10: com.mongodb.client.model.BucketGranularity;
					public static R20: com.mongodb.client.model.BucketGranularity;
					public static R40: com.mongodb.client.model.BucketGranularity;
					public static R80: com.mongodb.client.model.BucketGranularity;
					public static SERIES_125: com.mongodb.client.model.BucketGranularity;
					public static E6: com.mongodb.client.model.BucketGranularity;
					public static E12: com.mongodb.client.model.BucketGranularity;
					public static E24: com.mongodb.client.model.BucketGranularity;
					public static E48: com.mongodb.client.model.BucketGranularity;
					public static E96: com.mongodb.client.model.BucketGranularity;
					public static E192: com.mongodb.client.model.BucketGranularity;
					public static POWERSOF2: com.mongodb.client.model.BucketGranularity;
					public static valueOf(param0: string): com.mongodb.client.model.BucketGranularity;
					public static fromString(param0: string): com.mongodb.client.model.BucketGranularity;
					public getValue(): string;
					public static values(): native.Array<com.mongodb.client.model.BucketGranularity>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class BucketOptions {
					public static class: java.lang.Class<com.mongodb.client.model.BucketOptions>;
					public output(param0: native.Array<com.mongodb.client.model.BsonField>): com.mongodb.client.model.BucketOptions;
					public toString(): string;
					public getDefaultBucket(): any;
					public constructor();
					public defaultBucket(param0: any): com.mongodb.client.model.BucketOptions;
					public output(param0: java.util.List<com.mongodb.client.model.BsonField>): com.mongodb.client.model.BucketOptions;
					public getOutput(): java.util.List<com.mongodb.client.model.BsonField>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class BuildersHelper {
					public static class: java.lang.Class<com.mongodb.client.model.BuildersHelper>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class BulkWriteOptions {
					public static class: java.lang.Class<com.mongodb.client.model.BulkWriteOptions>;
					public isOrdered(): boolean;
					public toString(): string;
					public constructor();
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.BulkWriteOptions;
					public ordered(param0: boolean): com.mongodb.client.model.BulkWriteOptions;
					public getBypassDocumentValidation(): java.lang.Boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Collation {
					public static class: java.lang.Class<com.mongodb.client.model.Collation>;
					public getMaxVariable(): com.mongodb.client.model.CollationMaxVariable;
					public getNumericOrdering(): java.lang.Boolean;
					public getBackwards(): java.lang.Boolean;
					public equals(param0: any): boolean;
					public static builder(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.Collation.Builder;
					public getLocale(): string;
					public toString(): string;
					public getCaseFirst(): com.mongodb.client.model.CollationCaseFirst;
					public getStrength(): com.mongodb.client.model.CollationStrength;
					public getCaseLevel(): java.lang.Boolean;
					public static builder(): com.mongodb.client.model.Collation.Builder;
					public hashCode(): number;
					public asDocument(): org.bson.BsonDocument;
					public getAlternate(): com.mongodb.client.model.CollationAlternate;
					public getNormalization(): java.lang.Boolean;
				}
				export module Collation {
					export class Builder {
						public static class: java.lang.Class<com.mongodb.client.model.Collation.Builder>;
						public backwards(param0: java.lang.Boolean): com.mongodb.client.model.Collation.Builder;
						public caseLevel(param0: java.lang.Boolean): com.mongodb.client.model.Collation.Builder;
						public normalization(param0: java.lang.Boolean): com.mongodb.client.model.Collation.Builder;
						public collationStrength(param0: com.mongodb.client.model.CollationStrength): com.mongodb.client.model.Collation.Builder;
						public collationMaxVariable(param0: com.mongodb.client.model.CollationMaxVariable): com.mongodb.client.model.Collation.Builder;
						public locale(param0: string): com.mongodb.client.model.Collation.Builder;
						public collationCaseFirst(param0: com.mongodb.client.model.CollationCaseFirst): com.mongodb.client.model.Collation.Builder;
						public numericOrdering(param0: java.lang.Boolean): com.mongodb.client.model.Collation.Builder;
						public collationAlternate(param0: com.mongodb.client.model.CollationAlternate): com.mongodb.client.model.Collation.Builder;
						public build(): com.mongodb.client.model.Collation;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CollationAlternate {
					public static class: java.lang.Class<com.mongodb.client.model.CollationAlternate>;
					public static NON_IGNORABLE: com.mongodb.client.model.CollationAlternate;
					public static SHIFTED: com.mongodb.client.model.CollationAlternate;
					public getValue(): string;
					public static valueOf(param0: string): com.mongodb.client.model.CollationAlternate;
					public static fromString(param0: string): com.mongodb.client.model.CollationAlternate;
					public static values(): native.Array<com.mongodb.client.model.CollationAlternate>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CollationCaseFirst {
					public static class: java.lang.Class<com.mongodb.client.model.CollationCaseFirst>;
					public static UPPER: com.mongodb.client.model.CollationCaseFirst;
					public static LOWER: com.mongodb.client.model.CollationCaseFirst;
					public static OFF: com.mongodb.client.model.CollationCaseFirst;
					public static valueOf(param0: string): com.mongodb.client.model.CollationCaseFirst;
					public getValue(): string;
					public static fromString(param0: string): com.mongodb.client.model.CollationCaseFirst;
					public static values(): native.Array<com.mongodb.client.model.CollationCaseFirst>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CollationMaxVariable {
					public static class: java.lang.Class<com.mongodb.client.model.CollationMaxVariable>;
					public static PUNCT: com.mongodb.client.model.CollationMaxVariable;
					public static SPACE: com.mongodb.client.model.CollationMaxVariable;
					public static fromString(param0: string): com.mongodb.client.model.CollationMaxVariable;
					public getValue(): string;
					public static valueOf(param0: string): com.mongodb.client.model.CollationMaxVariable;
					public static values(): native.Array<com.mongodb.client.model.CollationMaxVariable>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CollationStrength {
					public static class: java.lang.Class<com.mongodb.client.model.CollationStrength>;
					public static PRIMARY: com.mongodb.client.model.CollationStrength;
					public static SECONDARY: com.mongodb.client.model.CollationStrength;
					public static TERTIARY: com.mongodb.client.model.CollationStrength;
					public static QUATERNARY: com.mongodb.client.model.CollationStrength;
					public static IDENTICAL: com.mongodb.client.model.CollationStrength;
					public static valueOf(param0: string): com.mongodb.client.model.CollationStrength;
					public static values(): native.Array<com.mongodb.client.model.CollationStrength>;
					public getIntRepresentation(): number;
					public static fromInt(param0: number): com.mongodb.client.model.CollationStrength;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CountOptions {
					public static class: java.lang.Class<com.mongodb.client.model.CountOptions>;
					public hint(param0: org.bson.conversions.Bson): com.mongodb.client.model.CountOptions;
					public getCollation(): com.mongodb.client.model.Collation;
					public getLimit(): number;
					public limit(param0: number): com.mongodb.client.model.CountOptions;
					public hintString(param0: string): com.mongodb.client.model.CountOptions;
					public toString(): string;
					public constructor();
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.CountOptions;
					public getHintString(): string;
					public skip(param0: number): com.mongodb.client.model.CountOptions;
					public getHint(): org.bson.conversions.Bson;
					public getSkip(): number;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.CountOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CreateCollectionOptions {
					public static class: java.lang.Class<com.mongodb.client.model.CreateCollectionOptions>;
					public autoIndex(param0: boolean): com.mongodb.client.model.CreateCollectionOptions;
					public usePowerOf2Sizes(param0: java.lang.Boolean): com.mongodb.client.model.CreateCollectionOptions;
					public getValidationOptions(): com.mongodb.client.model.ValidationOptions;
					public indexOptionDefaults(param0: com.mongodb.client.model.IndexOptionDefaults): com.mongodb.client.model.CreateCollectionOptions;
					public getCollation(): com.mongodb.client.model.Collation;
					public getIndexOptionDefaults(): com.mongodb.client.model.IndexOptionDefaults;
					public sizeInBytes(param0: number): com.mongodb.client.model.CreateCollectionOptions;
					public isAutoIndex(): boolean;
					public storageEngineOptions(param0: org.bson.conversions.Bson): com.mongodb.client.model.CreateCollectionOptions;
					public getSizeInBytes(): number;
					public validationOptions(param0: com.mongodb.client.model.ValidationOptions): com.mongodb.client.model.CreateCollectionOptions;
					public maxDocuments(param0: number): com.mongodb.client.model.CreateCollectionOptions;
					public capped(param0: boolean): com.mongodb.client.model.CreateCollectionOptions;
					public getStorageEngineOptions(): org.bson.conversions.Bson;
					public toString(): string;
					public constructor();
					public getMaxDocuments(): number;
					public isCapped(): boolean;
					public isUsePowerOf2Sizes(): java.lang.Boolean;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.CreateCollectionOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CreateIndexOptions {
					public static class: java.lang.Class<com.mongodb.client.model.CreateIndexOptions>;
					public toString(): string;
					public constructor();
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.CreateIndexOptions;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class CreateViewOptions {
					public static class: java.lang.Class<com.mongodb.client.model.CreateViewOptions>;
					public toString(): string;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.CreateViewOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DBCollectionCountOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DBCollectionCountOptions>;
					public readConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.model.DBCollectionCountOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DBCollectionCountOptions;
					public readPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.model.DBCollectionCountOptions;
					public getCollation(): com.mongodb.client.model.Collation;
					public getLimit(): number;
					public hint(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionCountOptions;
					public limit(param0: number): com.mongodb.client.model.DBCollectionCountOptions;
					public hintString(param0: string): com.mongodb.client.model.DBCollectionCountOptions;
					public getReadConcern(): com.mongodb.ReadConcern;
					public constructor();
					public getHintString(): string;
					public skip(param0: number): com.mongodb.client.model.DBCollectionCountOptions;
					public getHint(): com.mongodb.DBObject;
					public getSkip(): number;
					public getReadPreference(): com.mongodb.ReadPreference;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.DBCollectionCountOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DBCollectionDistinctOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DBCollectionDistinctOptions>;
					public readConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.model.DBCollectionDistinctOptions;
					public getReadConcern(): com.mongodb.ReadConcern;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public readPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.model.DBCollectionDistinctOptions;
					public getReadPreference(): com.mongodb.ReadPreference;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DBCollectionDistinctOptions;
					public getFilter(): com.mongodb.DBObject;
					public filter(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionDistinctOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DBCollectionFindAndModifyOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DBCollectionFindAndModifyOptions>;
					public isRemove(): boolean;
					public arrayFilters(param0: java.util.List<any>): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public isUpsert(): boolean;
					public getCollation(): com.mongodb.client.model.Collation;
					public returnNew(param0: boolean): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public projection(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public remove(param0: boolean): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public getBypassDocumentValidation(): java.lang.Boolean;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public upsert(param0: boolean): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public getSort(): com.mongodb.DBObject;
					public sort(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public getArrayFilters(): java.util.List<any>;
					public constructor();
					public update(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public returnNew(): boolean;
					public getWriteConcern(): com.mongodb.WriteConcern;
					public writeConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public getProjection(): com.mongodb.DBObject;
					public getUpdate(): com.mongodb.DBObject;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.DBCollectionFindAndModifyOptions;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DBCollectionFindOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DBCollectionFindOptions>;
					public noCursorTimeout(param0: boolean): com.mongodb.client.model.DBCollectionFindOptions;
					public getCursorType(): com.mongodb.CursorType;
					public oplogReplay(param0: boolean): com.mongodb.client.model.DBCollectionFindOptions;
					public readPreference(param0: com.mongodb.ReadPreference): com.mongodb.client.model.DBCollectionFindOptions;
					public cursorType(param0: com.mongodb.CursorType): com.mongodb.client.model.DBCollectionFindOptions;
					public batchSize(param0: number): com.mongodb.client.model.DBCollectionFindOptions;
					public isShowRecordId(): boolean;
					public limit(param0: number): com.mongodb.client.model.DBCollectionFindOptions;
					public copy(): com.mongodb.client.model.DBCollectionFindOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DBCollectionFindOptions;
					public getReadConcern(): com.mongodb.ReadConcern;
					public constructor();
					public getMax(): com.mongodb.DBObject;
					public isPartial(): boolean;
					public getModifiers(): com.mongodb.DBObject;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.DBCollectionFindOptions;
					public hint(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindOptions;
					public skip(param0: number): com.mongodb.client.model.DBCollectionFindOptions;
					public isOplogReplay(): boolean;
					public getMaxAwaitTime(param0: java.util.concurrent.TimeUnit): number;
					public getReadPreference(): com.mongodb.ReadPreference;
					public getHint(): com.mongodb.DBObject;
					public isReturnKey(): boolean;
					public isNoCursorTimeout(): boolean;
					public getCollation(): com.mongodb.client.model.Collation;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.DBCollectionFindOptions;
					public getLimit(): number;
					public partial(param0: boolean): com.mongodb.client.model.DBCollectionFindOptions;
					public comment(param0: string): com.mongodb.client.model.DBCollectionFindOptions;
					public projection(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindOptions;
					public readConcern(param0: com.mongodb.ReadConcern): com.mongodb.client.model.DBCollectionFindOptions;
					public max(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindOptions;
					public modifiers(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindOptions;
					public getSort(): com.mongodb.DBObject;
					public showRecordId(param0: boolean): com.mongodb.client.model.DBCollectionFindOptions;
					public getMin(): com.mongodb.DBObject;
					public returnKey(param0: boolean): com.mongodb.client.model.DBCollectionFindOptions;
					public min(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindOptions;
					public getBatchSize(): number;
					public getProjection(): com.mongodb.DBObject;
					public getComment(): string;
					public getSkip(): number;
					public sort(param0: com.mongodb.DBObject): com.mongodb.client.model.DBCollectionFindOptions;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DBCollectionRemoveOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DBCollectionRemoveOptions>;
					public encoder(param0: com.mongodb.DBEncoder): com.mongodb.client.model.DBCollectionRemoveOptions;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public getWriteConcern(): com.mongodb.WriteConcern;
					public getEncoder(): com.mongodb.DBEncoder;
					public writeConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.model.DBCollectionRemoveOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DBCollectionRemoveOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DBCollectionUpdateOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DBCollectionUpdateOptions>;
					public multi(param0: boolean): com.mongodb.client.model.DBCollectionUpdateOptions;
					public encoder(param0: com.mongodb.DBEncoder): com.mongodb.client.model.DBCollectionUpdateOptions;
					public writeConcern(param0: com.mongodb.WriteConcern): com.mongodb.client.model.DBCollectionUpdateOptions;
					public isUpsert(): boolean;
					public getCollation(): com.mongodb.client.model.Collation;
					public getBypassDocumentValidation(): java.lang.Boolean;
					public arrayFilters(param0: java.util.List<any>): com.mongodb.client.model.DBCollectionUpdateOptions;
					public isMulti(): boolean;
					public getArrayFilters(): java.util.List<any>;
					public constructor();
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.DBCollectionUpdateOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DBCollectionUpdateOptions;
					public getWriteConcern(): com.mongodb.WriteConcern;
					public getEncoder(): com.mongodb.DBEncoder;
					public upsert(param0: boolean): com.mongodb.client.model.DBCollectionUpdateOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DBCreateViewOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DBCreateViewOptions>;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DBCreateViewOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DeleteManyModel<T>  extends com.mongodb.client.model.WriteModel<any> {
					public static class: java.lang.Class<com.mongodb.client.model.DeleteManyModel<any>>;
					public constructor(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions);
					public getOptions(): com.mongodb.client.model.DeleteOptions;
					public toString(): string;
					public getFilter(): org.bson.conversions.Bson;
					public constructor(param0: org.bson.conversions.Bson);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DeleteOneModel<T>  extends com.mongodb.client.model.WriteModel<any> {
					public static class: java.lang.Class<com.mongodb.client.model.DeleteOneModel<any>>;
					public constructor(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions);
					public getOptions(): com.mongodb.client.model.DeleteOptions;
					public toString(): string;
					public getFilter(): org.bson.conversions.Bson;
					public constructor(param0: org.bson.conversions.Bson);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DeleteOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DeleteOptions>;
					public toString(): string;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.DeleteOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class DropIndexOptions {
					public static class: java.lang.Class<com.mongodb.client.model.DropIndexOptions>;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.DropIndexOptions;
					public toString(): string;
					public constructor();
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class EstimatedDocumentCountOptions {
					public static class: java.lang.Class<com.mongodb.client.model.EstimatedDocumentCountOptions>;
					public toString(): string;
					public constructor();
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.EstimatedDocumentCountOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Facet {
					public static class: java.lang.Class<com.mongodb.client.model.Facet>;
					public toString(): string;
					public constructor(param0: string, param1: java.util.List<any>);
					public getName(): string;
					public getPipeline(): java.util.List<any>;
					public constructor(param0: string, param1: native.Array<org.bson.conversions.Bson>);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Field<TExpression>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.client.model.Field<any>>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getName(): string;
					public getValue(): TExpression;
					public hashCode(): number;
					public constructor(param0: string, param1: TExpression);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Filters {
					public static class: java.lang.Class<com.mongodb.client.model.Filters>;
					public static exists(param0: string): org.bson.conversions.Bson;
					public static near(param0: string, param1: com.mongodb.client.model.geojson.Point, param2: java.lang.Double, param3: java.lang.Double): org.bson.conversions.Bson;
					public static type(param0: string, param1: org.bson.BsonType): org.bson.conversions.Bson;
					public static regex(param0: string, param1: string, param2: string): org.bson.conversions.Bson;
					public static geoWithinCenter(param0: string, param1: number, param2: number, param3: number): org.bson.conversions.Bson;
					public static bitsAllClear(param0: string, param1: number): org.bson.conversions.Bson;
					public static or(param0: native.Array<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static expr(param0: any): org.bson.conversions.Bson;
					public static eq(param0: string, param1: any): org.bson.conversions.Bson;
					public static regex(param0: string, param1: string): org.bson.conversions.Bson;
					public static geoIntersects(param0: string, param1: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static all(param0: string, param1: java.lang.Iterable): org.bson.conversions.Bson;
					public static geoWithinCenterSphere(param0: string, param1: number, param2: number, param3: number): org.bson.conversions.Bson;
					public static mod(param0: string, param1: number, param2: number): org.bson.conversions.Bson;
					public static text(param0: string, param1: com.mongodb.client.model.TextSearchOptions): org.bson.conversions.Bson;
					public static eq(param0: any): org.bson.conversions.Bson;
					public static geoWithin(param0: string, param1: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static type(param0: string, param1: string): org.bson.conversions.Bson;
					public static lte(param0: string, param1: any): org.bson.conversions.Bson;
					public static gte(param0: string, param1: any): org.bson.conversions.Bson;
					public static nin(param0: string, param1: native.Array<any>): org.bson.conversions.Bson;
					public static bitsAnyClear(param0: string, param1: number): org.bson.conversions.Bson;
					public static ne(param0: string, param1: any): org.bson.conversions.Bson;
					public static bitsAllSet(param0: string, param1: number): org.bson.conversions.Bson;
					public static not(param0: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static nor(param0: java.lang.Iterable<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static gt(param0: string, param1: any): org.bson.conversions.Bson;
					public static nin(param0: string, param1: java.lang.Iterable): org.bson.conversions.Bson;
					public static where(param0: string): org.bson.conversions.Bson;
					public static and(param0: java.lang.Iterable<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static geoWithinBox(param0: string, param1: number, param2: number, param3: number, param4: number): org.bson.conversions.Bson;
					public static text(param0: string): org.bson.conversions.Bson;
					public static text(param0: string, param1: string): org.bson.conversions.Bson;
					public static all(param0: string, param1: native.Array<any>): org.bson.conversions.Bson;
					public static regex(param0: string, param1: java.util.regex.Pattern): org.bson.conversions.Bson;
					public static nearSphere(param0: string, param1: com.mongodb.client.model.geojson.Point, param2: java.lang.Double, param3: java.lang.Double): org.bson.conversions.Bson;
					public static elemMatch(param0: string, param1: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static nearSphere(param0: string, param1: org.bson.conversions.Bson, param2: java.lang.Double, param3: java.lang.Double): org.bson.conversions.Bson;
					public static size(param0: string, param1: number): org.bson.conversions.Bson;
					public static nearSphere(param0: string, param1: number, param2: number, param3: java.lang.Double, param4: java.lang.Double): org.bson.conversions.Bson;
					public static and(param0: native.Array<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static exists(param0: string, param1: boolean): org.bson.conversions.Bson;
					public static bitsAnySet(param0: string, param1: number): org.bson.conversions.Bson;
					public static geoIntersects(param0: string, param1: com.mongodb.client.model.geojson.Geometry): org.bson.conversions.Bson;
					public static near(param0: string, param1: number, param2: number, param3: java.lang.Double, param4: java.lang.Double): org.bson.conversions.Bson;
					public static lt(param0: string, param1: any): org.bson.conversions.Bson;
					public static in(param0: string, param1: native.Array<any>): org.bson.conversions.Bson;
					public static near(param0: string, param1: org.bson.conversions.Bson, param2: java.lang.Double, param3: java.lang.Double): org.bson.conversions.Bson;
					public static geoWithin(param0: string, param1: com.mongodb.client.model.geojson.Geometry): org.bson.conversions.Bson;
					public static or(param0: java.lang.Iterable<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static jsonSchema(param0: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static nor(param0: native.Array<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static in(param0: string, param1: java.lang.Iterable): org.bson.conversions.Bson;
					public static geoWithinPolygon(param0: string, param1: java.util.List<java.util.List<java.lang.Double>>): org.bson.conversions.Bson;
				}
				export module Filters {
					export class AndFilter extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.AndFilter>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class GeometryOperatorFilter<TItem>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.GeometryOperatorFilter<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class IterableOperatorFilter<TItem>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.IterableOperatorFilter<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class NotFilter extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.NotFilter>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class OperatorFilter<TItem>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.OperatorFilter<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class OrNorFilter extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.OrNorFilter>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export module OrNorFilter {
						export class Operator {
							public static class: java.lang.Class<com.mongodb.client.model.Filters.OrNorFilter.Operator>;
							public static OR: com.mongodb.client.model.Filters.OrNorFilter.Operator;
							public static NOR: com.mongodb.client.model.Filters.OrNorFilter.Operator;
							public static valueOf(param0: string): com.mongodb.client.model.Filters.OrNorFilter.Operator;
							public static values(): native.Array<com.mongodb.client.model.Filters.OrNorFilter.Operator>;
						}
					}
					export class SimpleEncodingFilter<TItem>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.SimpleEncodingFilter<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class SimpleFilter extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.SimpleFilter>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class TextFilter extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Filters.TextFilter>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class FindOneAndDeleteOptions {
					public static class: java.lang.Class<com.mongodb.client.model.FindOneAndDeleteOptions>;
					public getProjection(): org.bson.conversions.Bson;
					public getSort(): org.bson.conversions.Bson;
					public toString(): string;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOneAndDeleteOptions;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.FindOneAndDeleteOptions;
					public projection(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOneAndDeleteOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.FindOneAndDeleteOptions;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class FindOneAndReplaceOptions {
					public static class: java.lang.Class<com.mongodb.client.model.FindOneAndReplaceOptions>;
					public getSort(): org.bson.conversions.Bson;
					public returnDocument(param0: com.mongodb.client.model.ReturnDocument): com.mongodb.client.model.FindOneAndReplaceOptions;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.FindOneAndReplaceOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.FindOneAndReplaceOptions;
					public isUpsert(): boolean;
					public upsert(param0: boolean): com.mongodb.client.model.FindOneAndReplaceOptions;
					public getCollation(): com.mongodb.client.model.Collation;
					public getBypassDocumentValidation(): java.lang.Boolean;
					public getProjection(): org.bson.conversions.Bson;
					public projection(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOneAndReplaceOptions;
					public toString(): string;
					public getReturnDocument(): com.mongodb.client.model.ReturnDocument;
					public constructor();
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.FindOneAndReplaceOptions;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOneAndReplaceOptions;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class FindOneAndUpdateOptions {
					public static class: java.lang.Class<com.mongodb.client.model.FindOneAndUpdateOptions>;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOneAndUpdateOptions;
					public getSort(): org.bson.conversions.Bson;
					public isUpsert(): boolean;
					public upsert(param0: boolean): com.mongodb.client.model.FindOneAndUpdateOptions;
					public projection(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOneAndUpdateOptions;
					public returnDocument(param0: com.mongodb.client.model.ReturnDocument): com.mongodb.client.model.FindOneAndUpdateOptions;
					public getCollation(): com.mongodb.client.model.Collation;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.FindOneAndUpdateOptions;
					public getBypassDocumentValidation(): java.lang.Boolean;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.FindOneAndUpdateOptions;
					public getProjection(): org.bson.conversions.Bson;
					public toString(): string;
					public getReturnDocument(): com.mongodb.client.model.ReturnDocument;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.FindOneAndUpdateOptions;
					public getArrayFilters(): java.util.List<any>;
					public constructor();
					public arrayFilters(param0: java.util.List<any>): com.mongodb.client.model.FindOneAndUpdateOptions;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class FindOptions {
					public static class: java.lang.Class<com.mongodb.client.model.FindOptions>;
					public getCursorType(): com.mongodb.CursorType;
					public batchSize(param0: number): com.mongodb.client.model.FindOptions;
					public limit(param0: number): com.mongodb.client.model.FindOptions;
					public modifiers(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOptions;
					public noCursorTimeout(param0: boolean): com.mongodb.client.model.FindOptions;
					public getModifiers(): org.bson.conversions.Bson;
					public max(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOptions;
					public getMaxScan(): number;
					public comment(param0: string): com.mongodb.client.model.FindOptions;
					public maxScan(param0: number): com.mongodb.client.model.FindOptions;
					public showRecordId(param0: boolean): com.mongodb.client.model.FindOptions;
					public isShowRecordId(): boolean;
					public oplogReplay(param0: boolean): com.mongodb.client.model.FindOptions;
					public isSnapshot(): boolean;
					public toString(): string;
					public partial(param0: boolean): com.mongodb.client.model.FindOptions;
					public constructor();
					public isPartial(): boolean;
					public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.FindOptions;
					public getMax(): org.bson.conversions.Bson;
					public isOplogReplay(): boolean;
					public min(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOptions;
					public getMaxAwaitTime(param0: java.util.concurrent.TimeUnit): number;
					public isReturnKey(): boolean;
					public isNoCursorTimeout(): boolean;
					public hint(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOptions;
					public getSort(): org.bson.conversions.Bson;
					public cursorType(param0: com.mongodb.CursorType): com.mongodb.client.model.FindOptions;
					public constructor(param0: com.mongodb.client.model.FindOptions);
					public getCollation(): com.mongodb.client.model.Collation;
					public getLimit(): number;
					public projection(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOptions;
					public getProjection(): org.bson.conversions.Bson;
					public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.FindOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.FindOptions;
					public sort(param0: org.bson.conversions.Bson): com.mongodb.client.model.FindOptions;
					public getMin(): org.bson.conversions.Bson;
					public returnKey(param0: boolean): com.mongodb.client.model.FindOptions;
					public skip(param0: number): com.mongodb.client.model.FindOptions;
					public getHint(): org.bson.conversions.Bson;
					public getBatchSize(): number;
					public snapshot(param0: boolean): com.mongodb.client.model.FindOptions;
					public getComment(): string;
					public getSkip(): number;
					public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class GraphLookupOptions {
					public static class: java.lang.Class<com.mongodb.client.model.GraphLookupOptions>;
					public restrictSearchWithMatch(param0: org.bson.conversions.Bson): com.mongodb.client.model.GraphLookupOptions;
					public toString(): string;
					public depthField(param0: string): com.mongodb.client.model.GraphLookupOptions;
					public constructor();
					public getMaxDepth(): java.lang.Integer;
					public getDepthField(): string;
					public getRestrictSearchWithMatch(): org.bson.conversions.Bson;
					public maxDepth(param0: java.lang.Integer): com.mongodb.client.model.GraphLookupOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class IndexModel {
					public static class: java.lang.Class<com.mongodb.client.model.IndexModel>;
					public constructor(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.IndexOptions);
					public toString(): string;
					public getKeys(): org.bson.conversions.Bson;
					public constructor(param0: org.bson.conversions.Bson);
					public getOptions(): com.mongodb.client.model.IndexOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class IndexOptionDefaults {
					public static class: java.lang.Class<com.mongodb.client.model.IndexOptionDefaults>;
					public storageEngine(param0: org.bson.conversions.Bson): com.mongodb.client.model.IndexOptionDefaults;
					public getStorageEngine(): org.bson.conversions.Bson;
					public toString(): string;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class IndexOptions {
					public static class: java.lang.Class<com.mongodb.client.model.IndexOptions>;
					public partialFilterExpression(param0: org.bson.conversions.Bson): com.mongodb.client.model.IndexOptions;
					public getStorageEngine(): org.bson.conversions.Bson;
					public getExpireAfter(param0: java.util.concurrent.TimeUnit): java.lang.Long;
					public getVersion(): java.lang.Integer;
					public defaultLanguage(param0: string): com.mongodb.client.model.IndexOptions;
					public getDefaultLanguage(): string;
					public storageEngine(param0: org.bson.conversions.Bson): com.mongodb.client.model.IndexOptions;
					public weights(param0: org.bson.conversions.Bson): com.mongodb.client.model.IndexOptions;
					public toString(): string;
					public constructor();
					public textVersion(param0: java.lang.Integer): com.mongodb.client.model.IndexOptions;
					public getSphereVersion(): java.lang.Integer;
					public getBits(): java.lang.Integer;
					public background(param0: boolean): com.mongodb.client.model.IndexOptions;
					public isBackground(): boolean;
					public max(param0: java.lang.Double): com.mongodb.client.model.IndexOptions;
					public getPartialFilterExpression(): org.bson.conversions.Bson;
					public getTextVersion(): java.lang.Integer;
					public bucketSize(param0: java.lang.Double): com.mongodb.client.model.IndexOptions;
					public getLanguageOverride(): string;
					public sparse(param0: boolean): com.mongodb.client.model.IndexOptions;
					public getCollation(): com.mongodb.client.model.Collation;
					public getMax(): java.lang.Double;
					public isSparse(): boolean;
					public version(param0: java.lang.Integer): com.mongodb.client.model.IndexOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.IndexOptions;
					public getMin(): java.lang.Double;
					public min(param0: java.lang.Double): com.mongodb.client.model.IndexOptions;
					public expireAfter(param0: java.lang.Long, param1: java.util.concurrent.TimeUnit): com.mongodb.client.model.IndexOptions;
					public getBucketSize(): java.lang.Double;
					public sphereVersion(param0: java.lang.Integer): com.mongodb.client.model.IndexOptions;
					public getName(): string;
					public isUnique(): boolean;
					public getWeights(): org.bson.conversions.Bson;
					public languageOverride(param0: string): com.mongodb.client.model.IndexOptions;
					public bits(param0: java.lang.Integer): com.mongodb.client.model.IndexOptions;
					public unique(param0: boolean): com.mongodb.client.model.IndexOptions;
					public name(param0: string): com.mongodb.client.model.IndexOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Indexes {
					public static class: java.lang.Class<com.mongodb.client.model.Indexes>;
					public static text(): org.bson.conversions.Bson;
					public static geoHaystack(param0: string, param1: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static ascending(param0: native.Array<string>): org.bson.conversions.Bson;
					public static ascending(param0: java.util.List<string>): org.bson.conversions.Bson;
					public static geo2d(param0: string): org.bson.conversions.Bson;
					public static text(param0: string): org.bson.conversions.Bson;
					public static descending(param0: native.Array<string>): org.bson.conversions.Bson;
					public static compoundIndex(param0: java.util.List<any>): org.bson.conversions.Bson;
					public static hashed(param0: string): org.bson.conversions.Bson;
					public static geo2dsphere(param0: java.util.List<string>): org.bson.conversions.Bson;
					public static geo2dsphere(param0: native.Array<string>): org.bson.conversions.Bson;
					public static compoundIndex(param0: native.Array<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static descending(param0: java.util.List<string>): org.bson.conversions.Bson;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class InsertManyOptions {
					public static class: java.lang.Class<com.mongodb.client.model.InsertManyOptions>;
					public isOrdered(): boolean;
					public toString(): string;
					public ordered(param0: boolean): com.mongodb.client.model.InsertManyOptions;
					public constructor();
					public getBypassDocumentValidation(): java.lang.Boolean;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.InsertManyOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class InsertOneModel<T>  extends com.mongodb.client.model.WriteModel<any> {
					public static class: java.lang.Class<com.mongodb.client.model.InsertOneModel<any>>;
					public toString(): string;
					public getDocument(): any;
					public constructor(param0: any);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class InsertOneOptions {
					public static class: java.lang.Class<com.mongodb.client.model.InsertOneOptions>;
					public toString(): string;
					public constructor();
					public getBypassDocumentValidation(): java.lang.Boolean;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.InsertOneOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class MapReduceAction {
					public static class: java.lang.Class<com.mongodb.client.model.MapReduceAction>;
					public static REPLACE: com.mongodb.client.model.MapReduceAction;
					public static MERGE: com.mongodb.client.model.MapReduceAction;
					public static REDUCE: com.mongodb.client.model.MapReduceAction;
					public getValue(): string;
					public static values(): native.Array<com.mongodb.client.model.MapReduceAction>;
					public static valueOf(param0: string): com.mongodb.client.model.MapReduceAction;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class ParallelCollectionScanOptions {
					public static class: java.lang.Class<com.mongodb.client.model.ParallelCollectionScanOptions>;
					public constructor();
					public getBatchSize(): number;
					public batchSize(param0: number): com.mongodb.client.model.ParallelCollectionScanOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Projections {
					public static class: java.lang.Class<com.mongodb.client.model.Projections>;
					public static elemMatch(param0: string): org.bson.conversions.Bson;
					public static exclude(param0: native.Array<string>): org.bson.conversions.Bson;
					public static computed(param0: string, param1: any): org.bson.conversions.Bson;
					public static slice(param0: string, param1: number, param2: number): org.bson.conversions.Bson;
					public static fields(param0: native.Array<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static excludeId(): org.bson.conversions.Bson;
					public static slice(param0: string, param1: number): org.bson.conversions.Bson;
					public static include(param0: native.Array<string>): org.bson.conversions.Bson;
					public static fields(param0: java.util.List<any>): org.bson.conversions.Bson;
					public static metaTextScore(param0: string): org.bson.conversions.Bson;
					public static elemMatch(param0: string, param1: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static include(param0: java.util.List<string>): org.bson.conversions.Bson;
					public static exclude(param0: java.util.List<string>): org.bson.conversions.Bson;
				}
				export module Projections {
					export class ElemMatchFilterProjection extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Projections.ElemMatchFilterProjection>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class FieldsProjection extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Projections.FieldsProjection>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class PushOptions {
					public static class: java.lang.Class<com.mongodb.client.model.PushOptions>;
					public sort(param0: java.lang.Integer): com.mongodb.client.model.PushOptions;
					public getSort(): java.lang.Integer;
					public toString(): string;
					public getPosition(): java.lang.Integer;
					public getSortDocument(): org.bson.conversions.Bson;
					public constructor();
					public sortDocument(param0: org.bson.conversions.Bson): com.mongodb.client.model.PushOptions;
					public slice(param0: java.lang.Integer): com.mongodb.client.model.PushOptions;
					public getSlice(): java.lang.Integer;
					public position(param0: java.lang.Integer): com.mongodb.client.model.PushOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class RenameCollectionOptions {
					public static class: java.lang.Class<com.mongodb.client.model.RenameCollectionOptions>;
					public toString(): string;
					public constructor();
					public isDropTarget(): boolean;
					public dropTarget(param0: boolean): com.mongodb.client.model.RenameCollectionOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class ReplaceOneModel<T>  extends com.mongodb.client.model.WriteModel<any> {
					public static class: java.lang.Class<com.mongodb.client.model.ReplaceOneModel<any>>;
					public getReplacement(): any;
					public constructor(param0: org.bson.conversions.Bson, param1: any);
					public constructor(param0: org.bson.conversions.Bson, param1: any, param2: com.mongodb.client.model.UpdateOptions);
					public toString(): string;
					public getFilter(): org.bson.conversions.Bson;
					public getReplaceOptions(): com.mongodb.client.model.ReplaceOptions;
					public constructor(param0: org.bson.conversions.Bson, param1: any, param2: com.mongodb.client.model.ReplaceOptions);
					public getOptions(): com.mongodb.client.model.UpdateOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class ReplaceOptions {
					public static class: java.lang.Class<com.mongodb.client.model.ReplaceOptions>;
					public toString(): string;
					public isUpsert(): boolean;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public static createReplaceOptions(param0: com.mongodb.client.model.UpdateOptions): com.mongodb.client.model.ReplaceOptions;
					public getBypassDocumentValidation(): java.lang.Boolean;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.ReplaceOptions;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.ReplaceOptions;
					public upsert(param0: boolean): com.mongodb.client.model.ReplaceOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class ReturnDocument {
					public static class: java.lang.Class<com.mongodb.client.model.ReturnDocument>;
					public static BEFORE: com.mongodb.client.model.ReturnDocument;
					public static AFTER: com.mongodb.client.model.ReturnDocument;
					public static values(): native.Array<com.mongodb.client.model.ReturnDocument>;
					public static valueOf(param0: string): com.mongodb.client.model.ReturnDocument;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class SimpleExpression<TExpression>  extends org.bson.conversions.Bson {
					public static class: java.lang.Class<com.mongodb.client.model.SimpleExpression<any>>;
					public toString(): string;
					public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Sorts {
					public static class: java.lang.Class<com.mongodb.client.model.Sorts>;
					public static descending(param0: native.Array<string>): org.bson.conversions.Bson;
					public static metaTextScore(param0: string): org.bson.conversions.Bson;
					public static orderBy(param0: native.Array<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static ascending(param0: native.Array<string>): org.bson.conversions.Bson;
					public static ascending(param0: java.util.List<string>): org.bson.conversions.Bson;
					public static descending(param0: java.util.List<string>): org.bson.conversions.Bson;
					public static orderBy(param0: java.util.List<any>): org.bson.conversions.Bson;
				}
				export module Sorts {
					export class CompoundSort extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Sorts.CompoundSort>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class TextSearchOptions {
					public static class: java.lang.Class<com.mongodb.client.model.TextSearchOptions>;
					public language(param0: string): com.mongodb.client.model.TextSearchOptions;
					public toString(): string;
					public getCaseSensitive(): java.lang.Boolean;
					public constructor();
					public caseSensitive(param0: java.lang.Boolean): com.mongodb.client.model.TextSearchOptions;
					public getLanguage(): string;
					public diacriticSensitive(param0: java.lang.Boolean): com.mongodb.client.model.TextSearchOptions;
					public getDiacriticSensitive(): java.lang.Boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class UnwindOptions {
					public static class: java.lang.Class<com.mongodb.client.model.UnwindOptions>;
					public getIncludeArrayIndex(): string;
					public toString(): string;
					public includeArrayIndex(param0: string): com.mongodb.client.model.UnwindOptions;
					public constructor();
					public isPreserveNullAndEmptyArrays(): java.lang.Boolean;
					public preserveNullAndEmptyArrays(param0: java.lang.Boolean): com.mongodb.client.model.UnwindOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class UpdateManyModel<T>  extends com.mongodb.client.model.WriteModel<any> {
					public static class: java.lang.Class<com.mongodb.client.model.UpdateManyModel<any>>;
					public constructor(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson);
					public toString(): string;
					public getFilter(): org.bson.conversions.Bson;
					public getUpdate(): org.bson.conversions.Bson;
					public constructor(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions);
					public getOptions(): com.mongodb.client.model.UpdateOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class UpdateOneModel<T>  extends com.mongodb.client.model.WriteModel<any> {
					public static class: java.lang.Class<com.mongodb.client.model.UpdateOneModel<any>>;
					public constructor(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson);
					public toString(): string;
					public getFilter(): org.bson.conversions.Bson;
					public getUpdate(): org.bson.conversions.Bson;
					public constructor(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions);
					public getOptions(): com.mongodb.client.model.UpdateOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class UpdateOptions {
					public static class: java.lang.Class<com.mongodb.client.model.UpdateOptions>;
					public arrayFilters(param0: java.util.List<any>): com.mongodb.client.model.UpdateOptions;
					public toString(): string;
					public isUpsert(): boolean;
					public getArrayFilters(): java.util.List<any>;
					public constructor();
					public getCollation(): com.mongodb.client.model.Collation;
					public upsert(param0: boolean): com.mongodb.client.model.UpdateOptions;
					public getBypassDocumentValidation(): java.lang.Boolean;
					public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.client.model.UpdateOptions;
					public collation(param0: com.mongodb.client.model.Collation): com.mongodb.client.model.UpdateOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Updates {
					public static class: java.lang.Class<com.mongodb.client.model.Updates>;
					public static pullByFilter(param0: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static min(param0: string, param1: any): org.bson.conversions.Bson;
					public static push(param0: string, param1: any): org.bson.conversions.Bson;
					public static pushEach(param0: string, param1: java.util.List, param2: com.mongodb.client.model.PushOptions): org.bson.conversions.Bson;
					public static pullAll(param0: string, param1: java.util.List): org.bson.conversions.Bson;
					public static setOnInsert(param0: org.bson.conversions.Bson): org.bson.conversions.Bson;
					public static popLast(param0: string): org.bson.conversions.Bson;
					public static unset(param0: string): org.bson.conversions.Bson;
					public static addEachToSet(param0: string, param1: java.util.List): org.bson.conversions.Bson;
					public static set(param0: string, param1: any): org.bson.conversions.Bson;
					public static currentDate(param0: string): org.bson.conversions.Bson;
					public static bitwiseXor(param0: string, param1: number): org.bson.conversions.Bson;
					public static currentTimestamp(param0: string): org.bson.conversions.Bson;
					public static pushEach(param0: string, param1: java.util.List): org.bson.conversions.Bson;
					public static combine(param0: native.Array<org.bson.conversions.Bson>): org.bson.conversions.Bson;
					public static inc(param0: string, param1: java.lang.Number): org.bson.conversions.Bson;
					public static bitwiseOr(param0: string, param1: number): org.bson.conversions.Bson;
					public static popFirst(param0: string): org.bson.conversions.Bson;
					public static combine(param0: java.util.List<any>): org.bson.conversions.Bson;
					public static setOnInsert(param0: string, param1: any): org.bson.conversions.Bson;
					public static max(param0: string, param1: any): org.bson.conversions.Bson;
					public static rename(param0: string, param1: string): org.bson.conversions.Bson;
					public static mul(param0: string, param1: java.lang.Number): org.bson.conversions.Bson;
					public static addToSet(param0: string, param1: any): org.bson.conversions.Bson;
					public static bitwiseAnd(param0: string, param1: number): org.bson.conversions.Bson;
					public static pull(param0: string, param1: any): org.bson.conversions.Bson;
				}
				export module Updates {
					export class CompositeUpdate extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Updates.CompositeUpdate>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class PullAllUpdate<TItem>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Updates.PullAllUpdate<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class PushUpdate<TItem>  extends com.mongodb.client.model.Updates.WithEachUpdate<any> {
						public static class: java.lang.Class<com.mongodb.client.model.Updates.PushUpdate<any>>;
						public writeAdditionalFields(param0: org.bson.BsonDocumentWriter, param1: java.lang.Class, param2: org.bson.codecs.configuration.CodecRegistry): void;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public additionalFieldsToString(): string;
					}
					export class SimpleBsonKeyValue extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Updates.SimpleBsonKeyValue>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class SimpleUpdate<TItem>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Updates.SimpleUpdate<any>>;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public toString(): string;
					}
					export class WithEachUpdate<TItem>  extends org.bson.conversions.Bson {
						public static class: java.lang.Class<com.mongodb.client.model.Updates.WithEachUpdate<any>>;
						public writeAdditionalFields(param0: org.bson.BsonDocumentWriter, param1: java.lang.Class, param2: org.bson.codecs.configuration.CodecRegistry): void;
						public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
						public additionalFieldsToString(): string;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class ValidationAction {
					public static class: java.lang.Class<com.mongodb.client.model.ValidationAction>;
					public static ERROR: com.mongodb.client.model.ValidationAction;
					public static WARN: com.mongodb.client.model.ValidationAction;
					public getValue(): string;
					public static values(): native.Array<com.mongodb.client.model.ValidationAction>;
					public static valueOf(param0: string): com.mongodb.client.model.ValidationAction;
					public static fromString(param0: string): com.mongodb.client.model.ValidationAction;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class ValidationLevel {
					public static class: java.lang.Class<com.mongodb.client.model.ValidationLevel>;
					public static OFF: com.mongodb.client.model.ValidationLevel;
					public static STRICT: com.mongodb.client.model.ValidationLevel;
					public static MODERATE: com.mongodb.client.model.ValidationLevel;
					public getValue(): string;
					public static values(): native.Array<com.mongodb.client.model.ValidationLevel>;
					public static fromString(param0: string): com.mongodb.client.model.ValidationLevel;
					public static valueOf(param0: string): com.mongodb.client.model.ValidationLevel;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class ValidationOptions {
					public static class: java.lang.Class<com.mongodb.client.model.ValidationOptions>;
					public validationLevel(param0: com.mongodb.client.model.ValidationLevel): com.mongodb.client.model.ValidationOptions;
					public toString(): string;
					public getValidator(): org.bson.conversions.Bson;
					public validationAction(param0: com.mongodb.client.model.ValidationAction): com.mongodb.client.model.ValidationOptions;
					public constructor();
					public getValidationAction(): com.mongodb.client.model.ValidationAction;
					public getValidationLevel(): com.mongodb.client.model.ValidationLevel;
					public validator(param0: org.bson.conversions.Bson): com.mongodb.client.model.ValidationOptions;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export class Variable<TExpression>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.client.model.Variable<any>>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getName(): string;
					public getValue(): TExpression;
					public hashCode(): number;
					public constructor(param0: string, param1: TExpression);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export abstract class WriteModel<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.client.model.WriteModel<any>>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module changestream {
					export class ChangeStreamDocument<TDocument>  extends java.lang.Object {
						public static class: java.lang.Class<com.mongodb.client.model.changestream.ChangeStreamDocument<any>>;
						public getUpdateDescription(): com.mongodb.client.model.changestream.UpdateDescription;
						public static createCodec(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
						public getNamespaceDocument(): org.bson.BsonDocument;
						public constructor(param0: org.bson.BsonDocument, param1: com.mongodb.MongoNamespace, param2: TDocument, param3: org.bson.BsonDocument, param4: com.mongodb.client.model.changestream.OperationType, param5: com.mongodb.client.model.changestream.UpdateDescription);
						public getOperationType(): com.mongodb.client.model.changestream.OperationType;
						public getDatabaseName(): string;
						public getClusterTime(): org.bson.BsonTimestamp;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: org.bson.BsonDocument, param1: com.mongodb.MongoNamespace, param2: TDocument, param3: org.bson.BsonDocument, param4: org.bson.BsonTimestamp, param5: com.mongodb.client.model.changestream.OperationType, param6: com.mongodb.client.model.changestream.UpdateDescription);
						public getResumeToken(): org.bson.BsonDocument;
						public getFullDocument(): TDocument;
						public constructor(param0: org.bson.BsonDocument, param1: org.bson.BsonDocument, param2: TDocument, param3: org.bson.BsonDocument, param4: org.bson.BsonTimestamp, param5: com.mongodb.client.model.changestream.OperationType, param6: com.mongodb.client.model.changestream.UpdateDescription);
						public toString(): string;
						public getDocumentKey(): org.bson.BsonDocument;
						public getNamespace(): com.mongodb.MongoNamespace;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module changestream {
					export class ChangeStreamDocumentCodec<TResult>  extends org.bson.codecs.Codec<com.mongodb.client.model.changestream.ChangeStreamDocument<any>> {
						public static class: java.lang.Class<com.mongodb.client.model.changestream.ChangeStreamDocumentCodec<any>>;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
						public encode(param0: org.bson.BsonWriter, param1: com.mongodb.client.model.changestream.ChangeStreamDocument<any>, param2: org.bson.codecs.EncoderContext): void;
						public getEncoderClass(): java.lang.Class<com.mongodb.client.model.changestream.ChangeStreamDocument<any>>;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.client.model.changestream.ChangeStreamDocument<any>;
						public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
						public getEncoderClass(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module changestream {
					export class ChangeStreamLevel {
						public static class: java.lang.Class<com.mongodb.client.model.changestream.ChangeStreamLevel>;
						public static CLIENT: com.mongodb.client.model.changestream.ChangeStreamLevel;
						public static DATABASE: com.mongodb.client.model.changestream.ChangeStreamLevel;
						public static COLLECTION: com.mongodb.client.model.changestream.ChangeStreamLevel;
						public static values(): native.Array<com.mongodb.client.model.changestream.ChangeStreamLevel>;
						public static valueOf(param0: string): com.mongodb.client.model.changestream.ChangeStreamLevel;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module changestream {
					export class FullDocument {
						public static class: java.lang.Class<com.mongodb.client.model.changestream.FullDocument>;
						public static DEFAULT: com.mongodb.client.model.changestream.FullDocument;
						public static UPDATE_LOOKUP: com.mongodb.client.model.changestream.FullDocument;
						public static values(): native.Array<com.mongodb.client.model.changestream.FullDocument>;
						public static fromString(param0: string): com.mongodb.client.model.changestream.FullDocument;
						public getValue(): string;
						public static valueOf(param0: string): com.mongodb.client.model.changestream.FullDocument;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module changestream {
					export class OperationType {
						public static class: java.lang.Class<com.mongodb.client.model.changestream.OperationType>;
						public static INSERT: com.mongodb.client.model.changestream.OperationType;
						public static UPDATE: com.mongodb.client.model.changestream.OperationType;
						public static REPLACE: com.mongodb.client.model.changestream.OperationType;
						public static DELETE: com.mongodb.client.model.changestream.OperationType;
						public static INVALIDATE: com.mongodb.client.model.changestream.OperationType;
						public static DROP: com.mongodb.client.model.changestream.OperationType;
						public static DROP_DATABASE: com.mongodb.client.model.changestream.OperationType;
						public static RENAME: com.mongodb.client.model.changestream.OperationType;
						public static OTHER: com.mongodb.client.model.changestream.OperationType;
						public static fromString(param0: string): com.mongodb.client.model.changestream.OperationType;
						public static valueOf(param0: string): com.mongodb.client.model.changestream.OperationType;
						public static values(): native.Array<com.mongodb.client.model.changestream.OperationType>;
						public getValue(): string;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module changestream {
					export class OperationTypeCodec extends org.bson.codecs.Codec<com.mongodb.client.model.changestream.OperationType> {
						public static class: java.lang.Class<com.mongodb.client.model.changestream.OperationTypeCodec>;
						public getEncoderClass(): java.lang.Class<com.mongodb.client.model.changestream.OperationType>;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
						public encode(param0: org.bson.BsonWriter, param1: com.mongodb.client.model.changestream.OperationType, param2: org.bson.codecs.EncoderContext): void;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.client.model.changestream.OperationType;
						public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
						public getEncoderClass(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module changestream {
					export class UpdateDescription {
						public static class: java.lang.Class<com.mongodb.client.model.changestream.UpdateDescription>;
						public constructor(param0: java.util.List<string>, param1: org.bson.BsonDocument);
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getUpdatedFields(): org.bson.BsonDocument;
						public getRemovedFields(): java.util.List<string>;
						public toString(): string;
					}
				}
			}
		}
	}
}


declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export abstract class CoordinateReferenceSystem {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.CoordinateReferenceSystem>;
						public constructor();
						public getType(): com.mongodb.client.model.geojson.CoordinateReferenceSystemType;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class CoordinateReferenceSystemType {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.CoordinateReferenceSystemType>;
						public static NAME: com.mongodb.client.model.geojson.CoordinateReferenceSystemType;
						public static LINK: com.mongodb.client.model.geojson.CoordinateReferenceSystemType;
						public static values(): native.Array<com.mongodb.client.model.geojson.CoordinateReferenceSystemType>;
						public getTypeName(): string;
						public static valueOf(param0: string): com.mongodb.client.model.geojson.CoordinateReferenceSystemType;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class GeoJsonObjectType {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.GeoJsonObjectType>;
						public static GEOMETRY_COLLECTION: com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static LINE_STRING: com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static MULTI_LINE_STRING: com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static MULTI_POINT: com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static MULTI_POLYGON: com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static POINT: com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static POLYGON: com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static valueOf(param0: string): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public static values(): native.Array<com.mongodb.client.model.geojson.GeoJsonObjectType>;
						public getTypeName(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export abstract class Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.Geometry>;
						public constructor();
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getCoordinateReferenceSystem(): com.mongodb.client.model.geojson.CoordinateReferenceSystem;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public toJson(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class GeometryCollection extends com.mongodb.client.model.geojson.Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.GeometryCollection>;
						public constructor(param0: java.util.List<any>);
						public constructor();
						public getGeometries(): java.util.List<any>;
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem, param1: java.util.List<any>);
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class LineString extends com.mongodb.client.model.geojson.Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.LineString>;
						public constructor();
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem, param1: java.util.List<com.mongodb.client.model.geojson.Position>);
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public constructor(param0: java.util.List<com.mongodb.client.model.geojson.Position>);
						public toString(): string;
						public getCoordinates(): java.util.List<com.mongodb.client.model.geojson.Position>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class MultiLineString extends com.mongodb.client.model.geojson.Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.MultiLineString>;
						public constructor();
						public constructor(param0: java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>);
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem, param1: java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>);
						public getCoordinates(): java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class MultiPoint extends com.mongodb.client.model.geojson.Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.MultiPoint>;
						public constructor();
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem, param1: java.util.List<com.mongodb.client.model.geojson.Position>);
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public constructor(param0: java.util.List<com.mongodb.client.model.geojson.Position>);
						public toString(): string;
						public getCoordinates(): java.util.List<com.mongodb.client.model.geojson.Position>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class MultiPolygon extends com.mongodb.client.model.geojson.Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.MultiPolygon>;
						public constructor();
						public constructor(param0: java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>);
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem, param1: java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>);
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public getCoordinates(): java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class NamedCoordinateReferenceSystem extends com.mongodb.client.model.geojson.CoordinateReferenceSystem {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem>;
						public static EPSG_4326: com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem;
						public static CRS_84: com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem;
						public static EPSG_4326_STRICT_WINDING: com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem;
						public constructor();
						public getType(): com.mongodb.client.model.geojson.CoordinateReferenceSystemType;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getName(): string;
						public toString(): string;
						public constructor(param0: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class Point extends com.mongodb.client.model.geojson.Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.Point>;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem, param1: com.mongodb.client.model.geojson.Position);
						public constructor();
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public getCoordinates(): com.mongodb.client.model.geojson.Position;
						public constructor(param0: com.mongodb.client.model.geojson.Position);
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public getPosition(): com.mongodb.client.model.geojson.Position;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class Polygon extends com.mongodb.client.model.geojson.Geometry {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.Polygon>;
						public getCoordinates(): com.mongodb.client.model.geojson.PolygonCoordinates;
						public constructor();
						public getType(): com.mongodb.client.model.geojson.GeoJsonObjectType;
						public constructor(param0: java.util.List<com.mongodb.client.model.geojson.Position>, param1: native.Array<java.util.List<com.mongodb.client.model.geojson.Position>>);
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem, param1: com.mongodb.client.model.geojson.PolygonCoordinates);
						public constructor(param0: com.mongodb.client.model.geojson.CoordinateReferenceSystem);
						public constructor(param0: com.mongodb.client.model.geojson.PolygonCoordinates);
						public getExterior(): java.util.List<com.mongodb.client.model.geojson.Position>;
						public getHoles(): java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class PolygonCoordinates {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.PolygonCoordinates>;
						public constructor(param0: java.util.List<com.mongodb.client.model.geojson.Position>, param1: native.Array<java.util.List<com.mongodb.client.model.geojson.Position>>);
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getExterior(): java.util.List<com.mongodb.client.model.geojson.Position>;
						public getHoles(): java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export class Position {
						public static class: java.lang.Class<com.mongodb.client.model.geojson.Position>;
						public constructor(param0: java.util.List<java.lang.Double>);
						public getValues(): java.util.List<java.lang.Double>;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public constructor(param0: number, param1: number, param2: native.Array<number>);
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export abstract class AbstractGeometryCodec<T>  extends org.bson.codecs.Codec<any> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<any>>;
							public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
							public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
							public getEncoderClass(): java.lang.Class<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class GeoJsonCodecProvider extends org.bson.codecs.configuration.CodecProvider {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider>;
							public constructor();
							public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class GeometryCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.Geometry> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.GeometryCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class GeometryCollectionCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.GeometryCollection> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class GeometryDecoderHelper {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.GeometryDecoderHelper>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class GeometryEncoderHelper {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.GeometryEncoderHelper>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class LineStringCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.LineString> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.LineStringCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class MultiLineStringCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.MultiLineString> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.MultiLineStringCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class MultiPointCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.MultiPoint> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.MultiPointCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class MultiPolygonCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.MultiPolygon> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.MultiPolygonCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class NamedCoordinateReferenceSystemCodec extends org.bson.codecs.Codec<com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec>;
							public constructor();
							public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
							public getEncoderClass(): java.lang.Class<any>;
							public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
							public getEncoderClass(): java.lang.Class<com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem>;
							public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem;
							public encode(param0: org.bson.BsonWriter, param1: com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem, param2: org.bson.codecs.EncoderContext): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class PointCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.Point> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.PointCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module model {
				export module geojson {
					export module codecs {
						export class PolygonCodec extends com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec<com.mongodb.client.model.geojson.Polygon> {
							public static class: java.lang.Class<com.mongodb.client.model.geojson.codecs.PolygonCodec>;
							public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
						}
					}
				}
			}
		}
	}
}





declare module com {
	export module mongodb {
		export module client {
			export module result {
				export abstract class DeleteResult {
					public static class: java.lang.Class<com.mongodb.client.result.DeleteResult>;
					public static acknowledged(param0: number): com.mongodb.client.result.DeleteResult;
					public static unacknowledged(): com.mongodb.client.result.DeleteResult;
					public constructor();
					public wasAcknowledged(): boolean;
					public getDeletedCount(): number;
				}
				export module DeleteResult {
					export class AcknowledgedDeleteResult extends com.mongodb.client.result.DeleteResult {
						public static class: java.lang.Class<com.mongodb.client.result.DeleteResult.AcknowledgedDeleteResult>;
						public getDeletedCount(): number;
						public wasAcknowledged(): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
					}
					export class UnacknowledgedDeleteResult extends com.mongodb.client.result.DeleteResult {
						public static class: java.lang.Class<com.mongodb.client.result.DeleteResult.UnacknowledgedDeleteResult>;
						public getDeletedCount(): number;
						public wasAcknowledged(): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module client {
			export module result {
				export abstract class UpdateResult {
					public static class: java.lang.Class<com.mongodb.client.result.UpdateResult>;
					public getUpsertedId(): org.bson.BsonValue;
					public constructor();
					public getModifiedCount(): number;
					public isModifiedCountAvailable(): boolean;
					public wasAcknowledged(): boolean;
					public static acknowledged(param0: number, param1: java.lang.Long, param2: org.bson.BsonValue): com.mongodb.client.result.UpdateResult;
					public static unacknowledged(): com.mongodb.client.result.UpdateResult;
					public getMatchedCount(): number;
				}
				export module UpdateResult {
					export class AcknowledgedUpdateResult extends com.mongodb.client.result.UpdateResult {
						public static class: java.lang.Class<com.mongodb.client.result.UpdateResult.AcknowledgedUpdateResult>;
						public getUpsertedId(): org.bson.BsonValue;
						public isModifiedCountAvailable(): boolean;
						public wasAcknowledged(): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getModifiedCount(): number;
						public toString(): string;
						public getMatchedCount(): number;
					}
					export class UnacknowledgedUpdateResult extends com.mongodb.client.result.UpdateResult {
						public static class: java.lang.Class<com.mongodb.client.result.UpdateResult.UnacknowledgedUpdateResult>;
						public getUpsertedId(): org.bson.BsonValue;
						public isModifiedCountAvailable(): boolean;
						public wasAcknowledged(): boolean;
						public equals(param0: any): boolean;
						public hashCode(): number;
						public getModifiedCount(): number;
						public toString(): string;
						public getMatchedCount(): number;
					}
				}
			}
		}
	}
}


declare module com {
	export module mongodb {
		export module connection {
			export class AsyncCompletionHandler<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.connection.AsyncCompletionHandler<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.AsyncCompletionHandler<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					completed(param0: T): void;
					failed(param0: java.lang.Throwable): void;
				});
				public constructor();
				public failed(param0: java.lang.Throwable): void;
				public completed(param0: T): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class AsyncConnection extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.connection.AsyncConnection>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.AsyncConnection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					retain(): com.mongodb.connection.AsyncConnection;
					getDescription(): com.mongodb.connection.ConnectionDescription;
					insertAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.InsertRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					updateAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.UpdateRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					deleteAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.DeleteRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					commandAsync(param0: string, param1: org.bson.BsonDocument, param2: boolean, param3: org.bson.FieldNameValidator, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.async.SingleResultCallback<any>): void;
					commandAsync(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: com.mongodb.async.SingleResultCallback<any>): void;
					commandAsync(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: boolean, param7: com.mongodb.connection.SplittablePayload, param8: org.bson.FieldNameValidator, param9: com.mongodb.async.SingleResultCallback<any>): void;
					queryAsync(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: boolean, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: org.bson.codecs.Decoder<any>, param12: com.mongodb.async.SingleResultCallback<any>): void;
					queryAsync(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: number, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: boolean, param12: org.bson.codecs.Decoder<any>, param13: com.mongodb.async.SingleResultCallback<any>): void;
					getMoreAsync(param0: com.mongodb.MongoNamespace, param1: number, param2: number, param3: org.bson.codecs.Decoder<any>, param4: com.mongodb.async.SingleResultCallback<any>): void;
					killCursorAsync(param0: java.util.List<java.lang.Long>, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					killCursorAsync(param0: com.mongodb.MongoNamespace, param1: java.util.List<java.lang.Long>, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public getDescription(): com.mongodb.connection.ConnectionDescription;
				public queryAsync(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: number, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: boolean, param12: org.bson.codecs.Decoder<any>, param13: com.mongodb.async.SingleResultCallback<any>): void;
				public release(): void;
				public updateAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.UpdateRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				public getMoreAsync(param0: com.mongodb.MongoNamespace, param1: number, param2: number, param3: org.bson.codecs.Decoder<any>, param4: com.mongodb.async.SingleResultCallback<any>): void;
				public retain(): com.mongodb.connection.AsyncConnection;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public killCursorAsync(param0: com.mongodb.MongoNamespace, param1: java.util.List<java.lang.Long>, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public getCount(): number;
				public commandAsync(param0: string, param1: org.bson.BsonDocument, param2: boolean, param3: org.bson.FieldNameValidator, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.async.SingleResultCallback<any>): void;
				public queryAsync(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: boolean, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: org.bson.codecs.Decoder<any>, param12: com.mongodb.async.SingleResultCallback<any>): void;
				public insertAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.InsertRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				public killCursorAsync(param0: java.util.List<java.lang.Long>, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public deleteAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.DeleteRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				public commandAsync(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: com.mongodb.async.SingleResultCallback<any>): void;
				public commandAsync(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: boolean, param7: com.mongodb.connection.SplittablePayload, param8: org.bson.FieldNameValidator, param9: com.mongodb.async.SingleResultCallback<any>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class AsynchronousSocketChannelStreamFactory extends com.mongodb.connection.StreamFactory {
				public static class: java.lang.Class<com.mongodb.connection.AsynchronousSocketChannelStreamFactory>;
				public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings, param2: java.nio.channels.AsynchronousChannelGroup);
				public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings);
				public create(param0: com.mongodb.ServerAddress): com.mongodb.connection.Stream;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class AsynchronousSocketChannelStreamFactoryFactory extends com.mongodb.connection.StreamFactoryFactory {
				public static class: java.lang.Class<com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory>;
				public static builder(): com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory.Builder;
				public create(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings): com.mongodb.connection.StreamFactory;
				public constructor();
			}
			export module AsynchronousSocketChannelStreamFactoryFactory {
				export class Builder {
					public static class: java.lang.Class<com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory.Builder>;
					public build(): com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory;
					public constructor();
					public group(param0: java.nio.channels.AsynchronousChannelGroup): com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory.Builder;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class BufferProvider {
				public static class: java.lang.Class<com.mongodb.connection.BufferProvider>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.BufferProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getBuffer(param0: number): org.bson.ByteBuf;
				});
				public constructor();
				public getBuffer(param0: number): org.bson.ByteBuf;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class BulkWriteBatchCombiner {
				public static class: java.lang.Class<com.mongodb.connection.BulkWriteBatchCombiner>;
				public shouldStopSendingMoreBatches(): boolean;
				public addErrorResult(param0: java.util.List<com.mongodb.bulk.BulkWriteError>, param1: com.mongodb.bulk.WriteConcernError, param2: com.mongodb.internal.connection.IndexMap): void;
				public addWriteErrorResult(param0: com.mongodb.bulk.BulkWriteError, param1: com.mongodb.internal.connection.IndexMap): void;
				public getResult(): com.mongodb.bulk.BulkWriteResult;
				public addResult(param0: com.mongodb.bulk.BulkWriteResult, param1: com.mongodb.internal.connection.IndexMap): void;
				public addErrorResult(param0: com.mongodb.MongoBulkWriteException, param1: com.mongodb.internal.connection.IndexMap): void;
				public hasErrors(): boolean;
				public getError(): com.mongodb.MongoBulkWriteException;
				public constructor(param0: com.mongodb.ServerAddress, param1: boolean, param2: com.mongodb.WriteConcern);
				public addWriteConcernErrorResult(param0: com.mongodb.bulk.WriteConcernError): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ByteBufferBsonOutput extends org.bson.io.OutputBuffer {
				public static class: java.lang.Class<com.mongodb.connection.ByteBufferBsonOutput>;
				public static INITIAL_BUFFER_SIZE: number;
				public static MAX_BUFFER_SIZE: number;
				public write(param0: number, param1: number): void;
				public close(): void;
				public write(param0: native.Array<number>, param1: number, param2: number): void;
				public writeInt32(param0: number, param1: number): void;
				public write(param0: native.Array<number>): void;
				public writeDouble(param0: number): void;
				public writeInt64(param0: number): void;
				public writeBytes(param0: native.Array<number>, param1: number, param2: number): void;
				public getPosition(): number;
				public writeObjectId(param0: org.bson.types.ObjectId): void;
				public constructor();
				public getByteBuffers(): java.util.List<org.bson.ByteBuf>;
				public constructor(param0: com.mongodb.connection.BufferProvider);
				public write(param0: number): void;
				public writeString(param0: string): void;
				public getSize(): number;
				public writeBytes(param0: native.Array<number>): void;
				public pipe(param0: java.io.OutputStream): number;
				public writeCString(param0: string): void;
				public writeInt32(param0: number): void;
				public writeByte(param0: number): void;
				public truncateToPosition(param0: number): void;
			}
			export module ByteBufferBsonOutput {
				export class BufferPositionPair {
					public static class: java.lang.Class<com.mongodb.connection.ByteBufferBsonOutput.BufferPositionPair>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class Cluster {
				public static class: java.lang.Class<com.mongodb.connection.Cluster>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.Cluster interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getSettings(): com.mongodb.connection.ClusterSettings;
					getDescription(): com.mongodb.connection.ClusterDescription;
					getCurrentDescription(): com.mongodb.connection.ClusterDescription;
					getClusterTime(): org.bson.BsonTimestamp;
					selectServer(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.Server;
					selectServerAsync(param0: com.mongodb.selector.ServerSelector, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>): void;
					close(): void;
					isClosed(): boolean;
				});
				public constructor();
				public getClusterTime(): org.bson.BsonTimestamp;
				public selectServerAsync(param0: com.mongodb.selector.ServerSelector, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>): void;
				public close(): void;
				public getCurrentDescription(): com.mongodb.connection.ClusterDescription;
				public getSettings(): com.mongodb.connection.ClusterSettings;
				public selectServer(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.Server;
				public isClosed(): boolean;
				public getDescription(): com.mongodb.connection.ClusterDescription;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ClusterConnectionMode {
				public static class: java.lang.Class<com.mongodb.connection.ClusterConnectionMode>;
				public static SINGLE: com.mongodb.connection.ClusterConnectionMode;
				public static MULTIPLE: com.mongodb.connection.ClusterConnectionMode;
				public static valueOf(param0: string): com.mongodb.connection.ClusterConnectionMode;
				public static values(): native.Array<com.mongodb.connection.ClusterConnectionMode>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ClusterDescription {
				public static class: java.lang.Class<com.mongodb.connection.ClusterDescription>;
				public hasReadableServer(param0: com.mongodb.ReadPreference): boolean;
				public getAny(): java.util.List<com.mongodb.connection.ServerDescription>;
				public getAnyPrimaryOrSecondary(): java.util.List<com.mongodb.connection.ServerDescription>;
				public getSrvResolutionException(): com.mongodb.MongoException;
				public getAnyPrimaryOrSecondary(param0: com.mongodb.TagSet): java.util.List<com.mongodb.connection.ServerDescription>;
				public findServerIncompatiblyNewerThanDriver(): com.mongodb.connection.ServerDescription;
				public isCompatibleWithDriver(): boolean;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public hasWritableServer(): boolean;
				public getAll(): java.util.Set<com.mongodb.connection.ServerDescription>;
				public getServerSettings(): com.mongodb.connection.ServerSettings;
				public constructor(param0: com.mongodb.connection.ClusterConnectionMode, param1: com.mongodb.connection.ClusterType, param2: java.util.List<com.mongodb.connection.ServerDescription>, param3: com.mongodb.connection.ClusterSettings, param4: com.mongodb.connection.ServerSettings);
				public getShortDescription(): string;
				public findServerIncompatiblyOlderThanDriver(): com.mongodb.connection.ServerDescription;
				public getConnectionMode(): com.mongodb.connection.ClusterConnectionMode;
				public getLogicalSessionTimeoutMinutes(): java.lang.Integer;
				public getPrimaries(): java.util.List<com.mongodb.connection.ServerDescription>;
				public toString(): string;
				public getType(): com.mongodb.connection.ClusterType;
				public getSecondaries(): java.util.List<com.mongodb.connection.ServerDescription>;
				public getServerDescriptions(): java.util.List<com.mongodb.connection.ServerDescription>;
				public constructor(param0: com.mongodb.connection.ClusterConnectionMode, param1: com.mongodb.connection.ClusterType, param2: java.util.List<com.mongodb.connection.ServerDescription>);
				public constructor(param0: com.mongodb.connection.ClusterConnectionMode, param1: com.mongodb.connection.ClusterType, param2: com.mongodb.MongoException, param3: java.util.List<com.mongodb.connection.ServerDescription>, param4: com.mongodb.connection.ClusterSettings, param5: com.mongodb.connection.ServerSettings);
				public getSecondaries(param0: com.mongodb.TagSet): java.util.List<com.mongodb.connection.ServerDescription>;
				public getClusterSettings(): com.mongodb.connection.ClusterSettings;
				public getByServerAddress(param0: com.mongodb.ServerAddress): com.mongodb.connection.ServerDescription;
			}
			export module ClusterDescription {
				export class Predicate {
					public static class: java.lang.Class<com.mongodb.connection.ClusterDescription.Predicate>;
					/**
					 * Constructs a new instance of the com.mongodb.connection.ClusterDescription$Predicate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						apply(param0: com.mongodb.connection.ServerDescription): boolean;
					});
					public constructor();
					public apply(param0: com.mongodb.connection.ServerDescription): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ClusterFactory {
				public static class: java.lang.Class<com.mongodb.connection.ClusterFactory>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.ClusterFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					create(param0: com.mongodb.connection.ClusterSettings, param1: com.mongodb.connection.ServerSettings, param2: com.mongodb.connection.ConnectionPoolSettings, param3: com.mongodb.connection.StreamFactory, param4: com.mongodb.connection.StreamFactory, param5: java.util.List<com.mongodb.MongoCredential>, param6: com.mongodb.event.ClusterListener, param7: com.mongodb.event.ConnectionPoolListener, param8: com.mongodb.event.ConnectionListener): com.mongodb.connection.Cluster;
				});
				public constructor();
				public create(param0: com.mongodb.connection.ClusterSettings, param1: com.mongodb.connection.ServerSettings, param2: com.mongodb.connection.ConnectionPoolSettings, param3: com.mongodb.connection.StreamFactory, param4: com.mongodb.connection.StreamFactory, param5: java.util.List<com.mongodb.MongoCredential>, param6: com.mongodb.event.ClusterListener, param7: com.mongodb.event.ConnectionPoolListener, param8: com.mongodb.event.ConnectionListener): com.mongodb.connection.Cluster;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ClusterId {
				public static class: java.lang.Class<com.mongodb.connection.ClusterId>;
				public hashCode(): number;
				public getValue(): string;
				public equals(param0: any): boolean;
				public getDescription(): string;
				public toString(): string;
				public constructor(param0: string);
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ClusterSettings {
				public static class: java.lang.Class<com.mongodb.connection.ClusterSettings>;
				public getShortDescription(): string;
				public getHosts(): java.util.List<com.mongodb.ServerAddress>;
				public getRequiredClusterType(): com.mongodb.connection.ClusterType;
				public getServerSelector(): com.mongodb.selector.ServerSelector;
				public getDescription(): string;
				public getMaxWaitQueueSize(): number;
				public getRequiredReplicaSetName(): string;
				public toString(): string;
				public getLocalThreshold(param0: java.util.concurrent.TimeUnit): number;
				public static builder(param0: com.mongodb.connection.ClusterSettings): com.mongodb.connection.ClusterSettings.Builder;
				public getServerSelectionTimeout(param0: java.util.concurrent.TimeUnit): number;
				public hashCode(): number;
				public getSrvHost(): string;
				public equals(param0: any): boolean;
				public static builder(): com.mongodb.connection.ClusterSettings.Builder;
				public getMode(): com.mongodb.connection.ClusterConnectionMode;
				public getClusterListeners(): java.util.List<com.mongodb.event.ClusterListener>;
			}
			export module ClusterSettings {
				export class Builder {
					public static class: java.lang.Class<com.mongodb.connection.ClusterSettings.Builder>;
					public requiredReplicaSetName(param0: string): com.mongodb.connection.ClusterSettings.Builder;
					public localThreshold(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ClusterSettings.Builder;
					public description(param0: string): com.mongodb.connection.ClusterSettings.Builder;
					public serverSelector(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.ClusterSettings.Builder;
					public hosts(param0: java.util.List<com.mongodb.ServerAddress>): com.mongodb.connection.ClusterSettings.Builder;
					public requiredClusterType(param0: com.mongodb.connection.ClusterType): com.mongodb.connection.ClusterSettings.Builder;
					public applyConnectionString(param0: com.mongodb.ConnectionString): com.mongodb.connection.ClusterSettings.Builder;
					public srvHost(param0: string): com.mongodb.connection.ClusterSettings.Builder;
					public serverSelectionTimeout(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ClusterSettings.Builder;
					public mode(param0: com.mongodb.connection.ClusterConnectionMode): com.mongodb.connection.ClusterSettings.Builder;
					public build(): com.mongodb.connection.ClusterSettings;
					public maxWaitQueueSize(param0: number): com.mongodb.connection.ClusterSettings.Builder;
					public applySettings(param0: com.mongodb.connection.ClusterSettings): com.mongodb.connection.ClusterSettings.Builder;
					public addClusterListener(param0: com.mongodb.event.ClusterListener): com.mongodb.connection.ClusterSettings.Builder;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ClusterType {
				public static class: java.lang.Class<com.mongodb.connection.ClusterType>;
				public static STANDALONE: com.mongodb.connection.ClusterType;
				public static REPLICA_SET: com.mongodb.connection.ClusterType;
				public static SHARDED: com.mongodb.connection.ClusterType;
				public static UNKNOWN: com.mongodb.connection.ClusterType;
				public static values(): native.Array<com.mongodb.connection.ClusterType>;
				public static valueOf(param0: string): com.mongodb.connection.ClusterType;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class Connection extends com.mongodb.binding.ReferenceCounted {
				public static class: java.lang.Class<com.mongodb.connection.Connection>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.Connection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					retain(): com.mongodb.connection.Connection;
					getDescription(): com.mongodb.connection.ConnectionDescription;
					insert(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.InsertRequest): com.mongodb.WriteConcernResult;
					update(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.UpdateRequest): com.mongodb.WriteConcernResult;
					delete(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.DeleteRequest): com.mongodb.WriteConcernResult;
					command(param0: string, param1: org.bson.BsonDocument, param2: boolean, param3: org.bson.FieldNameValidator, param4: org.bson.codecs.Decoder<any>): any;
					command(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext): any;
					command(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: boolean, param7: com.mongodb.connection.SplittablePayload, param8: org.bson.FieldNameValidator): any;
					query(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: boolean, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
					query(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: number, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: boolean, param12: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
					getMore(param0: com.mongodb.MongoNamespace, param1: number, param2: number, param3: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
					killCursor(param0: java.util.List<java.lang.Long>): void;
					killCursor(param0: com.mongodb.MongoNamespace, param1: java.util.List<java.lang.Long>): void;
					getCount(): number;
					retain(): com.mongodb.binding.ReferenceCounted;
					release(): void;
				});
				public constructor();
				public getDescription(): com.mongodb.connection.ConnectionDescription;
				public command(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: boolean, param7: com.mongodb.connection.SplittablePayload, param8: org.bson.FieldNameValidator): any;
				public release(): void;
				public query(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: number, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: boolean, param12: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
				public retain(): com.mongodb.binding.ReferenceCounted;
				public getMore(param0: com.mongodb.MongoNamespace, param1: number, param2: number, param3: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
				public getCount(): number;
				public command(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext): any;
				public killCursor(param0: com.mongodb.MongoNamespace, param1: java.util.List<java.lang.Long>): void;
				public delete(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.DeleteRequest): com.mongodb.WriteConcernResult;
				public query(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: boolean, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
				public retain(): com.mongodb.connection.Connection;
				public insert(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.InsertRequest): com.mongodb.WriteConcernResult;
				public command(param0: string, param1: org.bson.BsonDocument, param2: boolean, param3: org.bson.FieldNameValidator, param4: org.bson.codecs.Decoder<any>): any;
				public killCursor(param0: java.util.List<java.lang.Long>): void;
				public update(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.UpdateRequest): com.mongodb.WriteConcernResult;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ConnectionDescription {
				public static class: java.lang.Class<com.mongodb.connection.ConnectionDescription>;
				public getMaxMessageSize(): number;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: com.mongodb.connection.ServerVersion, param2: com.mongodb.connection.ServerType, param3: number, param4: number, param5: number);
				public getMaxDocumentSize(): number;
				public static getDefaultMaxMessageSize(): number;
				public constructor(param0: com.mongodb.connection.ServerId);
				public getServerAddress(): com.mongodb.ServerAddress;
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: com.mongodb.connection.ServerVersion, param2: number, param3: com.mongodb.connection.ServerType, param4: number, param5: number, param6: number, param7: java.util.List<string>);
				public toString(): string;
				public getMaxBatchCount(): number;
				public getMaxWireVersion(): number;
				public withConnectionId(param0: com.mongodb.connection.ConnectionId): com.mongodb.connection.ConnectionDescription;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: com.mongodb.connection.ServerVersion, param2: com.mongodb.connection.ServerType, param3: number, param4: number, param5: number, param6: java.util.List<string>);
				public getServerType(): com.mongodb.connection.ServerType;
				public hashCode(): number;
				public getServerVersion(): com.mongodb.connection.ServerVersion;
				public equals(param0: any): boolean;
				public static getDefaultMaxWriteBatchSize(): number;
				public getCompressors(): java.util.List<string>;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: number, param2: com.mongodb.connection.ServerType, param3: number, param4: number, param5: number, param6: java.util.List<string>);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ConnectionId {
				public static class: java.lang.Class<com.mongodb.connection.ConnectionId>;
				public withServerValue(param0: number): com.mongodb.connection.ConnectionId;
				public getServerId(): com.mongodb.connection.ServerId;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: com.mongodb.connection.ServerId);
				public toString(): string;
				public getLocalValue(): number;
				public getServerValue(): java.lang.Integer;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ConnectionPoolSettings {
				public static class: java.lang.Class<com.mongodb.connection.ConnectionPoolSettings>;
				public getMaxConnectionLifeTime(param0: java.util.concurrent.TimeUnit): number;
				public static builder(param0: com.mongodb.connection.ConnectionPoolSettings): com.mongodb.connection.ConnectionPoolSettings.Builder;
				public getMaxWaitQueueSize(): number;
				public getMinSize(): number;
				public toString(): string;
				public static builder(): com.mongodb.connection.ConnectionPoolSettings.Builder;
				public getMaintenanceInitialDelay(param0: java.util.concurrent.TimeUnit): number;
				public getMaxWaitTime(param0: java.util.concurrent.TimeUnit): number;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getConnectionPoolListeners(): java.util.List<com.mongodb.event.ConnectionPoolListener>;
				public getMaxSize(): number;
				public getMaxConnectionIdleTime(param0: java.util.concurrent.TimeUnit): number;
				public getMaintenanceFrequency(param0: java.util.concurrent.TimeUnit): number;
			}
			export module ConnectionPoolSettings {
				export class Builder {
					public static class: java.lang.Class<com.mongodb.connection.ConnectionPoolSettings.Builder>;
					public maxWaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public maxSize(param0: number): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public maxConnectionLifeTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public build(): com.mongodb.connection.ConnectionPoolSettings;
					public applySettings(param0: com.mongodb.connection.ConnectionPoolSettings): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public minSize(param0: number): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public maxWaitQueueSize(param0: number): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public addConnectionPoolListener(param0: com.mongodb.event.ConnectionPoolListener): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public maxConnectionIdleTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public applyConnectionString(param0: com.mongodb.ConnectionString): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public maintenanceInitialDelay(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ConnectionPoolSettings.Builder;
					public maintenanceFrequency(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ConnectionPoolSettings.Builder;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class DefaultClusterFactory extends com.mongodb.connection.ClusterFactory {
				public static class: java.lang.Class<com.mongodb.connection.DefaultClusterFactory>;
				public create(param0: com.mongodb.connection.ClusterSettings, param1: com.mongodb.connection.ServerSettings, param2: com.mongodb.connection.ConnectionPoolSettings, param3: com.mongodb.connection.StreamFactory, param4: com.mongodb.connection.StreamFactory, param5: java.util.List<com.mongodb.MongoCredential>, param6: com.mongodb.event.ClusterListener, param7: com.mongodb.event.ConnectionPoolListener, param8: com.mongodb.event.ConnectionListener): com.mongodb.connection.Cluster;
				public create(param0: com.mongodb.connection.ClusterSettings, param1: com.mongodb.connection.ServerSettings, param2: com.mongodb.connection.ConnectionPoolSettings, param3: com.mongodb.connection.StreamFactory, param4: com.mongodb.connection.StreamFactory, param5: java.util.List<com.mongodb.MongoCredential>, param6: com.mongodb.event.ClusterListener, param7: com.mongodb.event.ConnectionPoolListener, param8: com.mongodb.event.ConnectionListener, param9: com.mongodb.event.CommandListener, param10: string, param11: com.mongodb.MongoDriverInformation): com.mongodb.connection.Cluster;
				public createCluster(param0: com.mongodb.connection.ClusterSettings, param1: com.mongodb.connection.ServerSettings, param2: com.mongodb.connection.ConnectionPoolSettings, param3: com.mongodb.connection.StreamFactory, param4: com.mongodb.connection.StreamFactory, param5: java.util.List<com.mongodb.MongoCredential>, param6: com.mongodb.event.CommandListener, param7: string, param8: com.mongodb.MongoDriverInformation, param9: java.util.List<com.mongodb.MongoCompressor>): com.mongodb.connection.Cluster;
				public create(param0: com.mongodb.connection.ClusterSettings, param1: com.mongodb.connection.ServerSettings, param2: com.mongodb.connection.ConnectionPoolSettings, param3: com.mongodb.connection.StreamFactory, param4: com.mongodb.connection.StreamFactory, param5: java.util.List<com.mongodb.MongoCredential>, param6: com.mongodb.event.ClusterListener, param7: com.mongodb.event.ConnectionPoolListener, param8: com.mongodb.event.ConnectionListener, param9: com.mongodb.event.CommandListener): com.mongodb.connection.Cluster;
				public createCluster(param0: com.mongodb.connection.ClusterSettings, param1: com.mongodb.connection.ServerSettings, param2: com.mongodb.connection.ConnectionPoolSettings, param3: com.mongodb.connection.StreamFactory, param4: com.mongodb.connection.StreamFactory, param5: java.util.List<com.mongodb.MongoCredential>, param6: com.mongodb.event.CommandListener, param7: string, param8: com.mongodb.MongoDriverInformation): com.mongodb.connection.Cluster;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class QueryResult<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.connection.QueryResult<any>>;
				public getCursor(): com.mongodb.ServerCursor;
				public getNamespace(): com.mongodb.MongoNamespace;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<T>, param2: number, param3: com.mongodb.ServerAddress);
				public getAddress(): com.mongodb.ServerAddress;
				public getResults(): java.util.List<T>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class Server {
				public static class: java.lang.Class<com.mongodb.connection.Server>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.Server interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getDescription(): com.mongodb.connection.ServerDescription;
					getConnection(): com.mongodb.connection.Connection;
					getConnectionAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
				});
				public constructor();
				public getDescription(): com.mongodb.connection.ServerDescription;
				public getConnectionAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
				public getConnection(): com.mongodb.connection.Connection;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ServerConnectionState {
				public static class: java.lang.Class<com.mongodb.connection.ServerConnectionState>;
				public static CONNECTING: com.mongodb.connection.ServerConnectionState;
				public static CONNECTED: com.mongodb.connection.ServerConnectionState;
				public static valueOf(param0: string): com.mongodb.connection.ServerConnectionState;
				public static values(): native.Array<com.mongodb.connection.ServerConnectionState>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ServerDescription {
				public static class: java.lang.Class<com.mongodb.connection.ServerDescription>;
				public static MIN_DRIVER_SERVER_VERSION: string;
				public static MIN_DRIVER_WIRE_VERSION: number;
				public static MAX_DRIVER_WIRE_VERSION: number;
				public getMinWireVersion(): number;
				public getCanonicalAddress(): string;
				public getPrimary(): string;
				public getType(): com.mongodb.connection.ServerType;
				public getPassives(): java.util.Set<string>;
				public getHosts(): java.util.Set<string>;
				public isShardRouter(): boolean;
				public isReplicaSetMember(): boolean;
				public isCompatibleWithDriver(): boolean;
				public getAddress(): com.mongodb.ServerAddress;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public isIncompatiblyOlderThanDriver(): boolean;
				public static getDefaultMaxWireVersion(): number;
				public isOk(): boolean;
				public getRoundTripTimeNanos(): number;
				public getLastWriteDate(): java.util.Date;
				public isIncompatiblyNewerThanDriver(): boolean;
				public hasTags(param0: com.mongodb.TagSet): boolean;
				public getClusterType(): com.mongodb.connection.ClusterType;
				public getShortDescription(): string;
				public getLogicalSessionTimeoutMinutes(): java.lang.Integer;
				public getMaxDocumentSize(): number;
				public isStandAlone(): boolean;
				public toString(): string;
				public static getDefaultMinWireVersion(): number;
				public getVersion(): com.mongodb.connection.ServerVersion;
				public getArbiters(): java.util.Set<string>;
				public getMaxWireVersion(): number;
				public getState(): com.mongodb.connection.ServerConnectionState;
				public getElectionId(): org.bson.types.ObjectId;
				public getTagSet(): com.mongodb.TagSet;
				public getSetName(): string;
				public static getDefaultMaxDocumentSize(): number;
				public getLastUpdateTime(param0: java.util.concurrent.TimeUnit): number;
				public getException(): java.lang.Throwable;
				public static builder(): com.mongodb.connection.ServerDescription.Builder;
				public isSecondary(): boolean;
				public getSetVersion(): java.lang.Integer;
				public isPrimary(): boolean;
			}
			export module ServerDescription {
				export class Builder {
					public static class: java.lang.Class<com.mongodb.connection.ServerDescription.Builder>;
					public lastWriteDate(param0: java.util.Date): com.mongodb.connection.ServerDescription.Builder;
					public build(): com.mongodb.connection.ServerDescription;
					public setName(param0: string): com.mongodb.connection.ServerDescription.Builder;
					public primary(param0: string): com.mongodb.connection.ServerDescription.Builder;
					public hosts(param0: java.util.Set<string>): com.mongodb.connection.ServerDescription.Builder;
					public ok(param0: boolean): com.mongodb.connection.ServerDescription.Builder;
					public setVersion(param0: java.lang.Integer): com.mongodb.connection.ServerDescription.Builder;
					public type(param0: com.mongodb.connection.ServerType): com.mongodb.connection.ServerDescription.Builder;
					public lastUpdateTimeNanos(param0: number): com.mongodb.connection.ServerDescription.Builder;
					public exception(param0: java.lang.Throwable): com.mongodb.connection.ServerDescription.Builder;
					public tagSet(param0: com.mongodb.TagSet): com.mongodb.connection.ServerDescription.Builder;
					public maxWireVersion(param0: number): com.mongodb.connection.ServerDescription.Builder;
					public constructor();
					public version(param0: com.mongodb.connection.ServerVersion): com.mongodb.connection.ServerDescription.Builder;
					public address(param0: com.mongodb.ServerAddress): com.mongodb.connection.ServerDescription.Builder;
					public minWireVersion(param0: number): com.mongodb.connection.ServerDescription.Builder;
					public logicalSessionTimeoutMinutes(param0: java.lang.Integer): com.mongodb.connection.ServerDescription.Builder;
					public electionId(param0: org.bson.types.ObjectId): com.mongodb.connection.ServerDescription.Builder;
					public arbiters(param0: java.util.Set<string>): com.mongodb.connection.ServerDescription.Builder;
					public passives(param0: java.util.Set<string>): com.mongodb.connection.ServerDescription.Builder;
					public canonicalAddress(param0: string): com.mongodb.connection.ServerDescription.Builder;
					public maxDocumentSize(param0: number): com.mongodb.connection.ServerDescription.Builder;
					public state(param0: com.mongodb.connection.ServerConnectionState): com.mongodb.connection.ServerDescription.Builder;
					public roundTripTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ServerDescription.Builder;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ServerId {
				public static class: java.lang.Class<com.mongodb.connection.ServerId>;
				public getAddress(): com.mongodb.ServerAddress;
				public hashCode(): number;
				public getClusterId(): com.mongodb.connection.ClusterId;
				public equals(param0: any): boolean;
				public constructor(param0: com.mongodb.connection.ClusterId, param1: com.mongodb.ServerAddress);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ServerSettings {
				public static class: java.lang.Class<com.mongodb.connection.ServerSettings>;
				public getHeartbeatFrequency(param0: java.util.concurrent.TimeUnit): number;
				public getMinHeartbeatFrequency(param0: java.util.concurrent.TimeUnit): number;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getServerListeners(): java.util.List<com.mongodb.event.ServerListener>;
				public static builder(param0: com.mongodb.connection.ServerSettings): com.mongodb.connection.ServerSettings.Builder;
				public getServerMonitorListeners(): java.util.List<com.mongodb.event.ServerMonitorListener>;
				public toString(): string;
				public static builder(): com.mongodb.connection.ServerSettings.Builder;
			}
			export module ServerSettings {
				export class Builder {
					public static class: java.lang.Class<com.mongodb.connection.ServerSettings.Builder>;
					public applySettings(param0: com.mongodb.connection.ServerSettings): com.mongodb.connection.ServerSettings.Builder;
					public addServerMonitorListener(param0: com.mongodb.event.ServerMonitorListener): com.mongodb.connection.ServerSettings.Builder;
					public applyConnectionString(param0: com.mongodb.ConnectionString): com.mongodb.connection.ServerSettings.Builder;
					public addServerListener(param0: com.mongodb.event.ServerListener): com.mongodb.connection.ServerSettings.Builder;
					public minHeartbeatFrequency(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ServerSettings.Builder;
					public build(): com.mongodb.connection.ServerSettings;
					public heartbeatFrequency(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.ServerSettings.Builder;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export abstract class ServerType {
				public static class: java.lang.Class<com.mongodb.connection.ServerType>;
				public static STANDALONE: com.mongodb.connection.ServerType;
				public static REPLICA_SET_PRIMARY: com.mongodb.connection.ServerType;
				public static REPLICA_SET_SECONDARY: com.mongodb.connection.ServerType;
				public static REPLICA_SET_ARBITER: com.mongodb.connection.ServerType;
				public static REPLICA_SET_OTHER: com.mongodb.connection.ServerType;
				public static REPLICA_SET_GHOST: com.mongodb.connection.ServerType;
				public static SHARD_ROUTER: com.mongodb.connection.ServerType;
				public static UNKNOWN: com.mongodb.connection.ServerType;
				public getClusterType(): com.mongodb.connection.ClusterType;
				public static values(): native.Array<com.mongodb.connection.ServerType>;
				public static valueOf(param0: string): com.mongodb.connection.ServerType;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class ServerVersion extends java.lang.Comparable<com.mongodb.connection.ServerVersion> {
				public static class: java.lang.Class<com.mongodb.connection.ServerVersion>;
				public constructor(param0: number, param1: number);
				public getVersionList(): java.util.List<java.lang.Integer>;
				public compareTo(param0: com.mongodb.connection.ServerVersion): number;
				public hashCode(): number;
				public constructor(param0: java.util.List<java.lang.Integer>);
				public equals(param0: any): boolean;
				public toString(): string;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class SocketSettings {
				public static class: java.lang.Class<com.mongodb.connection.SocketSettings>;
				public getReceiveBufferSize(): number;
				public static builder(): com.mongodb.connection.SocketSettings.Builder;
				public getSendBufferSize(): number;
				public hashCode(): number;
				public isKeepAlive(): boolean;
				public equals(param0: any): boolean;
				public static builder(param0: com.mongodb.connection.SocketSettings): com.mongodb.connection.SocketSettings.Builder;
				public getReadTimeout(param0: java.util.concurrent.TimeUnit): number;
				public toString(): string;
				public getConnectTimeout(param0: java.util.concurrent.TimeUnit): number;
			}
			export module SocketSettings {
				export class Builder {
					public static class: java.lang.Class<com.mongodb.connection.SocketSettings.Builder>;
					public applySettings(param0: com.mongodb.connection.SocketSettings): com.mongodb.connection.SocketSettings.Builder;
					public keepAlive(param0: boolean): com.mongodb.connection.SocketSettings.Builder;
					public applyConnectionString(param0: com.mongodb.ConnectionString): com.mongodb.connection.SocketSettings.Builder;
					public receiveBufferSize(param0: number): com.mongodb.connection.SocketSettings.Builder;
					public build(): com.mongodb.connection.SocketSettings;
					public sendBufferSize(param0: number): com.mongodb.connection.SocketSettings.Builder;
					public readTimeout(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.SocketSettings.Builder;
					public connectTimeout(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.connection.SocketSettings.Builder;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class SocketStreamFactory extends com.mongodb.connection.StreamFactory {
				public static class: java.lang.Class<com.mongodb.connection.SocketStreamFactory>;
				public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings);
				public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings, param2: javax.net.SocketFactory);
				public create(param0: com.mongodb.ServerAddress): com.mongodb.connection.Stream;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class SplittablePayload {
				public static class: java.lang.Class<com.mongodb.connection.SplittablePayload>;
				public hasAnotherSplit(): boolean;
				public getPayload(): java.util.List<org.bson.BsonDocument>;
				public getPosition(): number;
				public getNextSplit(): com.mongodb.connection.SplittablePayload;
				public setPosition(param0: number): void;
				public isEmpty(): boolean;
				public constructor(param0: com.mongodb.connection.SplittablePayload.Type, param1: java.util.List<org.bson.BsonDocument>);
				public getPayloadType(): com.mongodb.connection.SplittablePayload.Type;
				public getPayloadName(): string;
			}
			export module SplittablePayload {
				export class Type {
					public static class: java.lang.Class<com.mongodb.connection.SplittablePayload.Type>;
					public static INSERT: com.mongodb.connection.SplittablePayload.Type;
					public static UPDATE: com.mongodb.connection.SplittablePayload.Type;
					public static REPLACE: com.mongodb.connection.SplittablePayload.Type;
					public static DELETE: com.mongodb.connection.SplittablePayload.Type;
					public static values(): native.Array<com.mongodb.connection.SplittablePayload.Type>;
					public static valueOf(param0: string): com.mongodb.connection.SplittablePayload.Type;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class SslSettings {
				public static class: java.lang.Class<com.mongodb.connection.SslSettings>;
				public isInvalidHostNameAllowed(): boolean;
				public getContext(): javax.net.ssl.SSLContext;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public static builder(): com.mongodb.connection.SslSettings.Builder;
				public isEnabled(): boolean;
				public static builder(param0: com.mongodb.connection.SslSettings): com.mongodb.connection.SslSettings.Builder;
				public toString(): string;
			}
			export module SslSettings {
				export class Builder {
					public static class: java.lang.Class<com.mongodb.connection.SslSettings.Builder>;
					public applyConnectionString(param0: com.mongodb.ConnectionString): com.mongodb.connection.SslSettings.Builder;
					public invalidHostNameAllowed(param0: boolean): com.mongodb.connection.SslSettings.Builder;
					public enabled(param0: boolean): com.mongodb.connection.SslSettings.Builder;
					public build(): com.mongodb.connection.SslSettings;
					public applySettings(param0: com.mongodb.connection.SslSettings): com.mongodb.connection.SslSettings.Builder;
					public context(param0: javax.net.ssl.SSLContext): com.mongodb.connection.SslSettings.Builder;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class Stream extends com.mongodb.connection.BufferProvider {
				public static class: java.lang.Class<com.mongodb.connection.Stream>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.Stream interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					open(): void;
					openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					write(param0: java.util.List<org.bson.ByteBuf>): void;
					read(param0: number): org.bson.ByteBuf;
					writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					getAddress(): com.mongodb.ServerAddress;
					close(): void;
					isClosed(): boolean;
					getBuffer(param0: number): org.bson.ByteBuf;
				});
				public constructor();
				public read(param0: number): org.bson.ByteBuf;
				public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
				public close(): void;
				public getAddress(): com.mongodb.ServerAddress;
				public write(param0: java.util.List<org.bson.ByteBuf>): void;
				public isClosed(): boolean;
				public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
				public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
				public getBuffer(param0: number): org.bson.ByteBuf;
				public open(): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class StreamFactory {
				public static class: java.lang.Class<com.mongodb.connection.StreamFactory>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.StreamFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					create(param0: com.mongodb.ServerAddress): com.mongodb.connection.Stream;
				});
				public constructor();
				public create(param0: com.mongodb.ServerAddress): com.mongodb.connection.Stream;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class StreamFactoryFactory {
				public static class: java.lang.Class<com.mongodb.connection.StreamFactoryFactory>;
				/**
				 * Constructs a new instance of the com.mongodb.connection.StreamFactoryFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					create(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings): com.mongodb.connection.StreamFactory;
				});
				public constructor();
				public create(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings): com.mongodb.connection.StreamFactory;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export class TlsChannelStreamFactoryFactory extends com.mongodb.connection.StreamFactoryFactory {
				public static class: java.lang.Class<com.mongodb.connection.TlsChannelStreamFactoryFactory>;
				public create(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings): com.mongodb.connection.StreamFactory;
				public close(): void;
				public constructor();
				public constructor(param0: com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup);
			}
			export module TlsChannelStreamFactoryFactory {
				export class SelectorMonitor {
					public static class: java.lang.Class<com.mongodb.connection.TlsChannelStreamFactoryFactory.SelectorMonitor>;
					public close(): void;
				}
				export module SelectorMonitor {
					export class Pair {
						public static class: java.lang.Class<com.mongodb.connection.TlsChannelStreamFactoryFactory.SelectorMonitor.Pair>;
					}
				}
				export class TlsChannelStream extends com.mongodb.internal.connection.AsynchronousChannelStream implements com.mongodb.connection.Stream {
					public static class: java.lang.Class<com.mongodb.connection.TlsChannelStreamFactoryFactory.TlsChannelStream>;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					public getAddress(): com.mongodb.ServerAddress;
					public close(): void;
					public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public open(): void;
					public write(param0: java.util.List<org.bson.ByteBuf>): void;
					public read(param0: number): org.bson.ByteBuf;
					public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public isClosed(): boolean;
				}
				export module TlsChannelStream {
					export class BufferProviderAllocator extends com.mongodb.internal.connection.tlschannel.BufferAllocator {
						public static class: java.lang.Class<com.mongodb.connection.TlsChannelStreamFactoryFactory.TlsChannelStream.BufferProviderAllocator>;
						public allocate(param0: number): org.bson.ByteBuf;
						public free(param0: org.bson.ByteBuf): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export module netty {
				export class NettyBufferProvider extends com.mongodb.connection.BufferProvider {
					public static class: java.lang.Class<com.mongodb.connection.netty.NettyBufferProvider>;
					public getBuffer(param0: number): org.bson.ByteBuf;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export module netty {
				export class NettyByteBuf extends org.bson.ByteBuf {
					public static class: java.lang.Class<com.mongodb.connection.netty.NettyByteBuf>;
					public flip(): org.bson.ByteBuf;
					public position(param0: number): org.bson.ByteBuf;
					public get(param0: number, param1: native.Array<number>): org.bson.ByteBuf;
					public put(param0: number, param1: number): org.bson.ByteBuf;
					public get(param0: number): number;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bson.ByteBuf;
					public asNIO(): java.nio.ByteBuffer;
					public put(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
					public put(param0: number): org.bson.ByteBuf;
					public get(param0: native.Array<number>): org.bson.ByteBuf;
					public position(): number;
					public duplicate(): org.bson.ByteBuf;
					public capacity(): number;
					public hasRemaining(): boolean;
					public getLong(): number;
					public getDouble(param0: number): number;
					public getDouble(): number;
					public asReadOnly(): org.bson.ByteBuf;
					public getInt(): number;
					public release(): void;
					public getLong(param0: number): number;
					public getInt(param0: number): number;
					public array(): native.Array<number>;
					public getReferenceCount(): number;
					public get(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
					public order(param0: java.nio.ByteOrder): org.bson.ByteBuf;
					public get(): number;
					public clear(): org.bson.ByteBuf;
					public retain(): org.bson.ByteBuf;
					public remaining(): number;
					public limit(): number;
					public limit(param0: number): org.bson.ByteBuf;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export module netty {
				export class NettyStream extends com.mongodb.connection.Stream {
					public static class: java.lang.Class<com.mongodb.connection.netty.NettyStream>;
					public getSslSettings(): com.mongodb.connection.SslSettings;
					public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public read(param0: number): org.bson.ByteBuf;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					public getAddress(): com.mongodb.ServerAddress;
					public getSettings(): com.mongodb.connection.SocketSettings;
					public close(): void;
					public getSocketChannelClass(): java.lang.Class<any>;
					public getWorkerGroup(): io.netty.channel.EventLoopGroup;
					public open(): void;
					public getAllocator(): io.netty.buffer.ByteBufAllocator;
					public write(param0: java.util.List<org.bson.ByteBuf>): void;
					public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public isClosed(): boolean;
				}
				export module NettyStream {
					export class FutureAsyncCompletionHandler<T>  extends com.mongodb.connection.AsyncCompletionHandler<any> {
						public static class: java.lang.Class<com.mongodb.connection.netty.NettyStream.FutureAsyncCompletionHandler<any>>;
						public failed(param0: java.lang.Throwable): void;
						public completed(param0: any): void;
						public get(): any;
					}
					export class InboundBufferHandler extends io.netty.channel.SimpleChannelInboundHandler<io.netty.buffer.ByteBuf> {
						public static class: java.lang.Class<com.mongodb.connection.netty.NettyStream.InboundBufferHandler>;
						public channelRead0(param0: io.netty.channel.ChannelHandlerContext, param1: io.netty.buffer.ByteBuf): void;
						public exceptionCaught(param0: io.netty.channel.ChannelHandlerContext, param1: java.lang.Throwable): void;
					}
					export class OpenChannelFutureListener {
						public static class: java.lang.Class<com.mongodb.connection.netty.NettyStream.OpenChannelFutureListener>;
						public operationComplete(param0: io.netty.channel.ChannelFuture): void;
					}
					export class PendingReader {
						public static class: java.lang.Class<com.mongodb.connection.netty.NettyStream.PendingReader>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export module netty {
				export class NettyStreamFactory extends com.mongodb.connection.StreamFactory {
					public static class: java.lang.Class<com.mongodb.connection.netty.NettyStreamFactory>;
					public create(param0: com.mongodb.ServerAddress): com.mongodb.connection.Stream;
					public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings, param2: io.netty.channel.EventLoopGroup, param3: io.netty.buffer.ByteBufAllocator);
					public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings, param2: io.netty.channel.EventLoopGroup);
					public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings);
					public constructor(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings, param2: io.netty.channel.EventLoopGroup, param3: java.lang.Class<any>, param4: io.netty.buffer.ByteBufAllocator);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export module netty {
				export class NettyStreamFactoryFactory extends com.mongodb.connection.StreamFactoryFactory {
					public static class: java.lang.Class<com.mongodb.connection.netty.NettyStreamFactoryFactory>;
					public toString(): string;
					public constructor();
					public create(param0: com.mongodb.connection.SocketSettings, param1: com.mongodb.connection.SslSettings): com.mongodb.connection.StreamFactory;
					public constructor(param0: io.netty.channel.EventLoopGroup, param1: io.netty.buffer.ByteBufAllocator);
					public static builder(): com.mongodb.connection.netty.NettyStreamFactoryFactory.Builder;
				}
				export module NettyStreamFactoryFactory {
					export class Builder {
						public static class: java.lang.Class<com.mongodb.connection.netty.NettyStreamFactoryFactory.Builder>;
						public socketChannelClass(param0: java.lang.Class<any>): com.mongodb.connection.netty.NettyStreamFactoryFactory.Builder;
						public eventLoopGroup(param0: io.netty.channel.EventLoopGroup): com.mongodb.connection.netty.NettyStreamFactoryFactory.Builder;
						public allocator(param0: io.netty.buffer.ByteBufAllocator): com.mongodb.connection.netty.NettyStreamFactoryFactory.Builder;
						public build(): com.mongodb.connection.netty.NettyStreamFactoryFactory;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module connection {
			export module netty {
				export class ReadTimeoutHandler {
					public static class: java.lang.Class<com.mongodb.connection.netty.ReadTimeoutHandler>;
				}
				export module ReadTimeoutHandler {
					export class ReadTimeoutTask {
						public static class: java.lang.Class<com.mongodb.connection.netty.ReadTimeoutHandler.ReadTimeoutTask>;
						public run(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module diagnostics {
			export module logging {
				export class JULLogger extends com.mongodb.diagnostics.logging.Logger {
					public static class: java.lang.Class<com.mongodb.diagnostics.logging.JULLogger>;
					public debug(param0: string, param1: java.lang.Throwable): void;
					public isDebugEnabled(): boolean;
					public trace(param0: string): void;
					public isInfoEnabled(): boolean;
					public trace(param0: string, param1: java.lang.Throwable): void;
					public isErrorEnabled(): boolean;
					public debug(param0: string): void;
					public info(param0: string, param1: java.lang.Throwable): void;
					public error(param0: string): void;
					public info(param0: string): void;
					public warn(param0: string): void;
					public log(param0: java.util.logging.Level, param1: string, param2: java.lang.Throwable): void;
					public getName(): string;
					public warn(param0: string, param1: java.lang.Throwable): void;
					public isWarnEnabled(): boolean;
					public isTraceEnabled(): boolean;
					public error(param0: string, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module diagnostics {
			export module logging {
				export class Logger {
					public static class: java.lang.Class<com.mongodb.diagnostics.logging.Logger>;
					/**
					 * Constructs a new instance of the com.mongodb.diagnostics.logging.Logger interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getName(): string;
						isTraceEnabled(): boolean;
						trace(param0: string): void;
						trace(param0: string, param1: java.lang.Throwable): void;
						isDebugEnabled(): boolean;
						debug(param0: string): void;
						debug(param0: string, param1: java.lang.Throwable): void;
						isInfoEnabled(): boolean;
						info(param0: string): void;
						info(param0: string, param1: java.lang.Throwable): void;
						isWarnEnabled(): boolean;
						warn(param0: string): void;
						warn(param0: string, param1: java.lang.Throwable): void;
						isErrorEnabled(): boolean;
						error(param0: string): void;
						error(param0: string, param1: java.lang.Throwable): void;
					});
					public constructor();
					public debug(param0: string, param1: java.lang.Throwable): void;
					public isDebugEnabled(): boolean;
					public trace(param0: string): void;
					public isInfoEnabled(): boolean;
					public trace(param0: string, param1: java.lang.Throwable): void;
					public isErrorEnabled(): boolean;
					public debug(param0: string): void;
					public info(param0: string, param1: java.lang.Throwable): void;
					public error(param0: string): void;
					public info(param0: string): void;
					public warn(param0: string): void;
					public getName(): string;
					public warn(param0: string, param1: java.lang.Throwable): void;
					public isWarnEnabled(): boolean;
					public isTraceEnabled(): boolean;
					public error(param0: string, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module diagnostics {
			export module logging {
				export class Loggers {
					public static class: java.lang.Class<com.mongodb.diagnostics.logging.Loggers>;
					public static PREFIX: string;
					public static getLogger(param0: string): com.mongodb.diagnostics.logging.Logger;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module diagnostics {
			export module logging {
				export class SLF4JLogger extends com.mongodb.diagnostics.logging.Logger {
					public static class: java.lang.Class<com.mongodb.diagnostics.logging.SLF4JLogger>;
					public debug(param0: string, param1: java.lang.Throwable): void;
					public isDebugEnabled(): boolean;
					public trace(param0: string): void;
					public isInfoEnabled(): boolean;
					public trace(param0: string, param1: java.lang.Throwable): void;
					public isErrorEnabled(): boolean;
					public debug(param0: string): void;
					public info(param0: string, param1: java.lang.Throwable): void;
					public error(param0: string): void;
					public info(param0: string): void;
					public warn(param0: string): void;
					public getName(): string;
					public warn(param0: string, param1: java.lang.Throwable): void;
					public isWarnEnabled(): boolean;
					public isTraceEnabled(): boolean;
					public error(param0: string, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ClusterClosedEvent {
				public static class: java.lang.Class<com.mongodb.event.ClusterClosedEvent>;
				public getClusterId(): com.mongodb.connection.ClusterId;
				public constructor(param0: com.mongodb.connection.ClusterId);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ClusterDescriptionChangedEvent {
				public static class: java.lang.Class<com.mongodb.event.ClusterDescriptionChangedEvent>;
				public getPreviousDescription(): com.mongodb.connection.ClusterDescription;
				public constructor(param0: com.mongodb.connection.ClusterId, param1: com.mongodb.connection.ClusterDescription, param2: com.mongodb.connection.ClusterDescription);
				public getClusterId(): com.mongodb.connection.ClusterId;
				public getNewDescription(): com.mongodb.connection.ClusterDescription;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ClusterEventMulticaster extends com.mongodb.event.ClusterListener {
				public static class: java.lang.Class<com.mongodb.event.ClusterEventMulticaster>;
				public constructor(param0: java.util.List<com.mongodb.event.ClusterListener>);
				public clusterOpening(param0: com.mongodb.event.ClusterOpeningEvent): void;
				public clusterDescriptionChanged(param0: com.mongodb.event.ClusterDescriptionChangedEvent): void;
				public getClusterListeners(): java.util.List<com.mongodb.event.ClusterListener>;
				public clusterClosed(param0: com.mongodb.event.ClusterClosedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ClusterListener {
				public static class: java.lang.Class<com.mongodb.event.ClusterListener>;
				/**
				 * Constructs a new instance of the com.mongodb.event.ClusterListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					clusterOpening(param0: com.mongodb.event.ClusterOpeningEvent): void;
					clusterClosed(param0: com.mongodb.event.ClusterClosedEvent): void;
					clusterDescriptionChanged(param0: com.mongodb.event.ClusterDescriptionChangedEvent): void;
				});
				public constructor();
				public clusterOpening(param0: com.mongodb.event.ClusterOpeningEvent): void;
				public clusterDescriptionChanged(param0: com.mongodb.event.ClusterDescriptionChangedEvent): void;
				public clusterClosed(param0: com.mongodb.event.ClusterClosedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export abstract class ClusterListenerAdapter extends com.mongodb.event.ClusterListener {
				public static class: java.lang.Class<com.mongodb.event.ClusterListenerAdapter>;
				public clusterOpening(param0: com.mongodb.event.ClusterOpeningEvent): void;
				public clusterDescriptionChanged(param0: com.mongodb.event.ClusterDescriptionChangedEvent): void;
				public clusterClosed(param0: com.mongodb.event.ClusterClosedEvent): void;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ClusterOpeningEvent {
				public static class: java.lang.Class<com.mongodb.event.ClusterOpeningEvent>;
				public getClusterId(): com.mongodb.connection.ClusterId;
				public constructor(param0: com.mongodb.connection.ClusterId);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export abstract class CommandEvent {
				public static class: java.lang.Class<com.mongodb.event.CommandEvent>;
				public getRequestId(): number;
				public getConnectionDescription(): com.mongodb.connection.ConnectionDescription;
				public constructor(param0: number, param1: com.mongodb.connection.ConnectionDescription, param2: string);
				public getCommandName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class CommandEventMulticaster extends com.mongodb.event.CommandListener {
				public static class: java.lang.Class<com.mongodb.event.CommandEventMulticaster>;
				public commandSucceeded(param0: com.mongodb.event.CommandSucceededEvent): void;
				public getCommandListeners(): java.util.List<com.mongodb.event.CommandListener>;
				public commandStarted(param0: com.mongodb.event.CommandStartedEvent): void;
				public constructor(param0: java.util.List<com.mongodb.event.CommandListener>);
				public commandFailed(param0: com.mongodb.event.CommandFailedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class CommandFailedEvent extends com.mongodb.event.CommandEvent {
				public static class: java.lang.Class<com.mongodb.event.CommandFailedEvent>;
				public constructor(param0: number, param1: com.mongodb.connection.ConnectionDescription, param2: string, param3: number, param4: java.lang.Throwable);
				public getElapsedTime(param0: java.util.concurrent.TimeUnit): number;
				public constructor(param0: number, param1: com.mongodb.connection.ConnectionDescription, param2: string);
				public getThrowable(): java.lang.Throwable;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class CommandListener {
				public static class: java.lang.Class<com.mongodb.event.CommandListener>;
				/**
				 * Constructs a new instance of the com.mongodb.event.CommandListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					commandStarted(param0: com.mongodb.event.CommandStartedEvent): void;
					commandSucceeded(param0: com.mongodb.event.CommandSucceededEvent): void;
					commandFailed(param0: com.mongodb.event.CommandFailedEvent): void;
				});
				public constructor();
				public commandSucceeded(param0: com.mongodb.event.CommandSucceededEvent): void;
				public commandStarted(param0: com.mongodb.event.CommandStartedEvent): void;
				public commandFailed(param0: com.mongodb.event.CommandFailedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class CommandListenerMulticaster extends com.mongodb.event.CommandListener {
				public static class: java.lang.Class<com.mongodb.event.CommandListenerMulticaster>;
				public commandSucceeded(param0: com.mongodb.event.CommandSucceededEvent): void;
				public getCommandListeners(): java.util.List<com.mongodb.event.CommandListener>;
				public commandStarted(param0: com.mongodb.event.CommandStartedEvent): void;
				public constructor(param0: java.util.List<com.mongodb.event.CommandListener>);
				public commandFailed(param0: com.mongodb.event.CommandFailedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class CommandStartedEvent extends com.mongodb.event.CommandEvent {
				public static class: java.lang.Class<com.mongodb.event.CommandStartedEvent>;
				public getDatabaseName(): string;
				public constructor(param0: number, param1: com.mongodb.connection.ConnectionDescription, param2: string, param3: string, param4: org.bson.BsonDocument);
				public constructor(param0: number, param1: com.mongodb.connection.ConnectionDescription, param2: string);
				public getCommand(): org.bson.BsonDocument;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class CommandSucceededEvent extends com.mongodb.event.CommandEvent {
				public static class: java.lang.Class<com.mongodb.event.CommandSucceededEvent>;
				public constructor(param0: number, param1: com.mongodb.connection.ConnectionDescription, param2: string, param3: org.bson.BsonDocument, param4: number);
				public getElapsedTime(param0: java.util.concurrent.TimeUnit): number;
				public constructor(param0: number, param1: com.mongodb.connection.ConnectionDescription, param2: string);
				public getResponse(): org.bson.BsonDocument;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionAddedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionAddedEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionCheckedInEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionCheckedInEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionCheckedOutEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionCheckedOutEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionClosedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionClosedEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionListener {
				public static class: java.lang.Class<com.mongodb.event.ConnectionListener>;
				/**
				 * Constructs a new instance of the com.mongodb.event.ConnectionListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					connectionOpened(param0: com.mongodb.event.ConnectionOpenedEvent): void;
					connectionClosed(param0: com.mongodb.event.ConnectionClosedEvent): void;
					messagesSent(param0: com.mongodb.event.ConnectionMessagesSentEvent): void;
					messageReceived(param0: com.mongodb.event.ConnectionMessageReceivedEvent): void;
				});
				public constructor();
				public connectionClosed(param0: com.mongodb.event.ConnectionClosedEvent): void;
				public messageReceived(param0: com.mongodb.event.ConnectionMessageReceivedEvent): void;
				public messagesSent(param0: com.mongodb.event.ConnectionMessagesSentEvent): void;
				public connectionOpened(param0: com.mongodb.event.ConnectionOpenedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionMessageReceivedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionMessageReceivedEvent>;
				public getResponseTo(): number;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: number, param2: number);
				public getSize(): number;
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionMessagesSentEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionMessagesSentEvent>;
				public getRequestId(): number;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: number, param2: number);
				public getSize(): number;
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionOpenedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionOpenedEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionPoolClosedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionPoolClosedEvent>;
				public getServerId(): com.mongodb.connection.ServerId;
				public constructor(param0: com.mongodb.connection.ServerId);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionPoolEventMulticaster extends com.mongodb.event.ConnectionPoolListener {
				public static class: java.lang.Class<com.mongodb.event.ConnectionPoolEventMulticaster>;
				public connectionPoolClosed(param0: com.mongodb.event.ConnectionPoolClosedEvent): void;
				public waitQueueEntered(param0: com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent): void;
				public connectionAdded(param0: com.mongodb.event.ConnectionAddedEvent): void;
				public remove(param0: com.mongodb.event.ConnectionPoolListener): void;
				public connectionPoolOpened(param0: com.mongodb.event.ConnectionPoolOpenedEvent): void;
				public connectionCheckedOut(param0: com.mongodb.event.ConnectionCheckedOutEvent): void;
				public connectionCheckedIn(param0: com.mongodb.event.ConnectionCheckedInEvent): void;
				public add(param0: com.mongodb.event.ConnectionPoolListener): void;
				public waitQueueExited(param0: com.mongodb.event.ConnectionPoolWaitQueueExitedEvent): void;
				public constructor();
				public connectionRemoved(param0: com.mongodb.event.ConnectionRemovedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionPoolListener {
				public static class: java.lang.Class<com.mongodb.event.ConnectionPoolListener>;
				/**
				 * Constructs a new instance of the com.mongodb.event.ConnectionPoolListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					connectionPoolOpened(param0: com.mongodb.event.ConnectionPoolOpenedEvent): void;
					connectionPoolClosed(param0: com.mongodb.event.ConnectionPoolClosedEvent): void;
					connectionCheckedOut(param0: com.mongodb.event.ConnectionCheckedOutEvent): void;
					connectionCheckedIn(param0: com.mongodb.event.ConnectionCheckedInEvent): void;
					waitQueueEntered(param0: com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent): void;
					waitQueueExited(param0: com.mongodb.event.ConnectionPoolWaitQueueExitedEvent): void;
					connectionAdded(param0: com.mongodb.event.ConnectionAddedEvent): void;
					connectionRemoved(param0: com.mongodb.event.ConnectionRemovedEvent): void;
				});
				public constructor();
				public connectionPoolClosed(param0: com.mongodb.event.ConnectionPoolClosedEvent): void;
				public waitQueueEntered(param0: com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent): void;
				public connectionAdded(param0: com.mongodb.event.ConnectionAddedEvent): void;
				public connectionPoolOpened(param0: com.mongodb.event.ConnectionPoolOpenedEvent): void;
				public connectionCheckedOut(param0: com.mongodb.event.ConnectionCheckedOutEvent): void;
				public connectionCheckedIn(param0: com.mongodb.event.ConnectionCheckedInEvent): void;
				public waitQueueExited(param0: com.mongodb.event.ConnectionPoolWaitQueueExitedEvent): void;
				public connectionRemoved(param0: com.mongodb.event.ConnectionRemovedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export abstract class ConnectionPoolListenerAdapter extends com.mongodb.event.ConnectionPoolListener {
				public static class: java.lang.Class<com.mongodb.event.ConnectionPoolListenerAdapter>;
				public connectionPoolClosed(param0: com.mongodb.event.ConnectionPoolClosedEvent): void;
				public waitQueueEntered(param0: com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent): void;
				public connectionAdded(param0: com.mongodb.event.ConnectionAddedEvent): void;
				public connectionPoolOpened(param0: com.mongodb.event.ConnectionPoolOpenedEvent): void;
				public connectionCheckedOut(param0: com.mongodb.event.ConnectionCheckedOutEvent): void;
				public connectionCheckedIn(param0: com.mongodb.event.ConnectionCheckedInEvent): void;
				public waitQueueExited(param0: com.mongodb.event.ConnectionPoolWaitQueueExitedEvent): void;
				public constructor();
				public connectionRemoved(param0: com.mongodb.event.ConnectionRemovedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionPoolOpenedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionPoolOpenedEvent>;
				public getSettings(): com.mongodb.connection.ConnectionPoolSettings;
				public getServerId(): com.mongodb.connection.ServerId;
				public constructor(param0: com.mongodb.connection.ServerId, param1: com.mongodb.connection.ConnectionPoolSettings);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionPoolWaitQueueEnteredEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent>;
				public getServerId(): com.mongodb.connection.ServerId;
				public constructor(param0: com.mongodb.connection.ServerId);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionPoolWaitQueueExitedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionPoolWaitQueueExitedEvent>;
				public getServerId(): com.mongodb.connection.ServerId;
				public constructor(param0: com.mongodb.connection.ServerId);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ConnectionRemovedEvent {
				public static class: java.lang.Class<com.mongodb.event.ConnectionRemovedEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerClosedEvent {
				public static class: java.lang.Class<com.mongodb.event.ServerClosedEvent>;
				public getServerId(): com.mongodb.connection.ServerId;
				public constructor(param0: com.mongodb.connection.ServerId);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerDescriptionChangedEvent {
				public static class: java.lang.Class<com.mongodb.event.ServerDescriptionChangedEvent>;
				public getServerId(): com.mongodb.connection.ServerId;
				public getPreviousDescription(): com.mongodb.connection.ServerDescription;
				public constructor(param0: com.mongodb.connection.ServerId, param1: com.mongodb.connection.ServerDescription, param2: com.mongodb.connection.ServerDescription);
				public getNewDescription(): com.mongodb.connection.ServerDescription;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerEventMulticaster extends com.mongodb.event.ServerListener {
				public static class: java.lang.Class<com.mongodb.event.ServerEventMulticaster>;
				public serverOpening(param0: com.mongodb.event.ServerOpeningEvent): void;
				public constructor(param0: java.util.List<com.mongodb.event.ServerListener>);
				public serverClosed(param0: com.mongodb.event.ServerClosedEvent): void;
				public getServerListeners(): java.util.List<com.mongodb.event.ServerListener>;
				public serverDescriptionChanged(param0: com.mongodb.event.ServerDescriptionChangedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerHeartbeatFailedEvent {
				public static class: java.lang.Class<com.mongodb.event.ServerHeartbeatFailedEvent>;
				public getElapsedTime(param0: java.util.concurrent.TimeUnit): number;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: number, param2: java.lang.Throwable);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
				public getThrowable(): java.lang.Throwable;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerHeartbeatStartedEvent {
				public static class: java.lang.Class<com.mongodb.event.ServerHeartbeatStartedEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId);
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerHeartbeatSucceededEvent {
				public static class: java.lang.Class<com.mongodb.event.ServerHeartbeatSucceededEvent>;
				public constructor(param0: com.mongodb.connection.ConnectionId, param1: org.bson.BsonDocument, param2: number);
				public getReply(): org.bson.BsonDocument;
				public getElapsedTime(param0: java.util.concurrent.TimeUnit): number;
				public getConnectionId(): com.mongodb.connection.ConnectionId;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerListener {
				public static class: java.lang.Class<com.mongodb.event.ServerListener>;
				/**
				 * Constructs a new instance of the com.mongodb.event.ServerListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					serverOpening(param0: com.mongodb.event.ServerOpeningEvent): void;
					serverClosed(param0: com.mongodb.event.ServerClosedEvent): void;
					serverDescriptionChanged(param0: com.mongodb.event.ServerDescriptionChangedEvent): void;
				});
				public constructor();
				public serverOpening(param0: com.mongodb.event.ServerOpeningEvent): void;
				public serverClosed(param0: com.mongodb.event.ServerClosedEvent): void;
				public serverDescriptionChanged(param0: com.mongodb.event.ServerDescriptionChangedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export abstract class ServerListenerAdapter extends com.mongodb.event.ServerListener {
				public static class: java.lang.Class<com.mongodb.event.ServerListenerAdapter>;
				public serverOpening(param0: com.mongodb.event.ServerOpeningEvent): void;
				public serverClosed(param0: com.mongodb.event.ServerClosedEvent): void;
				public serverDescriptionChanged(param0: com.mongodb.event.ServerDescriptionChangedEvent): void;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerMonitorEventMulticaster extends com.mongodb.event.ServerMonitorListener {
				public static class: java.lang.Class<com.mongodb.event.ServerMonitorEventMulticaster>;
				public serverHeartbeatSucceeded(param0: com.mongodb.event.ServerHeartbeatSucceededEvent): void;
				public serverHearbeatStarted(param0: com.mongodb.event.ServerHeartbeatStartedEvent): void;
				public serverHeartbeatFailed(param0: com.mongodb.event.ServerHeartbeatFailedEvent): void;
				public getServerMonitorListeners(): java.util.List<com.mongodb.event.ServerMonitorListener>;
				public constructor(param0: java.util.List<com.mongodb.event.ServerMonitorListener>);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerMonitorListener {
				public static class: java.lang.Class<com.mongodb.event.ServerMonitorListener>;
				/**
				 * Constructs a new instance of the com.mongodb.event.ServerMonitorListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					serverHearbeatStarted(param0: com.mongodb.event.ServerHeartbeatStartedEvent): void;
					serverHeartbeatSucceeded(param0: com.mongodb.event.ServerHeartbeatSucceededEvent): void;
					serverHeartbeatFailed(param0: com.mongodb.event.ServerHeartbeatFailedEvent): void;
				});
				public constructor();
				public serverHeartbeatSucceeded(param0: com.mongodb.event.ServerHeartbeatSucceededEvent): void;
				public serverHearbeatStarted(param0: com.mongodb.event.ServerHeartbeatStartedEvent): void;
				public serverHeartbeatFailed(param0: com.mongodb.event.ServerHeartbeatFailedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export abstract class ServerMonitorListenerAdapter extends com.mongodb.event.ServerMonitorListener {
				public static class: java.lang.Class<com.mongodb.event.ServerMonitorListenerAdapter>;
				public serverHeartbeatSucceeded(param0: com.mongodb.event.ServerHeartbeatSucceededEvent): void;
				public serverHearbeatStarted(param0: com.mongodb.event.ServerHeartbeatStartedEvent): void;
				public serverHeartbeatFailed(param0: com.mongodb.event.ServerHeartbeatFailedEvent): void;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module event {
			export class ServerOpeningEvent {
				public static class: java.lang.Class<com.mongodb.event.ServerOpeningEvent>;
				public getServerId(): com.mongodb.connection.ServerId;
				public constructor(param0: com.mongodb.connection.ServerId);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module gridfs {
			export class CLI {
				public static class: java.lang.Class<com.mongodb.gridfs.CLI>;
				public static main(param0: native.Array<string>): void;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module gridfs {
			export class GridFS {
				public static class: java.lang.Class<com.mongodb.gridfs.GridFS>;
				public static DEFAULT_CHUNKSIZE: number;
				public static MAX_CHUNKSIZE: number;
				public static DEFAULT_BUCKET: string;
				public find(param0: org.bson.types.ObjectId): com.mongodb.gridfs.GridFSDBFile;
				public createFile(param0: java.io.InputStream, param1: boolean): com.mongodb.gridfs.GridFSInputFile;
				public createFile(param0: native.Array<number>): com.mongodb.gridfs.GridFSInputFile;
				public getFilesCollection(): com.mongodb.DBCollection;
				public getChunksCollection(): com.mongodb.DBCollection;
				public constructor(param0: com.mongodb.DB, param1: string);
				public getFileList(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): com.mongodb.DBCursor;
				public getDB(): com.mongodb.DB;
				public createFile(param0: java.io.File): com.mongodb.gridfs.GridFSInputFile;
				public find(param0: com.mongodb.DBObject): java.util.List<com.mongodb.gridfs.GridFSDBFile>;
				public createFile(param0: java.io.InputStream): com.mongodb.gridfs.GridFSInputFile;
				public getFileList(): com.mongodb.DBCursor;
				public createFile(): com.mongodb.gridfs.GridFSInputFile;
				public remove(param0: com.mongodb.DBObject): void;
				public findOne(param0: string): com.mongodb.gridfs.GridFSDBFile;
				public remove(param0: org.bson.types.ObjectId): void;
				public createFile(param0: java.io.InputStream, param1: string, param2: boolean): com.mongodb.gridfs.GridFSInputFile;
				public getBucketName(): string;
				public createFile(param0: string): com.mongodb.gridfs.GridFSInputFile;
				public findOne(param0: com.mongodb.DBObject): com.mongodb.gridfs.GridFSDBFile;
				public getFileList(param0: com.mongodb.DBObject): com.mongodb.DBCursor;
				public createFile(param0: java.io.InputStream, param1: string): com.mongodb.gridfs.GridFSInputFile;
				public remove(param0: string): void;
				public find(param0: string, param1: com.mongodb.DBObject): java.util.List<com.mongodb.gridfs.GridFSDBFile>;
				public find(param0: com.mongodb.DBObject, param1: com.mongodb.DBObject): java.util.List<com.mongodb.gridfs.GridFSDBFile>;
				public constructor(param0: com.mongodb.DB);
				public find(param0: string): java.util.List<com.mongodb.gridfs.GridFSDBFile>;
				public findOne(param0: org.bson.types.ObjectId): com.mongodb.gridfs.GridFSDBFile;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module gridfs {
			export class GridFSDBFile extends com.mongodb.gridfs.GridFSFile {
				public static class: java.lang.Class<com.mongodb.gridfs.GridFSDBFile>;
				public getInputStream(): java.io.InputStream;
				public writeTo(param0: java.io.OutputStream): number;
				public writeTo(param0: string): number;
				public isPartialObject(): boolean;
				public writeTo(param0: java.io.File): number;
				public markAsPartialObject(): void;
				public constructor();
			}
			export module GridFSDBFile {
				export class GridFSInputStream {
					public static class: java.lang.Class<com.mongodb.gridfs.GridFSDBFile.GridFSInputStream>;
					public available(): number;
					public read(): number;
					public read(param0: native.Array<number>, param1: number, param2: number): number;
					public read(param0: native.Array<number>): number;
					public skip(param0: number): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module gridfs {
			export abstract class GridFSFile extends com.mongodb.DBObject {
				public static class: java.lang.Class<com.mongodb.gridfs.GridFSFile>;
				public getUploadDate(): java.util.Date;
				public getContentType(): string;
				public numChunks(): number;
				public get(param0: string): any;
				public keySet(): java.util.Set<string>;
				public containsKey(param0: string): boolean;
				public putAll(param0: java.util.Map): void;
				public markAsPartialObject(): void;
				public constructor();
				public getMD5(): string;
				public putAll(param0: org.bson.BSONObject): void;
				public getFilename(): string;
				public getId(): any;
				public validate(): void;
				public toMap(): java.util.Map<any,any>;
				public getChunkSize(): number;
				public removeField(param0: string): any;
				public setMetaData(param0: com.mongodb.DBObject): void;
				public toMap(): java.util.Map;
				public toString(): string;
				public setGridFS(param0: com.mongodb.gridfs.GridFS): void;
				public getLength(): number;
				public getMetaData(): com.mongodb.DBObject;
				public getGridFS(): com.mongodb.gridfs.GridFS;
				public save(): void;
				public containsField(param0: string): boolean;
				public put(param0: string, param1: any): any;
				public isPartialObject(): boolean;
				public getAliases(): java.util.List<string>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module gridfs {
			export class GridFSInputFile extends com.mongodb.gridfs.GridFSFile {
				public static class: java.lang.Class<com.mongodb.gridfs.GridFSInputFile>;
				public setContentType(param0: string): void;
				public constructor(param0: com.mongodb.gridfs.GridFS, param1: string);
				public setChunkSize(param0: number): void;
				public constructor(param0: com.mongodb.gridfs.GridFS, param1: java.io.InputStream, param2: string, param3: boolean);
				public markAsPartialObject(): void;
				public constructor();
				public getOutputStream(): java.io.OutputStream;
				public save(param0: number): void;
				public save(): void;
				public saveChunks(): number;
				public setFilename(param0: string): void;
				public constructor(param0: com.mongodb.gridfs.GridFS);
				public constructor(param0: com.mongodb.gridfs.GridFS, param1: java.io.InputStream, param2: string);
				public setId(param0: any): void;
				public isPartialObject(): boolean;
				public saveChunks(param0: number): number;
				public createChunk(param0: any, param1: number, param2: native.Array<number>): com.mongodb.DBObject;
			}
			export module GridFSInputFile {
				export class GridFSOutputStream {
					public static class: java.lang.Class<com.mongodb.gridfs.GridFSInputFile.GridFSOutputStream>;
					public write(param0: native.Array<number>, param1: number, param2: number): void;
					public close(): void;
					public write(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export class HexUtils {
				public static class: java.lang.Class<com.mongodb.internal.HexUtils>;
				public static toHex(param0: native.Array<number>): string;
				public constructor();
				public static hexMD5(param0: native.Array<number>): string;
				public static hexMD5(param0: java.nio.ByteBuffer, param1: number, param2: number): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module async {
				export class ErrorHandlingResultCallback<T>  extends com.mongodb.async.SingleResultCallback<any> {
					public static class: java.lang.Class<com.mongodb.internal.async.ErrorHandlingResultCallback<any>>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public static errorHandlingCallback(param0: com.mongodb.async.SingleResultCallback<any>, param1: com.mongodb.diagnostics.logging.Logger): com.mongodb.async.SingleResultCallback<any>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module authentication {
				export class NativeAuthenticationHelper {
					public static class: java.lang.Class<com.mongodb.internal.authentication.NativeAuthenticationHelper>;
					public static getAuthCommand(param0: string, param1: native.Array<string>, param2: string): org.bson.BsonDocument;
					public static getAuthCommand(param0: string, param1: string, param2: string): org.bson.BsonDocument;
					public static createAuthenticationHash(param0: string, param1: native.Array<string>): string;
					public static getNonceCommand(): org.bson.BsonDocument;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module authentication {
				export class SaslPrep {
					public static class: java.lang.Class<com.mongodb.internal.authentication.SaslPrep>;
					public static saslPrepStored(param0: string): string;
					public static saslPrepQuery(param0: string): string;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module build {
				export class MongoDriverVersion {
					public static class: java.lang.Class<com.mongodb.internal.build.MongoDriverVersion>;
					public static VERSION: string;
					public static NAME: string;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module client {
				export module model {
					export class CountOptionsHelper {
						public static class: java.lang.Class<com.mongodb.internal.client.model.CountOptionsHelper>;
						public static fromEstimatedDocumentCountOptions(param0: com.mongodb.client.model.EstimatedDocumentCountOptions): com.mongodb.client.model.CountOptions;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module client {
				export module model {
					export class CountStrategy {
						public static class: java.lang.Class<com.mongodb.internal.client.model.CountStrategy>;
						public static COMMAND: com.mongodb.internal.client.model.CountStrategy;
						public static AGGREGATE: com.mongodb.internal.client.model.CountStrategy;
						public static values(): native.Array<com.mongodb.internal.client.model.CountStrategy>;
						public static valueOf(param0: string): com.mongodb.internal.client.model.CountStrategy;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class AbstractByteBufBsonDocument extends org.bson.BsonDocument {
					public static class: java.lang.Class<com.mongodb.internal.connection.AbstractByteBufBsonDocument>;
					public get(param0: any): org.bson.BsonValue;
					public remove(param0: any): org.bson.BsonValue;
					public isEmpty(): boolean;
					public size(): number;
					public append(param0: string, param1: org.bson.BsonValue): org.bson.BsonDocument;
					public get(param0: any, param1: org.bson.BsonValue): org.bson.BsonValue;
					public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
					public equals(param0: any): boolean;
					public putAll(param0: java.util.Map<any,any>): void;
					public containsKey(param0: any): boolean;
					public containsValue(param0: any): boolean;
					public put(param0: string, param1: org.bson.BsonValue): org.bson.BsonValue;
					public clear(): void;
					public values(): java.util.Collection<org.bson.BsonValue>;
					public getFirstKey(): string;
					public keySet(): java.util.Set<string>;
					public hashCode(): number;
					public entrySet(): java.util.Set<java.util.Map.Entry<string,org.bson.BsonValue>>;
				}
				export module AbstractByteBufBsonDocument {
					export class Finder<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mongodb.internal.connection.AbstractByteBufBsonDocument.Finder<any>>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.connection.AbstractByteBufBsonDocument$Finder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							find(param0: org.bson.BsonReader): T;
							notFound(): T;
						});
						public constructor();
						public find(param0: org.bson.BsonReader): T;
						public notFound(): T;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class AbstractMultiServerCluster extends com.mongodb.internal.connection.BaseCluster {
					public static class: java.lang.Class<com.mongodb.internal.connection.AbstractMultiServerCluster>;
					public getDescription(): com.mongodb.connection.ClusterDescription;
					public getServer(param0: com.mongodb.ServerAddress): com.mongodb.internal.connection.ClusterableServer;
					public connect(): void;
					public getSettings(): com.mongodb.connection.ClusterSettings;
					public close(): void;
					public selectServerAsync(param0: com.mongodb.selector.ServerSelector, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>): void;
					public getClusterTime(): org.bson.BsonTimestamp;
					public getCurrentDescription(): com.mongodb.connection.ClusterDescription;
					public initialize(param0: java.util.Collection<com.mongodb.ServerAddress>): void;
					public selectServer(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.Server;
					public isClosed(): boolean;
				}
				export module AbstractMultiServerCluster {
					export class DefaultServerStateListener extends com.mongodb.event.ServerListenerAdapter {
						public static class: java.lang.Class<com.mongodb.internal.connection.AbstractMultiServerCluster.DefaultServerStateListener>;
						public serverDescriptionChanged(param0: com.mongodb.event.ServerDescriptionChangedEvent): void;
						public serverOpening(param0: com.mongodb.event.ServerOpeningEvent): void;
						public serverClosed(param0: com.mongodb.event.ServerClosedEvent): void;
					}
					export class ServerTuple {
						public static class: java.lang.Class<com.mongodb.internal.connection.AbstractMultiServerCluster.ServerTuple>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class AbstractReferenceCounted extends com.mongodb.binding.ReferenceCounted {
					public static class: java.lang.Class<com.mongodb.internal.connection.AbstractReferenceCounted>;
					public getCount(): number;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public release(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class AsyncWritableByteChannel {
					public static class: java.lang.Class<com.mongodb.internal.connection.AsyncWritableByteChannel>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.AsyncWritableByteChannel interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						write(param0: java.nio.ByteBuffer, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					});
					public constructor();
					public write(param0: java.nio.ByteBuffer, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class AsynchronousChannelStream extends com.mongodb.connection.Stream {
					public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousChannelStream>;
					public setChannel(param0: com.mongodb.internal.connection.ExtendedAsynchronousByteChannel): void;
					public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public getBufferProvider(): com.mongodb.connection.BufferProvider;
					public read(param0: number): org.bson.ByteBuf;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public getSettings(): com.mongodb.connection.SocketSettings;
					public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					public getAddress(): com.mongodb.ServerAddress;
					public getChannel(): com.mongodb.internal.connection.ExtendedAsynchronousByteChannel;
					public close(): void;
					public getServerAddress(): com.mongodb.ServerAddress;
					public open(): void;
					public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.connection.SocketSettings, param2: com.mongodb.connection.BufferProvider);
					public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public write(param0: java.util.List<org.bson.ByteBuf>): void;
					public isClosed(): boolean;
				}
				export module AsynchronousChannelStream {
					export class AsyncWritableByteChannelAdapter {
						public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousChannelStream.AsyncWritableByteChannelAdapter>;
					}
					export module AsyncWritableByteChannelAdapter {
						export class WriteCompletionHandler extends com.mongodb.internal.connection.AsynchronousChannelStream.BaseCompletionHandler<java.lang.Void,java.lang.Integer,any> {
							public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousChannelStream.AsyncWritableByteChannelAdapter.WriteCompletionHandler>;
							public completed(param0: java.lang.Integer, param1: any): void;
							public failed(param0: java.lang.Throwable, param1: any): void;
						}
					}
					export abstract class BaseCompletionHandler<T, V, A>  extends java.nio.channels.CompletionHandler<any,any> {
						public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousChannelStream.BaseCompletionHandler<any,any,any>>;
					}
					export class BasicCompletionHandler extends com.mongodb.internal.connection.AsynchronousChannelStream.BaseCompletionHandler<org.bson.ByteBuf,java.lang.Integer,java.lang.Void> {
						public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousChannelStream.BasicCompletionHandler>;
						public failed(param0: java.lang.Throwable, param1: java.lang.Void): void;
						public completed(param0: java.lang.Integer, param1: java.lang.Void): void;
					}
					export class FutureAsyncCompletionHandler<T>  extends com.mongodb.connection.AsyncCompletionHandler<any> {
						public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousChannelStream.FutureAsyncCompletionHandler<any>>;
						public failed(param0: java.lang.Throwable): void;
						public completed(param0: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class AsynchronousSocketChannelStream extends com.mongodb.internal.connection.AsynchronousChannelStream implements com.mongodb.connection.Stream {
					public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousSocketChannelStream>;
					public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public getGroup(): java.nio.channels.AsynchronousChannelGroup;
					public read(param0: number): org.bson.ByteBuf;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					public getAddress(): com.mongodb.ServerAddress;
					public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.connection.SocketSettings, param2: com.mongodb.connection.BufferProvider, param3: java.nio.channels.AsynchronousChannelGroup);
					public close(): void;
					public open(): void;
					public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.connection.SocketSettings, param2: com.mongodb.connection.BufferProvider);
					public write(param0: java.util.List<org.bson.ByteBuf>): void;
					public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public isClosed(): boolean;
				}
				export module AsynchronousSocketChannelStream {
					export class AsynchronousSocketChannelAdapter extends com.mongodb.internal.connection.ExtendedAsynchronousByteChannel {
						public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousSocketChannelStream.AsynchronousSocketChannelAdapter>;
						public read(param0: java.nio.ByteBuffer): java.util.concurrent.Future<java.lang.Integer>;
						public write(param0: java.nio.ByteBuffer, param1: any, param2: java.nio.channels.CompletionHandler): void;
						public close(): void;
						public write(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
						public read(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
						public write(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
						public isOpen(): boolean;
						public read(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
						public read(param0: java.nio.ByteBuffer, param1: any, param2: java.nio.channels.CompletionHandler): void;
						public write(param0: java.nio.ByteBuffer): java.util.concurrent.Future<java.lang.Integer>;
					}
					export class OpenCompletionHandler extends java.nio.channels.CompletionHandler<java.lang.Void,any> {
						public static class: java.lang.Class<com.mongodb.internal.connection.AsynchronousSocketChannelStream.OpenCompletionHandler>;
						public failed(param0: java.lang.Throwable, param1: any): void;
						public completed(param0: java.lang.Void, param1: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class Authenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.Authenticator>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class BaseCluster extends com.mongodb.connection.Cluster {
					public static class: java.lang.Class<com.mongodb.internal.connection.BaseCluster>;
					public getDescription(): com.mongodb.connection.ClusterDescription;
					public getClusterId(): com.mongodb.connection.ClusterId;
					public getServer(param0: com.mongodb.ServerAddress): com.mongodb.internal.connection.ClusterableServer;
					public getSettings(): com.mongodb.connection.ClusterSettings;
					public selectServer(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.Server;
					public getServerFactory(): com.mongodb.internal.connection.ClusterableServerFactory;
					public updateDescription(param0: com.mongodb.connection.ClusterDescription): void;
					public connect(): void;
					public selectServerAsync(param0: com.mongodb.selector.ServerSelector, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>): void;
					public close(): void;
					public getClusterTime(): org.bson.BsonTimestamp;
					public fireChangeEvent(param0: com.mongodb.event.ClusterDescriptionChangedEvent): void;
					public getCurrentDescription(): com.mongodb.connection.ClusterDescription;
					public isClosed(): boolean;
					public createServer(param0: com.mongodb.ServerAddress, param1: com.mongodb.event.ServerListener): com.mongodb.internal.connection.ClusterableServer;
				}
				export module BaseCluster {
					export class ServerSelectionRequest {
						public static class: java.lang.Class<com.mongodb.internal.connection.BaseCluster.ServerSelectionRequest>;
					}
					export class WaitQueueHandler {
						public static class: java.lang.Class<com.mongodb.internal.connection.BaseCluster.WaitQueueHandler>;
						public run(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class BaseQueryMessage extends com.mongodb.internal.connection.LegacyMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.BaseQueryMessage>;
					public noCursorTimeout(param0: boolean): com.mongodb.internal.connection.BaseQueryMessage;
					public isAwaitData(): boolean;
					public partial(param0: boolean): com.mongodb.internal.connection.BaseQueryMessage;
					public isSlaveOk(): boolean;
					public tailableCursor(param0: boolean): com.mongodb.internal.connection.BaseQueryMessage;
					public oplogReplay(param0: boolean): com.mongodb.internal.connection.BaseQueryMessage;
					public slaveOk(param0: boolean): com.mongodb.internal.connection.BaseQueryMessage;
					public writeQueryPrologue(param0: org.bson.io.BsonOutput): void;
					public awaitData(param0: boolean): com.mongodb.internal.connection.BaseQueryMessage;
					public isPartial(): boolean;
					public isTailableCursor(): boolean;
					public isOplogReplay(): boolean;
					public isNoCursorTimeout(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class BsonWriterHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.BsonWriterHelper>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ByteBufBsonDocument extends com.mongodb.internal.connection.AbstractByteBufBsonDocument {
					public static class: java.lang.Class<com.mongodb.internal.connection.ByteBufBsonDocument>;
					public toJson(): string;
					public clone(): org.bson.BsonDocument;
					public toJson(param0: org.bson.json.JsonWriterSettings): string;
					public asBsonReader(): org.bson.BsonReader;
					public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ChangeEvent<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.connection.ChangeEvent<any>>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getPreviousValue(): T;
					public hashCode(): number;
					public getNewValue(): T;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ChangeListener<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.connection.ChangeListener<any>>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ChangeListener<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						stateChanged(param0: com.mongodb.internal.connection.ChangeEvent<T>): void;
					});
					public constructor();
					public stateChanged(param0: com.mongodb.internal.connection.ChangeEvent<T>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ClientMetadataHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.ClientMetadataHelper>;
					public static CLIENT_METADATA_DOCUMENT: org.bson.BsonDocument;
					public static createClientMetadataDocument(param0: string, param1: com.mongodb.MongoDriverInformation): org.bson.BsonDocument;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ClusterClock {
					public static class: java.lang.Class<com.mongodb.internal.connection.ClusterClock>;
					public constructor();
					public greaterOf(param0: org.bson.BsonDocument): org.bson.BsonDocument;
					public getClusterTime(): org.bson.BsonTimestamp;
					public getCurrent(): org.bson.BsonDocument;
					public advance(param0: org.bson.BsonDocument): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ClusterClockAdvancingSessionContext extends com.mongodb.session.SessionContext {
					public static class: java.lang.Class<com.mongodb.internal.connection.ClusterClockAdvancingSessionContext>;
					public isCausallyConsistent(): boolean;
					public advanceClusterTime(param0: org.bson.BsonDocument): void;
					public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					public getClusterTime(): org.bson.BsonDocument;
					public notifyMessageSent(): boolean;
					public advanceTransactionNumber(): number;
					public constructor(param0: com.mongodb.session.SessionContext, param1: com.mongodb.internal.connection.ClusterClock);
					public getTransactionNumber(): number;
					public getOperationTime(): org.bson.BsonTimestamp;
					public hasSession(): boolean;
					public getSessionId(): org.bson.BsonDocument;
					public getReadConcern(): com.mongodb.ReadConcern;
					public hasActiveTransaction(): boolean;
					public isImplicitSession(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ClusterableServer extends com.mongodb.connection.Server {
					public static class: java.lang.Class<com.mongodb.internal.connection.ClusterableServer>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ClusterableServer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						invalidate(): void;
						close(): void;
						isClosed(): boolean;
						connect(): void;
						getDescription(): com.mongodb.connection.ServerDescription;
						getConnection(): com.mongodb.connection.Connection;
						getConnectionAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
					});
					public constructor();
					public getDescription(): com.mongodb.connection.ServerDescription;
					public getConnection(): com.mongodb.connection.Connection;
					public connect(): void;
					public close(): void;
					public getConnectionAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
					public invalidate(): void;
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ClusterableServerFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.ClusterableServerFactory>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ClusterableServerFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(param0: com.mongodb.ServerAddress, param1: com.mongodb.event.ServerListener, param2: com.mongodb.internal.connection.ClusterClock): com.mongodb.internal.connection.ClusterableServer;
						getSettings(): com.mongodb.connection.ServerSettings;
					});
					public constructor();
					public getSettings(): com.mongodb.connection.ServerSettings;
					public create(param0: com.mongodb.ServerAddress, param1: com.mongodb.event.ServerListener, param2: com.mongodb.internal.connection.ClusterClock): com.mongodb.internal.connection.ClusterableServer;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CommandEventSender {
					public static class: java.lang.Class<com.mongodb.internal.connection.CommandEventSender>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.CommandEventSender interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						sendStartedEvent(): void;
						sendFailedEvent(param0: java.lang.Throwable): void;
						sendSucceededEvent(param0: com.mongodb.internal.connection.ResponseBuffers): void;
						sendSucceededEventForOneWayCommand(): void;
					});
					public constructor();
					public sendStartedEvent(): void;
					public sendFailedEvent(param0: java.lang.Throwable): void;
					public sendSucceededEventForOneWayCommand(): void;
					public sendSucceededEvent(param0: com.mongodb.internal.connection.ResponseBuffers): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CommandHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.CommandHelper>;
					public static executeCommand(param0: string, param1: org.bson.BsonDocument, param2: com.mongodb.internal.connection.ClusterClock, param3: com.mongodb.internal.connection.InternalConnection): org.bson.BsonDocument;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CommandMessage extends com.mongodb.internal.connection.RequestMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.CommandMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CommandProtocol<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.connection.CommandProtocol<any>>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.CommandProtocol<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						execute(param0: com.mongodb.internal.connection.InternalConnection): T;
						executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<T>): void;
						sessionContext(param0: com.mongodb.session.SessionContext): com.mongodb.internal.connection.CommandProtocol<T>;
					});
					public constructor();
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<T>): void;
					public sessionContext(param0: com.mongodb.session.SessionContext): com.mongodb.internal.connection.CommandProtocol<T>;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): T;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CommandProtocolImpl<T>  extends com.mongodb.internal.connection.CommandProtocol<any> {
					public static class: java.lang.Class<com.mongodb.internal.connection.CommandProtocolImpl<any>>;
					public sessionContext(param0: com.mongodb.session.SessionContext): com.mongodb.internal.connection.CommandProtocol<any>;
					public sessionContext(param0: com.mongodb.session.SessionContext): com.mongodb.internal.connection.CommandProtocolImpl<any>;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class CommandResultBaseCallback<T>  extends com.mongodb.internal.connection.ResponseCallback {
					public static class: java.lang.Class<com.mongodb.internal.connection.CommandResultBaseCallback<any>>;
					public static LOGGER: com.mongodb.diagnostics.logging.Logger;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public callCallback(param0: any, param1: java.lang.Throwable): void;
					public callCallback(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
					public onResult(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CommandResultCallback<T>  extends com.mongodb.internal.connection.CommandResultBaseCallback<org.bson.BsonDocument> {
					public static class: java.lang.Class<com.mongodb.internal.connection.CommandResultCallback<any>>;
					public static LOGGER: com.mongodb.diagnostics.logging.Logger;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public callCallback(param0: any, param1: java.lang.Throwable): void;
					public callCallback(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
					public onResult(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
					public callCallback(param0: org.bson.BsonDocument, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CompositeByteBuf extends org.bson.ByteBuf {
					public static class: java.lang.Class<com.mongodb.internal.connection.CompositeByteBuf>;
					public flip(): org.bson.ByteBuf;
					public position(param0: number): org.bson.ByteBuf;
					public get(param0: number, param1: native.Array<number>): org.bson.ByteBuf;
					public put(param0: number, param1: number): org.bson.ByteBuf;
					public get(param0: number): number;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bson.ByteBuf;
					public asNIO(): java.nio.ByteBuffer;
					public put(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
					public put(param0: number): org.bson.ByteBuf;
					public get(param0: native.Array<number>): org.bson.ByteBuf;
					public position(): number;
					public duplicate(): org.bson.ByteBuf;
					public capacity(): number;
					public hasRemaining(): boolean;
					public getLong(): number;
					public getDouble(param0: number): number;
					public getDouble(): number;
					public asReadOnly(): org.bson.ByteBuf;
					public getInt(): number;
					public release(): void;
					public getLong(param0: number): number;
					public getInt(param0: number): number;
					public array(): native.Array<number>;
					public getReferenceCount(): number;
					public get(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
					public order(param0: java.nio.ByteOrder): org.bson.ByteBuf;
					public get(): number;
					public clear(): org.bson.ByteBuf;
					public retain(): org.bson.ByteBuf;
					public remaining(): number;
					public limit(): number;
					public limit(param0: number): org.bson.ByteBuf;
				}
				export module CompositeByteBuf {
					export class Component {
						public static class: java.lang.Class<com.mongodb.internal.connection.CompositeByteBuf.Component>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CompressedHeader {
					public static class: java.lang.Class<com.mongodb.internal.connection.CompressedHeader>;
					public static COMPRESSED_HEADER_LENGTH: number;
					public static TOTAL_COMPRESSED_HEADER_LENGTH: number;
					public getMessageHeader(): com.mongodb.internal.connection.MessageHeader;
					public getCompressorId(): number;
					public getOriginalOpcode(): number;
					public getUncompressedSize(): number;
					public getCompressedSize(): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class CompressedMessage extends com.mongodb.internal.connection.RequestMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.CompressedMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class Compressor {
					public static class: java.lang.Class<com.mongodb.internal.connection.Compressor>;
				}
				export module Compressor {
					export class BufferExposingByteArrayOutputStream {
						public static class: java.lang.Class<com.mongodb.internal.connection.Compressor.BufferExposingByteArrayOutputStream>;
					}
					export class ByteBufInputStream {
						public static class: java.lang.Class<com.mongodb.internal.connection.Compressor.ByteBufInputStream>;
						public read(): number;
						public read(param0: native.Array<number>, param1: number, param2: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ConcurrentLinkedDeque<E>  extends java.util.AbstractCollection<any> {
					public static class: java.lang.Class<com.mongodb.internal.connection.ConcurrentLinkedDeque<any>>;
					public addAll(param0: java.util.Collection<any>): boolean;
					public peek(): any;
					public isEmpty(): boolean;
					public add(param0: any): boolean;
					public removeLast(): any;
					public removeFirstOccurrence(param0: any): boolean;
					public addFirst(param0: any): void;
					public size(): number;
					public addLast(param0: any): void;
					public offerFirst(param0: any): boolean;
					public removeLastOccurrence(param0: any): boolean;
					public push(param0: any): void;
					public poll(): any;
					public peekFirst(): any;
					public toArray(param0: native.Array<any>): native.Array<any>;
					public constructor();
					public offerLast(param0: any): boolean;
					public toArray(): native.Array<any>;
					public getLast(): any;
					public clear(): void;
					public getFirst(): any;
					public removeFirst(): any;
					public pop(): any;
					public contains(param0: any): boolean;
					public remove(param0: any): boolean;
					public pollFirst(): any;
					public iterator(): com.mongodb.internal.connection.ConcurrentLinkedDeque.RemovalReportingIterator<any>;
					public descendingIterator(): java.util.Iterator<any>;
					public constructor(param0: java.util.Collection<any>);
					public pollLast(): any;
					public offer(param0: any): boolean;
					public peekLast(): any;
					public remove(): any;
					public element(): any;
				}
				export module ConcurrentLinkedDeque {
					export class CLDIterator extends com.mongodb.internal.connection.ConcurrentLinkedDeque.RemovalReportingIterator<any> {
						public static class: java.lang.Class<com.mongodb.internal.connection.ConcurrentLinkedDeque.CLDIterator>;
						public next(): any;
						public hasNext(): boolean;
						public reportingRemove(): boolean;
						public remove(): void;
					}
					export class Node<E>  extends java.util.concurrent.atomic.AtomicReference<com.mongodb.internal.connection.ConcurrentLinkedDeque.Node<any>> {
						public static class: java.lang.Class<com.mongodb.internal.connection.ConcurrentLinkedDeque.Node<any>>;
					}
					export class RemovalReportingIterator<E>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.mongodb.internal.connection.ConcurrentLinkedDeque.RemovalReportingIterator<any>>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.connection.ConcurrentLinkedDeque$RemovalReportingIterator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							reportingRemove(): boolean;
						});
						public constructor();
						public reportingRemove(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ConcurrentPool<T>  extends com.mongodb.internal.connection.Pool<any> {
					public static class: java.lang.Class<com.mongodb.internal.connection.ConcurrentPool<any>>;
					public constructor(param0: number, param1: com.mongodb.internal.connection.ConcurrentPool.ItemFactory<any>);
					public ensureMinSize(param0: number, param1: boolean): void;
					public getCount(): number;
					public getAvailableCount(): number;
					public prune(): void;
					public toString(): string;
					public release(param0: any): void;
					public get(): any;
					public releasePermit(): void;
					public get(param0: number, param1: java.util.concurrent.TimeUnit): any;
					public acquirePermit(param0: number, param1: java.util.concurrent.TimeUnit): boolean;
					public close(): void;
					public getMaxSize(): number;
					public getInUseCount(): number;
					public release(param0: any, param1: boolean): void;
				}
				export module ConcurrentPool {
					export class ItemFactory<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mongodb.internal.connection.ConcurrentPool.ItemFactory<any>>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.connection.ConcurrentPool$ItemFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							create(param0: boolean): T;
							close(param0: T): void;
							shouldPrune(param0: T): com.mongodb.internal.connection.ConcurrentPool.Prune;
						});
						public constructor();
						public create(param0: boolean): T;
						public shouldPrune(param0: T): com.mongodb.internal.connection.ConcurrentPool.Prune;
						public close(param0: T): void;
					}
					export class Prune {
						public static class: java.lang.Class<com.mongodb.internal.connection.ConcurrentPool.Prune>;
						public static YES: com.mongodb.internal.connection.ConcurrentPool.Prune;
						public static NO: com.mongodb.internal.connection.ConcurrentPool.Prune;
						public static STOP: com.mongodb.internal.connection.ConcurrentPool.Prune;
						public static values(): native.Array<com.mongodb.internal.connection.ConcurrentPool.Prune>;
						public static valueOf(param0: string): com.mongodb.internal.connection.ConcurrentPool.Prune;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ConnectionFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.ConnectionFactory>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ConnectionFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.internal.connection.ProtocolExecutor, param2: com.mongodb.connection.ClusterConnectionMode): com.mongodb.connection.Connection;
						createAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.internal.connection.ProtocolExecutor, param2: com.mongodb.connection.ClusterConnectionMode): com.mongodb.connection.AsyncConnection;
					});
					public constructor();
					public create(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.internal.connection.ProtocolExecutor, param2: com.mongodb.connection.ClusterConnectionMode): com.mongodb.connection.Connection;
					public createAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.internal.connection.ProtocolExecutor, param2: com.mongodb.connection.ClusterConnectionMode): com.mongodb.connection.AsyncConnection;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ConnectionPool {
					public static class: java.lang.Class<com.mongodb.internal.connection.ConnectionPool>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ConnectionPool interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(): com.mongodb.internal.connection.InternalConnection;
						get(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.internal.connection.InternalConnection;
						getAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.InternalConnection>): void;
						invalidate(): void;
						close(): void;
					});
					public constructor();
					public get(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.internal.connection.InternalConnection;
					public getAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.InternalConnection>): void;
					public get(): com.mongodb.internal.connection.InternalConnection;
					public close(): void;
					public invalidate(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DecimalFormatHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.DecimalFormatHelper>;
					public static format(param0: string, param1: number): string;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultAuthenticator extends com.mongodb.internal.connection.Authenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultAuthenticator>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultClusterableServerFactory extends com.mongodb.internal.connection.ClusterableServerFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultClusterableServerFactory>;
					public getSettings(): com.mongodb.connection.ServerSettings;
					public constructor(param0: com.mongodb.connection.ClusterId, param1: com.mongodb.connection.ClusterSettings, param2: com.mongodb.connection.ServerSettings, param3: com.mongodb.connection.ConnectionPoolSettings, param4: com.mongodb.connection.StreamFactory, param5: com.mongodb.connection.StreamFactory, param6: java.util.List<com.mongodb.MongoCredential>, param7: com.mongodb.event.CommandListener, param8: string, param9: com.mongodb.MongoDriverInformation, param10: java.util.List<com.mongodb.MongoCompressor>);
					public create(param0: com.mongodb.ServerAddress, param1: com.mongodb.event.ServerListener, param2: com.mongodb.internal.connection.ClusterClock): com.mongodb.internal.connection.ClusterableServer;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultConnectionFactory extends com.mongodb.internal.connection.ConnectionFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultConnectionFactory>;
					public create(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.internal.connection.ProtocolExecutor, param2: com.mongodb.connection.ClusterConnectionMode): com.mongodb.connection.Connection;
					public createAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.internal.connection.ProtocolExecutor, param2: com.mongodb.connection.ClusterConnectionMode): com.mongodb.connection.AsyncConnection;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultConnectionPool extends com.mongodb.internal.connection.ConnectionPool {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultConnectionPool>;
					public get(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.internal.connection.InternalConnection;
					public getAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.InternalConnection>): void;
					public get(): com.mongodb.internal.connection.InternalConnection;
					public close(): void;
					public doMaintenance(): void;
					public invalidate(): void;
				}
				export module DefaultConnectionPool {
					export class PooledConnection extends com.mongodb.internal.connection.InternalConnection {
						public static class: java.lang.Class<com.mongodb.internal.connection.DefaultConnectionPool.PooledConnection>;
						public receiveMessage(param0: number): com.mongodb.internal.connection.ResponseBuffers;
						public sendMessage(param0: java.util.List<org.bson.ByteBuf>, param1: number): void;
						public close(): void;
						public open(): void;
						public openAsync(param0: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
						public getDescription(): com.mongodb.connection.ConnectionDescription;
						public isClosed(): boolean;
						public sendMessageAsync(param0: java.util.List<org.bson.ByteBuf>, param1: number, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
						public receiveMessageAsync(param0: number, param1: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>): void;
						public sendAndReceiveAsync(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
						public opened(): boolean;
						public getBuffer(param0: number): org.bson.ByteBuf;
						public sendAndReceive(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext): any;
					}
					export class UsageTrackingInternalConnectionItemFactory extends com.mongodb.internal.connection.ConcurrentPool.ItemFactory<com.mongodb.internal.connection.UsageTrackingInternalConnection> {
						public static class: java.lang.Class<com.mongodb.internal.connection.DefaultConnectionPool.UsageTrackingInternalConnectionItemFactory>;
						public shouldPrune(param0: com.mongodb.internal.connection.UsageTrackingInternalConnection): com.mongodb.internal.connection.ConcurrentPool.Prune;
						public shouldPrune(param0: any): com.mongodb.internal.connection.ConcurrentPool.Prune;
						public create(param0: boolean): com.mongodb.internal.connection.UsageTrackingInternalConnection;
						public create(param0: boolean): any;
						public close(param0: com.mongodb.internal.connection.UsageTrackingInternalConnection): void;
						public close(param0: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultDnsSrvRecordMonitor extends com.mongodb.internal.connection.DnsSrvRecordMonitor {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultDnsSrvRecordMonitor>;
					public close(): void;
					public start(): void;
				}
				export module DefaultDnsSrvRecordMonitor {
					export class DnsSrvRecordMonitorRunnable {
						public static class: java.lang.Class<com.mongodb.internal.connection.DefaultDnsSrvRecordMonitor.DnsSrvRecordMonitorRunnable>;
						public run(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultDnsSrvRecordMonitorFactory extends com.mongodb.internal.connection.DnsSrvRecordMonitorFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultDnsSrvRecordMonitorFactory>;
					public create(param0: string, param1: com.mongodb.internal.connection.DnsSrvRecordInitializer): com.mongodb.internal.connection.DnsSrvRecordMonitor;
					public constructor(param0: com.mongodb.connection.ClusterId, param1: com.mongodb.connection.ServerSettings);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultServer extends com.mongodb.internal.connection.ClusterableServer {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultServer>;
					public getDescription(): com.mongodb.connection.ServerDescription;
					public getConnection(): com.mongodb.connection.Connection;
					public connect(): void;
					public close(): void;
					public getConnectionAsync(param0: com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>): void;
					public invalidate(): void;
					public isClosed(): boolean;
				}
				export module DefaultServer {
					export class DefaultServerProtocolExecutor extends com.mongodb.internal.connection.ProtocolExecutor {
						public static class: java.lang.Class<com.mongodb.internal.connection.DefaultServer.DefaultServerProtocolExecutor>;
						public executeAsync(param0: com.mongodb.internal.connection.LegacyProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.async.SingleResultCallback<any>): void;
						public execute(param0: com.mongodb.internal.connection.CommandProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.session.SessionContext): any;
						public execute(param0: com.mongodb.internal.connection.LegacyProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection): any;
						public executeAsync(param0: com.mongodb.internal.connection.CommandProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
					}
					export class DefaultServerStateListener extends com.mongodb.internal.connection.ChangeListener<com.mongodb.connection.ServerDescription> {
						public static class: java.lang.Class<com.mongodb.internal.connection.DefaultServer.DefaultServerStateListener>;
						public stateChanged(param0: com.mongodb.internal.connection.ChangeEvent<com.mongodb.connection.ServerDescription>): void;
						public stateChanged(param0: com.mongodb.internal.connection.ChangeEvent<any>): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultServerConnection extends com.mongodb.internal.connection.AbstractReferenceCounted implements com.mongodb.connection.Connection, com.mongodb.connection.AsyncConnection {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultServerConnection>;
					public retain(): com.mongodb.internal.connection.DefaultServerConnection;
					public insert(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.InsertRequest): com.mongodb.WriteConcernResult;
					public delete(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.DeleteRequest): com.mongodb.WriteConcernResult;
					public getCount(): number;
					public retain(): com.mongodb.binding.ReferenceCounted;
					public retain(): com.mongodb.connection.AsyncConnection;
					public query(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: boolean, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
					public update(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.UpdateRequest): com.mongodb.WriteConcernResult;
					public queryAsync(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: boolean, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: org.bson.codecs.Decoder<any>, param12: com.mongodb.async.SingleResultCallback<any>): void;
					public updateAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.UpdateRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					public commandAsync(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: com.mongodb.async.SingleResultCallback<any>): void;
					public commandAsync(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: boolean, param7: com.mongodb.connection.SplittablePayload, param8: org.bson.FieldNameValidator, param9: com.mongodb.async.SingleResultCallback<any>): void;
					public insertAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.InsertRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					public command(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext, param6: boolean, param7: com.mongodb.connection.SplittablePayload, param8: org.bson.FieldNameValidator): any;
					public killCursorAsync(param0: com.mongodb.MongoNamespace, param1: java.util.List<java.lang.Long>, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public getMoreAsync(param0: com.mongodb.MongoNamespace, param1: number, param2: number, param3: org.bson.codecs.Decoder<any>, param4: com.mongodb.async.SingleResultCallback<any>): void;
					public constructor(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.internal.connection.ProtocolExecutor, param2: com.mongodb.connection.ClusterConnectionMode);
					public killCursor(param0: java.util.List<java.lang.Long>): void;
					public query(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: number, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: boolean, param12: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
					public killCursor(param0: com.mongodb.MongoNamespace, param1: java.util.List<java.lang.Long>): void;
					public getDescription(): com.mongodb.connection.ConnectionDescription;
					public release(): void;
					public getMore(param0: com.mongodb.MongoNamespace, param1: number, param2: number, param3: org.bson.codecs.Decoder<any>): com.mongodb.connection.QueryResult<any>;
					public command(param0: string, param1: org.bson.BsonDocument, param2: org.bson.FieldNameValidator, param3: com.mongodb.ReadPreference, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.session.SessionContext): any;
					public killCursorAsync(param0: java.util.List<java.lang.Long>, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public command(param0: string, param1: org.bson.BsonDocument, param2: boolean, param3: org.bson.FieldNameValidator, param4: org.bson.codecs.Decoder<any>): any;
					public commandAsync(param0: string, param1: org.bson.BsonDocument, param2: boolean, param3: org.bson.FieldNameValidator, param4: org.bson.codecs.Decoder<any>, param5: com.mongodb.async.SingleResultCallback<any>): void;
					public queryAsync(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: org.bson.BsonDocument, param3: number, param4: number, param5: number, param6: boolean, param7: boolean, param8: boolean, param9: boolean, param10: boolean, param11: boolean, param12: org.bson.codecs.Decoder<any>, param13: com.mongodb.async.SingleResultCallback<any>): void;
					public retain(): com.mongodb.connection.Connection;
					public deleteAsync(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.bulk.DeleteRequest, param3: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultServerMonitor extends com.mongodb.internal.connection.ServerMonitor {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultServerMonitor>;
					public connect(): void;
					public close(): void;
					public start(): void;
				}
				export module DefaultServerMonitor {
					export class ServerMonitorRunnable {
						public static class: java.lang.Class<com.mongodb.internal.connection.DefaultServerMonitor.ServerMonitorRunnable>;
						public run(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DefaultServerMonitorFactory extends com.mongodb.internal.connection.ServerMonitorFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.DefaultServerMonitorFactory>;
					public create(param0: com.mongodb.internal.connection.ChangeListener<com.mongodb.connection.ServerDescription>): com.mongodb.internal.connection.ServerMonitor;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DeleteMessage extends com.mongodb.internal.connection.LegacyMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.DeleteMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DeleteProtocol extends com.mongodb.internal.connection.WriteProtocol {
					public static class: java.lang.Class<com.mongodb.internal.connection.DeleteProtocol>;
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					public getAsWriteCommand(param0: com.mongodb.connection.ByteBufferBsonOutput, param1: number): org.bson.BsonDocument;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.WriteConcernResult;
					public createRequestMessage(param0: com.mongodb.internal.connection.MessageSettings): com.mongodb.internal.connection.RequestMessage;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public getLogger(): com.mongodb.diagnostics.logging.Logger;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DescriptionHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.DescriptionHelper>;
					public static createServerDescription(param0: com.mongodb.ServerAddress, param1: org.bson.BsonDocument, param2: com.mongodb.connection.ServerVersion, param3: number): com.mongodb.connection.ServerDescription;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DnsMultiServerCluster extends com.mongodb.internal.connection.AbstractMultiServerCluster {
					public static class: java.lang.Class<com.mongodb.internal.connection.DnsMultiServerCluster>;
					public getDescription(): com.mongodb.connection.ClusterDescription;
					public getSrvResolutionException(): com.mongodb.MongoException;
					public getSettings(): com.mongodb.connection.ClusterSettings;
					public close(): void;
					public selectServerAsync(param0: com.mongodb.selector.ServerSelector, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>): void;
					public getClusterTime(): org.bson.BsonTimestamp;
					public getCurrentDescription(): com.mongodb.connection.ClusterDescription;
					public selectServer(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.Server;
					public constructor(param0: com.mongodb.connection.ClusterId, param1: com.mongodb.connection.ClusterSettings, param2: com.mongodb.internal.connection.ClusterableServerFactory, param3: com.mongodb.internal.connection.DnsSrvRecordMonitorFactory);
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DnsSrvRecordInitializer {
					public static class: java.lang.Class<com.mongodb.internal.connection.DnsSrvRecordInitializer>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.DnsSrvRecordInitializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						initialize(param0: java.util.Collection<com.mongodb.ServerAddress>): void;
						initialize(param0: com.mongodb.MongoException): void;
						getClusterType(): com.mongodb.connection.ClusterType;
					});
					public constructor();
					public getClusterType(): com.mongodb.connection.ClusterType;
					public initialize(param0: java.util.Collection<com.mongodb.ServerAddress>): void;
					public initialize(param0: com.mongodb.MongoException): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DnsSrvRecordMonitor {
					public static class: java.lang.Class<com.mongodb.internal.connection.DnsSrvRecordMonitor>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.DnsSrvRecordMonitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						start(): void;
						close(): void;
					});
					public constructor();
					public close(): void;
					public start(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class DnsSrvRecordMonitorFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.DnsSrvRecordMonitorFactory>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.DnsSrvRecordMonitorFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(param0: string, param1: com.mongodb.internal.connection.DnsSrvRecordInitializer): com.mongodb.internal.connection.DnsSrvRecordMonitor;
					});
					public constructor();
					public create(param0: string, param1: com.mongodb.internal.connection.DnsSrvRecordInitializer): com.mongodb.internal.connection.DnsSrvRecordMonitor;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ElementExtendingBsonWriter extends com.mongodb.internal.connection.LevelCountingBsonWriter {
					public static class: java.lang.Class<com.mongodb.internal.connection.ElementExtendingBsonWriter>;
					public writeInt32(param0: string, param1: number): void;
					public writeBinaryData(param0: org.bson.BsonBinary): void;
					public writeJavaScript(param0: string): void;
					public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
					public writeMinKey(): void;
					public writeName(param0: string): void;
					public writeInt32(param0: number): void;
					public writeDateTime(param0: number): void;
					public writeJavaScript(param0: string, param1: string): void;
					public writeObjectId(param0: org.bson.types.ObjectId): void;
					public writeNull(param0: string): void;
					public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
					public writeNull(): void;
					public writeString(param0: string): void;
					public writeUndefined(): void;
					public writeBoolean(param0: string, param1: boolean): void;
					public writeString(param0: string, param1: string): void;
					public writeDBPointer(param0: org.bson.BsonDbPointer): void;
					public writeEndArray(): void;
					public writeStartArray(param0: string): void;
					public writeStartDocument(): void;
					public writeDecimal128(param0: org.bson.types.Decimal128): void;
					public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
					public writeEndDocument(): void;
					public writeDouble(param0: string, param1: number): void;
					public writeDouble(param0: number): void;
					public writeMaxKey(): void;
					public writeUndefined(param0: string): void;
					public pipe(param0: org.bson.BsonReader): void;
					public writeStartArray(): void;
					public writeJavaScriptWithScope(param0: string, param1: string): void;
					public writeInt64(param0: string, param1: number): void;
					public writeInt64(param0: number): void;
					public writeMinKey(param0: string): void;
					public writeStartDocument(param0: string): void;
					public flush(): void;
					public writeJavaScriptWithScope(param0: string): void;
					public writeMaxKey(param0: string): void;
					public writeBoolean(param0: boolean): void;
					public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
					public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
					public writeDateTime(param0: string, param1: number): void;
					public writeTimestamp(param0: org.bson.BsonTimestamp): void;
					public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
					public writeSymbol(param0: string, param1: string): void;
					public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
					public writeSymbol(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ExponentiallyWeightedMovingAverage {
					public static class: java.lang.Class<com.mongodb.internal.connection.ExponentiallyWeightedMovingAverage>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ExtendedAsynchronousByteChannel {
					public static class: java.lang.Class<com.mongodb.internal.connection.ExtendedAsynchronousByteChannel>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ExtendedAsynchronousByteChannel interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						read(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
						read(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
						write(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
						write(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
					});
					public constructor();
					public write(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
					public write(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
					public read(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
					public read(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class FutureAsyncCompletionHandler<T>  extends com.mongodb.connection.AsyncCompletionHandler<any> {
					public static class: java.lang.Class<com.mongodb.internal.connection.FutureAsyncCompletionHandler<any>>;
					public getOpen(): void;
					public failed(param0: java.lang.Throwable): void;
					public completed(param0: any): void;
					public getRead(): any;
					public getWrite(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class GSSAPIAuthenticator extends com.mongodb.internal.connection.SaslAuthenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.GSSAPIAuthenticator>;
					public getMechanismName(): string;
					public createSaslClient(param0: com.mongodb.ServerAddress): javax.security.sasl.SaslClient;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class GetMoreMessage extends com.mongodb.internal.connection.LegacyMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.GetMoreMessage>;
					public getCursorId(): number;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class GetMoreProtocol<T>  extends com.mongodb.internal.connection.LegacyProtocol<com.mongodb.connection.QueryResult<any>> {
					public static class: java.lang.Class<com.mongodb.internal.connection.GetMoreProtocol<any>>;
					public static LOGGER: com.mongodb.diagnostics.logging.Logger;
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<any>>): void;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.connection.QueryResult<any>;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
				}
				export module GetMoreProtocol {
					export class GetMoreResultCallback extends com.mongodb.internal.connection.ResponseCallback {
						public static class: java.lang.Class<com.mongodb.internal.connection.GetMoreProtocol.GetMoreResultCallback>;
						public onResult(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
						public callCallback(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
						public onResult(param0: any, param1: java.lang.Throwable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class IndexMap {
					public static class: java.lang.Class<com.mongodb.internal.connection.IndexMap>;
					public add(param0: number, param1: number): com.mongodb.internal.connection.IndexMap;
					public constructor();
					public static create(param0: number, param1: number): com.mongodb.internal.connection.IndexMap;
					public static create(): com.mongodb.internal.connection.IndexMap;
					public map(param0: number): number;
				}
				export module IndexMap {
					export class HashBased extends com.mongodb.internal.connection.IndexMap {
						public static class: java.lang.Class<com.mongodb.internal.connection.IndexMap.HashBased>;
						public add(param0: number, param1: number): com.mongodb.internal.connection.IndexMap;
						public map(param0: number): number;
					}
					export class RangeBased extends com.mongodb.internal.connection.IndexMap {
						public static class: java.lang.Class<com.mongodb.internal.connection.IndexMap.RangeBased>;
						public add(param0: number, param1: number): com.mongodb.internal.connection.IndexMap;
						public map(param0: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InsertMessage extends com.mongodb.internal.connection.LegacyMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.InsertMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InsertProtocol extends com.mongodb.internal.connection.WriteProtocol {
					public static class: java.lang.Class<com.mongodb.internal.connection.InsertProtocol>;
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					public getAsWriteCommand(param0: com.mongodb.connection.ByteBufferBsonOutput, param1: number): org.bson.BsonDocument;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.WriteConcernResult;
					public createRequestMessage(param0: com.mongodb.internal.connection.MessageSettings): com.mongodb.internal.connection.RequestMessage;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public getLogger(): com.mongodb.diagnostics.logging.Logger;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InternalConnection extends com.mongodb.connection.BufferProvider {
					public static class: java.lang.Class<com.mongodb.internal.connection.InternalConnection>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.InternalConnection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getDescription(): com.mongodb.connection.ConnectionDescription;
						open(): void;
						openAsync(param0: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
						close(): void;
						opened(): boolean;
						isClosed(): boolean;
						sendAndReceive(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext): any;
						sendAndReceiveAsync(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
						sendMessage(param0: java.util.List<org.bson.ByteBuf>, param1: number): void;
						receiveMessage(param0: number): com.mongodb.internal.connection.ResponseBuffers;
						sendMessageAsync(param0: java.util.List<org.bson.ByteBuf>, param1: number, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
						receiveMessageAsync(param0: number, param1: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>): void;
						getBuffer(param0: number): org.bson.ByteBuf;
					});
					public constructor();
					public opened(): boolean;
					public receiveMessage(param0: number): com.mongodb.internal.connection.ResponseBuffers;
					public sendMessage(param0: java.util.List<org.bson.ByteBuf>, param1: number): void;
					public getDescription(): com.mongodb.connection.ConnectionDescription;
					public sendAndReceiveAsync(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
					public receiveMessageAsync(param0: number, param1: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>): void;
					public sendAndReceive(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext): any;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public sendMessageAsync(param0: java.util.List<org.bson.ByteBuf>, param1: number, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public close(): void;
					public openAsync(param0: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public open(): void;
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InternalConnectionFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.InternalConnectionFactory>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.InternalConnectionFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(param0: com.mongodb.connection.ServerId): com.mongodb.internal.connection.InternalConnection;
					});
					public constructor();
					public create(param0: com.mongodb.connection.ServerId): com.mongodb.internal.connection.InternalConnection;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InternalConnectionInitializer {
					public static class: java.lang.Class<com.mongodb.internal.connection.InternalConnectionInitializer>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.InternalConnectionInitializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						initialize(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.connection.ConnectionDescription;
						initializeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>): void;
					});
					public constructor();
					public initializeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>): void;
					public initialize(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.connection.ConnectionDescription;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InternalStreamConnection extends com.mongodb.internal.connection.InternalConnection {
					public static class: java.lang.Class<com.mongodb.internal.connection.InternalStreamConnection>;
					public opened(): boolean;
					public receiveMessage(param0: number): com.mongodb.internal.connection.ResponseBuffers;
					public sendMessage(param0: java.util.List<org.bson.ByteBuf>, param1: number): void;
					public constructor(param0: com.mongodb.connection.ServerId, param1: com.mongodb.connection.StreamFactory, param2: java.util.List<com.mongodb.MongoCompressor>, param3: com.mongodb.event.CommandListener, param4: com.mongodb.internal.connection.InternalConnectionInitializer);
					public getDescription(): com.mongodb.connection.ConnectionDescription;
					public sendAndReceiveAsync(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
					public receiveMessageAsync(param0: number, param1: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>): void;
					public sendAndReceive(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext): any;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public sendMessageAsync(param0: java.util.List<org.bson.ByteBuf>, param1: number, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public close(): void;
					public openAsync(param0: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public open(): void;
					public isClosed(): boolean;
				}
				export module InternalStreamConnection {
					export class MessageHeaderCallback extends com.mongodb.async.SingleResultCallback<org.bson.ByteBuf> {
						public static class: java.lang.Class<com.mongodb.internal.connection.InternalStreamConnection.MessageHeaderCallback>;
						public onResult(param0: org.bson.ByteBuf, param1: java.lang.Throwable): void;
						public onResult(param0: any, param1: java.lang.Throwable): void;
					}
					export module MessageHeaderCallback {
						export class MessageCallback extends com.mongodb.async.SingleResultCallback<org.bson.ByteBuf> {
							public static class: java.lang.Class<com.mongodb.internal.connection.InternalStreamConnection.MessageHeaderCallback.MessageCallback>;
							public onResult(param0: org.bson.ByteBuf, param1: java.lang.Throwable): void;
							public onResult(param0: any, param1: java.lang.Throwable): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InternalStreamConnectionFactory extends com.mongodb.internal.connection.InternalConnectionFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.InternalStreamConnectionFactory>;
					public create(param0: com.mongodb.connection.ServerId): com.mongodb.internal.connection.InternalConnection;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class InternalStreamConnectionInitializer extends com.mongodb.internal.connection.InternalConnectionInitializer {
					public static class: java.lang.Class<com.mongodb.internal.connection.InternalStreamConnectionInitializer>;
					public initializeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>): void;
					public constructor(param0: java.util.List<com.mongodb.internal.connection.Authenticator>, param1: org.bson.BsonDocument, param2: java.util.List<com.mongodb.MongoCompressor>);
					public initialize(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.connection.ConnectionDescription;
				}
				export module InternalStreamConnectionInitializer {
					export class CompoundAuthenticator extends com.mongodb.async.SingleResultCallback<java.lang.Void> {
						public static class: java.lang.Class<com.mongodb.internal.connection.InternalStreamConnectionInitializer.CompoundAuthenticator>;
						public start(): void;
						public onResult(param0: java.lang.Void, param1: java.lang.Throwable): void;
						public onResult(param0: any, param1: java.lang.Throwable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class Java8SniSslHelper extends com.mongodb.internal.connection.SniSslHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.Java8SniSslHelper>;
					public enableSni(param0: string, param1: javax.net.ssl.SSLParameters): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class KillCursorProtocol extends com.mongodb.internal.connection.LegacyProtocol<java.lang.Void> {
					public static class: java.lang.Class<com.mongodb.internal.connection.KillCursorProtocol>;
					public static LOGGER: com.mongodb.diagnostics.logging.Logger;
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): java.lang.Void;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class KillCursorsMessage extends com.mongodb.internal.connection.LegacyMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.KillCursorsMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class LegacyMessage extends com.mongodb.internal.connection.RequestMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.LegacyMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class LegacyProtocol<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.connection.LegacyProtocol<any>>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.LegacyProtocol<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						execute(param0: com.mongodb.internal.connection.InternalConnection): T;
						executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<T>): void;
						setCommandListener(param0: com.mongodb.event.CommandListener): void;
					});
					public constructor();
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<T>): void;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): T;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class LevelCountingBsonWriter extends org.bson.BsonWriter {
					public static class: java.lang.Class<com.mongodb.internal.connection.LevelCountingBsonWriter>;
					public writeInt32(param0: string, param1: number): void;
					public writeJavaScript(param0: string): void;
					public writeMinKey(): void;
					public writeName(param0: string): void;
					public writeDateTime(param0: number): void;
					public writeJavaScript(param0: string, param1: string): void;
					public writeObjectId(param0: org.bson.types.ObjectId): void;
					public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
					public writeString(param0: string): void;
					public writeUndefined(): void;
					public writeBoolean(param0: string, param1: boolean): void;
					public writeString(param0: string, param1: string): void;
					public writeDBPointer(param0: org.bson.BsonDbPointer): void;
					public writeEndArray(): void;
					public getBsonBinaryWriter(): org.bson.BsonBinaryWriter;
					public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
					public writeUndefined(param0: string): void;
					public writeStartArray(): void;
					public pipe(param0: org.bson.BsonReader): void;
					public writeJavaScriptWithScope(param0: string, param1: string): void;
					public writeInt64(param0: number): void;
					public writeStartDocument(param0: string): void;
					public flush(): void;
					public writeJavaScriptWithScope(param0: string): void;
					public writeMaxKey(param0: string): void;
					public writeBoolean(param0: boolean): void;
					public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
					public writeDateTime(param0: string, param1: number): void;
					public writeSymbol(param0: string, param1: string): void;
					public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
					public writeSymbol(param0: string): void;
					public writeBinaryData(param0: org.bson.BsonBinary): void;
					public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
					public writeInt32(param0: number): void;
					public writeNull(param0: string): void;
					public writeNull(): void;
					public writeStartDocument(): void;
					public writeStartArray(param0: string): void;
					public writeDecimal128(param0: org.bson.types.Decimal128): void;
					public writeEndDocument(): void;
					public writeDouble(param0: string, param1: number): void;
					public writeDouble(param0: number): void;
					public writeMaxKey(): void;
					public writeInt64(param0: string, param1: number): void;
					public writeMinKey(param0: string): void;
					public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
					public writeTimestamp(param0: org.bson.BsonTimestamp): void;
					public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
					public getCurrentLevel(): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class LoggingCommandEventSender extends com.mongodb.internal.connection.CommandEventSender {
					public static class: java.lang.Class<com.mongodb.internal.connection.LoggingCommandEventSender>;
					public sendStartedEvent(): void;
					public sendFailedEvent(param0: java.lang.Throwable): void;
					public sendSucceededEventForOneWayCommand(): void;
					public sendSucceededEvent(param0: com.mongodb.internal.connection.ResponseBuffers): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class MessageHeader {
					public static class: java.lang.Class<com.mongodb.internal.connection.MessageHeader>;
					public static MESSAGE_HEADER_LENGTH: number;
					public getMessageLength(): number;
					public getRequestId(): number;
					public getResponseTo(): number;
					public getOpCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class MessageSettings {
					public static class: java.lang.Class<com.mongodb.internal.connection.MessageSettings>;
					public getServerType(): com.mongodb.connection.ServerType;
					public static builder(): com.mongodb.internal.connection.MessageSettings.Builder;
					public getMaxMessageSize(): number;
					public getMaxDocumentSize(): number;
					public getMaxBatchCount(): number;
					public getMaxWireVersion(): number;
				}
				export module MessageSettings {
					export class Builder {
						public static class: java.lang.Class<com.mongodb.internal.connection.MessageSettings.Builder>;
						public constructor();
						public maxWireVersion(param0: number): com.mongodb.internal.connection.MessageSettings.Builder;
						public maxDocumentSize(param0: number): com.mongodb.internal.connection.MessageSettings.Builder;
						public maxBatchCount(param0: number): com.mongodb.internal.connection.MessageSettings.Builder;
						public build(): com.mongodb.internal.connection.MessageSettings;
						public maxMessageSize(param0: number): com.mongodb.internal.connection.MessageSettings.Builder;
						public serverType(param0: com.mongodb.connection.ServerType): com.mongodb.internal.connection.MessageSettings.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class MongoCredentialWithCache {
					public static class: java.lang.Class<com.mongodb.internal.connection.MongoCredentialWithCache>;
					public withMechanism(param0: com.mongodb.AuthenticationMechanism): com.mongodb.internal.connection.MongoCredentialWithCache;
					public constructor(param0: com.mongodb.MongoCredential, param1: com.mongodb.internal.connection.MongoCredentialWithCache.Cache);
					public getCredential(): com.mongodb.MongoCredential;
					public getFromCache(param0: any, param1: java.lang.Class): any;
					public getAuthenticationMechanism(): com.mongodb.AuthenticationMechanism;
					public static wrapCredentialList(param0: java.util.List<com.mongodb.MongoCredential>): java.util.List<com.mongodb.internal.connection.MongoCredentialWithCache>;
					public constructor(param0: com.mongodb.MongoCredential);
					public putInCache(param0: any, param1: any): void;
				}
				export module MongoCredentialWithCache {
					export class Cache {
						public static class: java.lang.Class<com.mongodb.internal.connection.MongoCredentialWithCache.Cache>;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class MongoWriteConcernWithResponseException extends com.mongodb.MongoException {
					public static class: java.lang.Class<com.mongodb.internal.connection.MongoWriteConcernWithResponseException>;
					public getResponse(): any;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
					public constructor(param0: number, param1: string, param2: java.lang.Throwable);
					public getCause(): com.mongodb.MongoException;
					public constructor(param0: number, param1: string);
					public constructor(param0: com.mongodb.MongoException, param1: any);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class MultiServerCluster extends com.mongodb.internal.connection.AbstractMultiServerCluster {
					public static class: java.lang.Class<com.mongodb.internal.connection.MultiServerCluster>;
					public getDescription(): com.mongodb.connection.ClusterDescription;
					public constructor(param0: com.mongodb.connection.ClusterId, param1: com.mongodb.connection.ClusterSettings, param2: com.mongodb.internal.connection.ClusterableServerFactory);
					public getSettings(): com.mongodb.connection.ClusterSettings;
					public selectServerAsync(param0: com.mongodb.selector.ServerSelector, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>): void;
					public close(): void;
					public getClusterTime(): org.bson.BsonTimestamp;
					public getCurrentDescription(): com.mongodb.connection.ClusterDescription;
					public selectServer(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.Server;
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class NativeAuthenticator extends com.mongodb.internal.connection.Authenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.NativeAuthenticator>;
					public authenticate(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.connection.ConnectionDescription): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class NoOpCommandEventSender extends com.mongodb.internal.connection.CommandEventSender {
					public static class: java.lang.Class<com.mongodb.internal.connection.NoOpCommandEventSender>;
					public sendStartedEvent(): void;
					public sendFailedEvent(param0: java.lang.Throwable): void;
					public sendSucceededEventForOneWayCommand(): void;
					public sendSucceededEvent(param0: com.mongodb.internal.connection.ResponseBuffers): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class NoOpSessionContext extends com.mongodb.session.SessionContext {
					public static class: java.lang.Class<com.mongodb.internal.connection.NoOpSessionContext>;
					public static INSTANCE: com.mongodb.internal.connection.NoOpSessionContext;
					public isCausallyConsistent(): boolean;
					public advanceClusterTime(param0: org.bson.BsonDocument): void;
					public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					public getClusterTime(): org.bson.BsonDocument;
					public notifyMessageSent(): boolean;
					public advanceTransactionNumber(): number;
					public getTransactionNumber(): number;
					public getOperationTime(): org.bson.BsonTimestamp;
					public hasSession(): boolean;
					public getSessionId(): org.bson.BsonDocument;
					public getReadConcern(): com.mongodb.ReadConcern;
					public constructor();
					public hasActiveTransaction(): boolean;
					public isImplicitSession(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class OpCode {
					public static class: java.lang.Class<com.mongodb.internal.connection.OpCode>;
					public static OP_REPLY: com.mongodb.internal.connection.OpCode;
					public static OP_UPDATE: com.mongodb.internal.connection.OpCode;
					public static OP_INSERT: com.mongodb.internal.connection.OpCode;
					public static OP_QUERY: com.mongodb.internal.connection.OpCode;
					public static OP_GETMORE: com.mongodb.internal.connection.OpCode;
					public static OP_DELETE: com.mongodb.internal.connection.OpCode;
					public static OP_KILL_CURSORS: com.mongodb.internal.connection.OpCode;
					public static OP_COMPRESSED: com.mongodb.internal.connection.OpCode;
					public static OP_MSG: com.mongodb.internal.connection.OpCode;
					public static valueOf(param0: string): com.mongodb.internal.connection.OpCode;
					public getValue(): number;
					public static values(): native.Array<com.mongodb.internal.connection.OpCode>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class PlainAuthenticator extends com.mongodb.internal.connection.SaslAuthenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.PlainAuthenticator>;
					public getMechanismName(): string;
					public createSaslClient(param0: com.mongodb.ServerAddress): javax.security.sasl.SaslClient;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class Pool<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.connection.Pool<any>>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.Pool<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(): T;
						get(param0: number, param1: java.util.concurrent.TimeUnit): T;
						release(param0: T): void;
						close(): void;
						release(param0: T, param1: boolean): void;
					});
					public constructor();
					public get(param0: number, param1: java.util.concurrent.TimeUnit): T;
					public release(param0: T): void;
					public close(): void;
					public get(): T;
					public release(param0: T, param1: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class PowerOfTwoBufferPool extends com.mongodb.connection.BufferProvider {
					public static class: java.lang.Class<com.mongodb.internal.connection.PowerOfTwoBufferPool>;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public constructor();
					public constructor(param0: number);
				}
				export module PowerOfTwoBufferPool {
					export class PooledByteBufNIO extends org.bson.ByteBufNIO {
						public static class: java.lang.Class<com.mongodb.internal.connection.PowerOfTwoBufferPool.PooledByteBufNIO>;
						public getLong(): number;
						public get(): number;
						public limit(param0: number): org.bson.ByteBuf;
						public hasRemaining(): boolean;
						public get(param0: number, param1: native.Array<number>): org.bson.ByteBuf;
						public clear(): org.bson.ByteBuf;
						public getDouble(): number;
						public array(): native.Array<number>;
						public capacity(): number;
						public position(): number;
						public limit(): number;
						public remaining(): number;
						public getInt(param0: number): number;
						public getInt(): number;
						public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bson.ByteBuf;
						public put(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
						public get(param0: native.Array<number>): org.bson.ByteBuf;
						public getDouble(param0: number): number;
						public retain(): org.bson.ByteBuf;
						public duplicate(): org.bson.ByteBuf;
						public order(param0: java.nio.ByteOrder): org.bson.ByteBuf;
						public getReferenceCount(): number;
						public position(param0: number): org.bson.ByteBuf;
						public release(): void;
						public put(param0: number): org.bson.ByteBuf;
						public asReadOnly(): org.bson.ByteBuf;
						public getLong(param0: number): number;
						public asNIO(): java.nio.ByteBuffer;
						public put(param0: number, param1: number): org.bson.ByteBuf;
						public get(param0: number): number;
						public retain(): org.bson.ByteBufNIO;
						public flip(): org.bson.ByteBuf;
						public get(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ProtocolExecutor {
					public static class: java.lang.Class<com.mongodb.internal.connection.ProtocolExecutor>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ProtocolExecutor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						execute(param0: com.mongodb.internal.connection.LegacyProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection): any;
						executeAsync(param0: com.mongodb.internal.connection.LegacyProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.async.SingleResultCallback<any>): void;
						execute(param0: com.mongodb.internal.connection.CommandProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.session.SessionContext): any;
						executeAsync(param0: com.mongodb.internal.connection.CommandProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
					});
					public constructor();
					public execute(param0: com.mongodb.internal.connection.LegacyProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection): any;
					public executeAsync(param0: com.mongodb.internal.connection.CommandProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
					public executeAsync(param0: com.mongodb.internal.connection.LegacyProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.async.SingleResultCallback<any>): void;
					public execute(param0: com.mongodb.internal.connection.CommandProtocol<any>, param1: com.mongodb.internal.connection.InternalConnection, param2: com.mongodb.session.SessionContext): any;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ProtocolHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.ProtocolHelper>;
					public static createSpecialException(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress, param2: string): com.mongodb.MongoException;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class QueryMessage extends com.mongodb.internal.connection.BaseQueryMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.QueryMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class QueryProtocol<T>  extends com.mongodb.internal.connection.LegacyProtocol<com.mongodb.connection.QueryResult<any>> {
					public static class: java.lang.Class<com.mongodb.internal.connection.QueryProtocol<any>>;
					public static LOGGER: com.mongodb.diagnostics.logging.Logger;
					public isAwaitData(): boolean;
					public noCursorTimeout(param0: boolean): com.mongodb.internal.connection.QueryProtocol<any>;
					public isSlaveOk(): boolean;
					public slaveOk(param0: boolean): com.mongodb.internal.connection.QueryProtocol<any>;
					public oplogReplay(param0: boolean): com.mongodb.internal.connection.QueryProtocol<any>;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<any>>): void;
					public getCommandListener(): com.mongodb.event.CommandListener;
					public partial(param0: boolean): com.mongodb.internal.connection.QueryProtocol<any>;
					public isPartial(): boolean;
					public awaitData(param0: boolean): com.mongodb.internal.connection.QueryProtocol<any>;
					public isTailableCursor(): boolean;
					public isOplogReplay(): boolean;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.connection.QueryResult<any>;
					public tailableCursor(param0: boolean): com.mongodb.internal.connection.QueryProtocol<any>;
					public isNoCursorTimeout(): boolean;
				}
				export module QueryProtocol {
					export class QueryResultCallback extends com.mongodb.internal.connection.ResponseCallback {
						public static class: java.lang.Class<com.mongodb.internal.connection.QueryProtocol.QueryResultCallback>;
						public onResult(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
						public callCallback(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
						public onResult(param0: any, param1: java.lang.Throwable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ReadConcernAwareNoOpSessionContext extends com.mongodb.internal.connection.NoOpSessionContext {
					public static class: java.lang.Class<com.mongodb.internal.connection.ReadConcernAwareNoOpSessionContext>;
					public isCausallyConsistent(): boolean;
					public advanceClusterTime(param0: org.bson.BsonDocument): void;
					public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					public getClusterTime(): org.bson.BsonDocument;
					public notifyMessageSent(): boolean;
					public advanceTransactionNumber(): number;
					public constructor(param0: com.mongodb.ReadConcern);
					public getTransactionNumber(): number;
					public getOperationTime(): org.bson.BsonTimestamp;
					public getReadConcern(): com.mongodb.ReadConcern;
					public hasSession(): boolean;
					public getSessionId(): org.bson.BsonDocument;
					public constructor();
					public hasActiveTransaction(): boolean;
					public isImplicitSession(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ReadConcernHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.ReadConcernHelper>;
					public static getReadConcernDocument(param0: com.mongodb.session.SessionContext): org.bson.BsonDocument;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ReplyHeader {
					public static class: java.lang.Class<com.mongodb.internal.connection.ReplyHeader>;
					public static REPLY_HEADER_LENGTH: number;
					public static TOTAL_REPLY_HEADER_LENGTH: number;
					public getCursorId(): number;
					public isCursorNotFound(): boolean;
					public isQueryFailure(): boolean;
					public getMessageLength(): number;
					public getResponseFlags(): number;
					public getNumberReturned(): number;
					public getRequestId(): number;
					public getStartingFrom(): number;
					public getResponseTo(): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ReplyMessage<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.connection.ReplyMessage<any>>;
					public getDocuments(): java.util.List<T>;
					public constructor(param0: com.mongodb.internal.connection.ResponseBuffers, param1: org.bson.codecs.Decoder<T>, param2: number);
					public getReplyHeader(): com.mongodb.internal.connection.ReplyHeader;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class RequestMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.RequestMessage>;
					public getSettings(): com.mongodb.internal.connection.MessageSettings;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public getId(): number;
					public writeMessagePrologue(param0: org.bson.io.BsonOutput): void;
					public static getCurrentGlobalId(): number;
					public getEncodingMetadata(): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public addCollectibleDocument(param0: org.bson.BsonDocument, param1: org.bson.io.BsonOutput, param2: org.bson.FieldNameValidator): void;
					public backpatchMessageLength(param0: number, param1: org.bson.io.BsonOutput): void;
					public addDocument(param0: org.bson.BsonDocument, param1: org.bson.io.BsonOutput, param2: org.bson.FieldNameValidator): void;
					public encode(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): void;
					public getCollectionName(): string;
					public getOpCode(): com.mongodb.internal.connection.OpCode;
					public addDocument(param0: org.bson.BsonDocument, param1: org.bson.io.BsonOutput, param2: org.bson.FieldNameValidator, param3: java.util.List<org.bson.BsonElement>): void;
				}
				export module RequestMessage {
					export class EncodingMetadata {
						public static class: java.lang.Class<com.mongodb.internal.connection.RequestMessage.EncodingMetadata>;
						public getFirstDocumentPosition(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ResponseBuffers {
					public static class: java.lang.Class<com.mongodb.internal.connection.ResponseBuffers>;
					public reset(): void;
					public close(): void;
					public getReplyHeader(): com.mongodb.internal.connection.ReplyHeader;
					public getBodyByteBuffer(): org.bson.ByteBuf;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class ResponseCallback extends com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers> {
					public static class: java.lang.Class<com.mongodb.internal.connection.ResponseCallback>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public callCallback(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
					public onResult(param0: com.mongodb.internal.connection.ResponseBuffers, param1: java.lang.Throwable): void;
					public getServerAddress(): com.mongodb.ServerAddress;
					public getRequestId(): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class SaslAuthenticator extends com.mongodb.internal.connection.Authenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.SaslAuthenticator>;
					public authenticate(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.connection.ConnectionDescription): void;
					public getMechanismName(): string;
					public createSaslClient(param0: com.mongodb.ServerAddress): javax.security.sasl.SaslClient;
				}
				export module SaslAuthenticator {
					export class Continuator extends com.mongodb.async.SingleResultCallback<org.bson.BsonDocument> {
						public static class: java.lang.Class<com.mongodb.internal.connection.SaslAuthenticator.Continuator>;
						public onResult(param0: org.bson.BsonDocument, param1: java.lang.Throwable): void;
						public start(): void;
						public onResult(param0: any, param1: java.lang.Throwable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ScramShaAuthenticator extends com.mongodb.internal.connection.SaslAuthenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.ScramShaAuthenticator>;
					public getMechanismName(): string;
					public createSaslClient(param0: com.mongodb.ServerAddress): javax.security.sasl.SaslClient;
				}
				export module ScramShaAuthenticator {
					export class AuthenticationHashGenerator {
						public static class: java.lang.Class<com.mongodb.internal.connection.ScramShaAuthenticator.AuthenticationHashGenerator>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.connection.ScramShaAuthenticator$AuthenticationHashGenerator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							generate(param0: com.mongodb.MongoCredential): string;
						});
						public constructor();
						public generate(param0: com.mongodb.MongoCredential): string;
					}
					export class CacheKey {
						public static class: java.lang.Class<com.mongodb.internal.connection.ScramShaAuthenticator.CacheKey>;
						public equals(param0: any): boolean;
						public hashCode(): number;
					}
					export class CacheValue {
						public static class: java.lang.Class<com.mongodb.internal.connection.ScramShaAuthenticator.CacheValue>;
					}
					export class DefaultRandomStringGenerator extends com.mongodb.internal.connection.ScramShaAuthenticator.RandomStringGenerator {
						public static class: java.lang.Class<com.mongodb.internal.connection.ScramShaAuthenticator.DefaultRandomStringGenerator>;
						public generate(param0: number): string;
					}
					export class RandomStringGenerator {
						public static class: java.lang.Class<com.mongodb.internal.connection.ScramShaAuthenticator.RandomStringGenerator>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.connection.ScramShaAuthenticator$RandomStringGenerator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							generate(param0: number): string;
						});
						public constructor();
						public generate(param0: number): string;
					}
					export class ScramShaSaslClient {
						public static class: java.lang.Class<com.mongodb.internal.connection.ScramShaAuthenticator.ScramShaSaslClient>;
						public getMechanismName(): string;
						public isComplete(): boolean;
						public getNegotiatedProperty(param0: string): any;
						public unwrap(param0: native.Array<number>, param1: number, param2: number): native.Array<number>;
						public hasInitialResponse(): boolean;
						public evaluateChallenge(param0: native.Array<number>): native.Array<number>;
						public wrap(param0: native.Array<number>, param1: number, param2: number): native.Array<number>;
						public dispose(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SendMessageCallback<T>  extends com.mongodb.async.SingleResultCallback<java.lang.Void> {
					public static class: java.lang.Class<com.mongodb.internal.connection.SendMessageCallback<any>>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public onResult(param0: java.lang.Void, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ServerAddressHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.ServerAddressHelper>;
					public static createServerAddress(param0: string, param1: number): com.mongodb.ServerAddress;
					public static createServerAddress(param0: string): com.mongodb.ServerAddress;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ServerMonitor {
					public static class: java.lang.Class<com.mongodb.internal.connection.ServerMonitor>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ServerMonitor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						start(): void;
						connect(): void;
						close(): void;
					});
					public constructor();
					public connect(): void;
					public close(): void;
					public start(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ServerMonitorFactory {
					public static class: java.lang.Class<com.mongodb.internal.connection.ServerMonitorFactory>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.ServerMonitorFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(param0: com.mongodb.internal.connection.ChangeListener<com.mongodb.connection.ServerDescription>): com.mongodb.internal.connection.ServerMonitor;
					});
					public constructor();
					public create(param0: com.mongodb.internal.connection.ChangeListener<com.mongodb.connection.ServerDescription>): com.mongodb.internal.connection.ServerMonitor;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SingleServerCluster extends com.mongodb.internal.connection.BaseCluster {
					public static class: java.lang.Class<com.mongodb.internal.connection.SingleServerCluster>;
					public getDescription(): com.mongodb.connection.ClusterDescription;
					public getServer(param0: com.mongodb.ServerAddress): com.mongodb.internal.connection.ClusterableServer;
					public constructor(param0: com.mongodb.connection.ClusterId, param1: com.mongodb.connection.ClusterSettings, param2: com.mongodb.internal.connection.ClusterableServerFactory);
					public connect(): void;
					public getSettings(): com.mongodb.connection.ClusterSettings;
					public close(): void;
					public selectServerAsync(param0: com.mongodb.selector.ServerSelector, param1: com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>): void;
					public getClusterTime(): org.bson.BsonTimestamp;
					public getCurrentDescription(): com.mongodb.connection.ClusterDescription;
					public selectServer(param0: com.mongodb.selector.ServerSelector): com.mongodb.connection.Server;
					public isClosed(): boolean;
				}
				export module SingleServerCluster {
					export class DefaultServerStateListener extends com.mongodb.event.ServerListenerAdapter {
						public static class: java.lang.Class<com.mongodb.internal.connection.SingleServerCluster.DefaultServerStateListener>;
						public serverDescriptionChanged(param0: com.mongodb.event.ServerDescriptionChangedEvent): void;
						public serverOpening(param0: com.mongodb.event.ServerOpeningEvent): void;
						public serverClosed(param0: com.mongodb.event.ServerClosedEvent): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SnappyCompressor extends com.mongodb.internal.connection.Compressor {
					public static class: java.lang.Class<com.mongodb.internal.connection.SnappyCompressor>;
					public getName(): string;
					public getId(): number;
					public compress(param0: java.util.List<org.bson.ByteBuf>, param1: org.bson.io.BsonOutput): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SniSslHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.SniSslHelper>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.connection.SniSslHelper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						enableSni(param0: string, param1: javax.net.ssl.SSLParameters): void;
					});
					public constructor();
					public enableSni(param0: string, param1: javax.net.ssl.SSLParameters): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SocketChannelStream extends com.mongodb.connection.Stream {
					public static class: java.lang.Class<com.mongodb.internal.connection.SocketChannelStream>;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					public getAddress(): com.mongodb.ServerAddress;
					public close(): void;
					public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.connection.SocketSettings, param2: com.mongodb.connection.SslSettings, param3: com.mongodb.connection.BufferProvider);
					public open(): void;
					public write(param0: java.util.List<org.bson.ByteBuf>): void;
					public read(param0: number): org.bson.ByteBuf;
					public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SocketStream extends com.mongodb.connection.Stream {
					public static class: java.lang.Class<com.mongodb.internal.connection.SocketStream>;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					public getAddress(): com.mongodb.ServerAddress;
					public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.connection.SocketSettings, param2: com.mongodb.connection.SslSettings, param3: javax.net.SocketFactory, param4: com.mongodb.connection.BufferProvider);
					public close(): void;
					public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public open(): void;
					public write(param0: java.util.List<org.bson.ByteBuf>): void;
					public read(param0: number): org.bson.ByteBuf;
					public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SocketStreamHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.SocketStreamHelper>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SplittablePayloadBsonWriter extends com.mongodb.internal.connection.LevelCountingBsonWriter {
					public static class: java.lang.Class<com.mongodb.internal.connection.SplittablePayloadBsonWriter>;
					public writeInt32(param0: string, param1: number): void;
					public writeBinaryData(param0: org.bson.BsonBinary): void;
					public writeJavaScript(param0: string): void;
					public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
					public writeMinKey(): void;
					public writeName(param0: string): void;
					public writeInt32(param0: number): void;
					public writeDateTime(param0: number): void;
					public writeJavaScript(param0: string, param1: string): void;
					public writeObjectId(param0: org.bson.types.ObjectId): void;
					public writeNull(param0: string): void;
					public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
					public writeNull(): void;
					public writeString(param0: string): void;
					public writeUndefined(): void;
					public writeBoolean(param0: string, param1: boolean): void;
					public writeString(param0: string, param1: string): void;
					public writeDBPointer(param0: org.bson.BsonDbPointer): void;
					public writeEndArray(): void;
					public writeStartDocument(): void;
					public writeStartArray(param0: string): void;
					public writeDecimal128(param0: org.bson.types.Decimal128): void;
					public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
					public writeEndDocument(): void;
					public writeDouble(param0: string, param1: number): void;
					public writeDouble(param0: number): void;
					public writeMaxKey(): void;
					public writeUndefined(param0: string): void;
					public writeStartArray(): void;
					public pipe(param0: org.bson.BsonReader): void;
					public writeJavaScriptWithScope(param0: string, param1: string): void;
					public writeInt64(param0: string, param1: number): void;
					public writeInt64(param0: number): void;
					public writeMinKey(param0: string): void;
					public writeStartDocument(param0: string): void;
					public flush(): void;
					public writeJavaScriptWithScope(param0: string): void;
					public writeMaxKey(param0: string): void;
					public writeBoolean(param0: boolean): void;
					public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
					public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
					public writeDateTime(param0: string, param1: number): void;
					public writeTimestamp(param0: org.bson.BsonTimestamp): void;
					public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
					public writeSymbol(param0: string, param1: string): void;
					public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
					public writeSymbol(param0: string): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class SslHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.SslHelper>;
					public static enableHostNameVerification(param0: javax.net.ssl.SSLParameters): void;
					public static enableSni(param0: string, param1: javax.net.ssl.SSLParameters): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class Time {
					public static class: java.lang.Class<com.mongodb.internal.connection.Time>;
					public static nanoTime(): number;
					public static makeTimeMove(): void;
					public static makeTimeConstant(): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class UnixSocketChannelStream extends com.mongodb.internal.connection.SocketChannelStream {
					public static class: java.lang.Class<com.mongodb.internal.connection.UnixSocketChannelStream>;
					public readAsync(param0: number, param1: com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>): void;
					public getAddress(): com.mongodb.ServerAddress;
					public close(): void;
					public openAsync(param0: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public constructor(param0: com.mongodb.ServerAddress, param1: com.mongodb.connection.SocketSettings, param2: com.mongodb.connection.SslSettings, param3: com.mongodb.connection.BufferProvider);
					public open(): void;
					public constructor(param0: com.mongodb.UnixServerAddress, param1: com.mongodb.connection.SocketSettings, param2: com.mongodb.connection.SslSettings, param3: com.mongodb.connection.BufferProvider);
					public write(param0: java.util.List<org.bson.ByteBuf>): void;
					public read(param0: number): org.bson.ByteBuf;
					public writeAsync(param0: java.util.List<org.bson.ByteBuf>, param1: com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>): void;
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class UpdateMessage extends com.mongodb.internal.connection.LegacyMessage {
					public static class: java.lang.Class<com.mongodb.internal.connection.UpdateMessage>;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
					public encodeMessageBodyWithMetadata(param0: org.bson.io.BsonOutput, param1: com.mongodb.session.SessionContext): com.mongodb.internal.connection.RequestMessage.EncodingMetadata;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class UpdateProtocol extends com.mongodb.internal.connection.WriteProtocol {
					public static class: java.lang.Class<com.mongodb.internal.connection.UpdateProtocol>;
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					public getAsWriteCommand(param0: com.mongodb.connection.ByteBufferBsonOutput, param1: number): org.bson.BsonDocument;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.WriteConcernResult;
					public createRequestMessage(param0: com.mongodb.internal.connection.MessageSettings): com.mongodb.internal.connection.RequestMessage;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public getLogger(): com.mongodb.diagnostics.logging.Logger;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class UsageTrackingInternalConnection extends com.mongodb.internal.connection.InternalConnection {
					public static class: java.lang.Class<com.mongodb.internal.connection.UsageTrackingInternalConnection>;
					public opened(): boolean;
					public receiveMessage(param0: number): com.mongodb.internal.connection.ResponseBuffers;
					public sendMessage(param0: java.util.List<org.bson.ByteBuf>, param1: number): void;
					public sendAndReceiveAsync(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext, param3: com.mongodb.async.SingleResultCallback<any>): void;
					public getDescription(): com.mongodb.connection.ConnectionDescription;
					public receiveMessageAsync(param0: number, param1: com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>): void;
					public sendAndReceive(param0: com.mongodb.internal.connection.CommandMessage, param1: org.bson.codecs.Decoder<any>, param2: com.mongodb.session.SessionContext): any;
					public getBuffer(param0: number): org.bson.ByteBuf;
					public sendMessageAsync(param0: java.util.List<org.bson.ByteBuf>, param1: number, param2: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public close(): void;
					public openAsync(param0: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
					public open(): void;
					public isClosed(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class WriteCommandResultHelper {
					public static class: java.lang.Class<com.mongodb.internal.connection.WriteCommandResultHelper>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export abstract class WriteProtocol extends com.mongodb.internal.connection.LegacyProtocol<com.mongodb.WriteConcernResult> {
					public static class: java.lang.Class<com.mongodb.internal.connection.WriteProtocol>;
					public isOrdered(): boolean;
					public setCommandListener(param0: com.mongodb.event.CommandListener): void;
					public getCommandName(param0: com.mongodb.internal.connection.RequestMessage): string;
					public getNamespace(): com.mongodb.MongoNamespace;
					public getBaseCommandDocument(param0: string): org.bson.BsonDocument;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
					public getAsWriteCommand(param0: com.mongodb.connection.ByteBufferBsonOutput, param1: number): org.bson.BsonDocument;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): com.mongodb.WriteConcernResult;
					public createRequestMessage(param0: com.mongodb.internal.connection.MessageSettings): com.mongodb.internal.connection.RequestMessage;
					public execute(param0: com.mongodb.internal.connection.InternalConnection): any;
					public getLogger(): com.mongodb.diagnostics.logging.Logger;
					public executeAsync(param0: com.mongodb.internal.connection.InternalConnection, param1: com.mongodb.async.SingleResultCallback<any>): void;
				}
				export module WriteProtocol {
					export class UnacknowledgedWriteResultCallback extends com.mongodb.async.SingleResultCallback<java.lang.Void> {
						public static class: java.lang.Class<com.mongodb.internal.connection.WriteProtocol.UnacknowledgedWriteResultCallback>;
						public onResult(param0: java.lang.Void, param1: java.lang.Throwable): void;
						public onResult(param0: any, param1: java.lang.Throwable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class X509Authenticator extends com.mongodb.internal.connection.Authenticator {
					public static class: java.lang.Class<com.mongodb.internal.connection.X509Authenticator>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export class ZlibCompressor extends com.mongodb.internal.connection.Compressor {
					public static class: java.lang.Class<com.mongodb.internal.connection.ZlibCompressor>;
					public getName(): string;
					public getId(): number;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class BufferAllocator {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.BufferAllocator>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.connection.tlschannel.BufferAllocator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							allocate(param0: number): org.bson.ByteBuf;
							free(param0: org.bson.ByteBuf): void;
						});
						public constructor();
						public allocate(param0: number): org.bson.ByteBuf;
						public free(param0: org.bson.ByteBuf): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class ClientTlsChannel extends com.mongodb.internal.connection.tlschannel.TlsChannel {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.ClientTlsChannel>;
						public write(param0: java.nio.ByteBuffer): number;
						public read(param0: java.nio.ByteBuffer): number;
						public close(): void;
						public shutdownSent(): boolean;
						public renegotiate(): void;
						public read(param0: native.Array<java.nio.ByteBuffer>): number;
						public getUnderlying(): java.nio.channels.ByteChannel;
						public shutdown(): boolean;
						public getPlainBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
						public write(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number): number;
						public static newBuilder(param0: java.nio.channels.ByteChannel, param1: javax.net.ssl.SSLContext): com.mongodb.internal.connection.tlschannel.ClientTlsChannel.Builder;
						public getSslEngine(): javax.net.ssl.SSLEngine;
						public static newBuilder(param0: java.nio.channels.ByteChannel, param1: javax.net.ssl.SSLEngine): com.mongodb.internal.connection.tlschannel.ClientTlsChannel.Builder;
						public shutdownReceived(): boolean;
						public getRunTasks(): boolean;
						public getSessionInitCallback(): any /* any*/;
						public getEncryptedBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
						public write(param0: native.Array<java.nio.ByteBuffer>): number;
						public isOpen(): boolean;
						public handshake(): void;
						public read(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number): number;
					}
					export module ClientTlsChannel {
						export class Builder extends com.mongodb.internal.connection.tlschannel.TlsChannelBuilder<com.mongodb.internal.connection.tlschannel.ClientTlsChannel.Builder> {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.ClientTlsChannel.Builder>;
							public build(): com.mongodb.internal.connection.tlschannel.ClientTlsChannel;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class NeedsReadException extends com.mongodb.internal.connection.tlschannel.WouldBlockException {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.NeedsReadException>;
						public constructor();
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class NeedsTaskException extends com.mongodb.internal.connection.tlschannel.TlsChannelFlowControlException {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.NeedsTaskException>;
						public constructor();
						public getTask(): java.lang.Runnable;
						public constructor(param0: java.lang.Runnable);
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class NeedsWriteException extends com.mongodb.internal.connection.tlschannel.WouldBlockException {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.NeedsWriteException>;
						public constructor();
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class TlsChannel {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.TlsChannel>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.connection.tlschannel.TlsChannel interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getUnderlying(): java.nio.channels.ByteChannel;
							getSslEngine(): javax.net.ssl.SSLEngine;
							getSessionInitCallback(): any /* any*/;
							getPlainBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
							getEncryptedBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
							getRunTasks(): boolean;
							read(param0: java.nio.ByteBuffer): number;
							write(param0: java.nio.ByteBuffer): number;
							renegotiate(): void;
							handshake(): void;
							write(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number): number;
							write(param0: native.Array<java.nio.ByteBuffer>): number;
							read(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number): number;
							read(param0: native.Array<java.nio.ByteBuffer>): number;
							close(): void;
							shutdown(): boolean;
							shutdownReceived(): boolean;
							shutdownSent(): boolean;
						});
						public constructor();
						public write(param0: java.nio.ByteBuffer): number;
						public read(param0: java.nio.ByteBuffer): number;
						public close(): void;
						public shutdownSent(): boolean;
						public renegotiate(): void;
						public read(param0: native.Array<java.nio.ByteBuffer>): number;
						public getUnderlying(): java.nio.channels.ByteChannel;
						public shutdown(): boolean;
						public getPlainBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
						public write(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number): number;
						public getSslEngine(): javax.net.ssl.SSLEngine;
						public shutdownReceived(): boolean;
						public getRunTasks(): boolean;
						public getSessionInitCallback(): any /* any*/;
						public getEncryptedBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
						public write(param0: native.Array<java.nio.ByteBuffer>): number;
						public handshake(): void;
						public read(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export abstract class TlsChannelBuilder<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.TlsChannelBuilder<any>>;
						public withEncryptedBufferAllocator(param0: com.mongodb.internal.connection.tlschannel.BufferAllocator): T;
						public withRunTasks(param0: boolean): T;
						public withReleaseBuffers(param0: boolean): T;
						public withSessionInitCallback(param0: any /* any*/): T;
						public withWaitForCloseConfirmation(param0: boolean): T;
						public withPlainBufferAllocator(param0: com.mongodb.internal.connection.tlschannel.BufferAllocator): T;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export abstract class TlsChannelFlowControlException {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.TlsChannelFlowControlException>;
						public constructor();
						public fillInStackTrace(): java.lang.Throwable;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class TrackingAllocator extends com.mongodb.internal.connection.tlschannel.BufferAllocator {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.TrackingAllocator>;
						public allocate(param0: number): org.bson.ByteBuf;
						public bytesAllocated(): number;
						public buffersAllocated(): number;
						public currentAllocation(): number;
						public free(param0: org.bson.ByteBuf): void;
						public maxAllocation(): number;
						public buffersDeallocated(): number;
						public constructor(param0: com.mongodb.internal.connection.tlschannel.BufferAllocator);
						public bytesDeallocated(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export class WouldBlockException extends com.mongodb.internal.connection.tlschannel.TlsChannelFlowControlException {
						public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.WouldBlockException>;
						public constructor();
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module async {
						export class AsynchronousTlsChannel extends com.mongodb.internal.connection.ExtendedAsynchronousByteChannel {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel>;
							public read(param0: java.nio.ByteBuffer, param1: any, param2: java.nio.channels.CompletionHandler): void;
							public write(param0: java.nio.ByteBuffer): java.util.concurrent.Future<java.lang.Integer>;
							public close(): void;
							public write(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
							public read(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
							public read(param0: java.nio.ByteBuffer): java.util.concurrent.Future<java.lang.Integer>;
							public write(param0: java.nio.ByteBuffer, param1: any, param2: java.nio.channels.CompletionHandler): void;
							public read(param0: java.nio.ByteBuffer, param1: number, param2: java.util.concurrent.TimeUnit, param3: any, param4: java.nio.channels.CompletionHandler): void;
							public write(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number, param3: number, param4: java.util.concurrent.TimeUnit, param5: any, param6: java.nio.channels.CompletionHandler): void;
							public isOpen(): boolean;
							public constructor(param0: com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup, param1: com.mongodb.internal.connection.tlschannel.TlsChannel, param2: java.nio.channels.SocketChannel);
						}
						export module AsynchronousTlsChannel {
							export class FutureReadResult extends java.util.concurrent.CompletableFuture<java.lang.Integer> {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.FutureReadResult>;
								public cancel(param0: boolean): boolean;
							}
							export class FutureWriteResult extends java.util.concurrent.CompletableFuture<java.lang.Integer> {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.FutureWriteResult>;
								public cancel(param0: boolean): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module async {
						export class AsynchronousTlsChannelGroup {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup>;
							public constructor();
							public getSuccessfulWriteCount(): number;
							public shutdownNow(): void;
							public awaitTermination(param0: number, param1: java.util.concurrent.TimeUnit): boolean;
							public getCancelledWriteCount(): number;
							public shutdown(): void;
							public getCurrentRegistrationCount(): number;
							public constructor(param0: number);
							public getStartedWriteCount(): number;
							public getCancelledReadCount(): number;
							public getSuccessfulReadCount(): number;
							public isShutdown(): boolean;
							public getStartedReadCount(): number;
							public getFailedReadCount(): number;
							public getCurrentReadCount(): number;
							public getCurrentWriteCount(): number;
							public isTerminated(): boolean;
							public getFailedWriteCount(): number;
						}
						export module AsynchronousTlsChannelGroup {
							export abstract class Operation {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Operation>;
							}
							export class ReadOperation extends com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Operation {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.ReadOperation>;
							}
							export class RegisteredSocket {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.RegisteredSocket>;
								public close(): void;
							}
							export class Shutdown {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Shutdown>;
								public static No: com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Shutdown;
								public static Wait: com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Shutdown;
								public static Immediate: com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Shutdown;
								public static values(): native.Array<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Shutdown>;
								public static valueOf(param0: string): com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Shutdown;
							}
							export class WriteOperation extends com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.Operation {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.WriteOperation>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module impl {
						export class BufferHolder {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.impl.BufferHolder>;
							public name: string;
							public allocator: com.mongodb.internal.connection.tlschannel.BufferAllocator;
							public plainData: boolean;
							public maxSize: number;
							public opportunisticDispose: boolean;
							public buffer: java.nio.ByteBuffer;
							public lastSize: number;
							public release(): boolean;
							public nullOrEmpty(): boolean;
							public resize(param0: number): void;
							public dispose(): boolean;
							public zero(): void;
							public prepare(): void;
							public zeroRemaining(): void;
							public constructor(param0: string, param1: com.mongodb.internal.connection.tlschannel.BufferAllocator, param2: number, param3: number, param4: boolean, param5: boolean);
							public enlarge(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module impl {
						export class ByteBufferSet {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet>;
							public array: native.Array<java.nio.ByteBuffer>;
							public offset: number;
							public length: number;
							public remaining(): number;
							public constructor(param0: java.nio.ByteBuffer);
							public isReadOnly(): boolean;
							public getRemaining(param0: java.nio.ByteBuffer): number;
							public hasRemaining(): boolean;
							public toString(): string;
							public constructor(param0: native.Array<java.nio.ByteBuffer>, param1: number, param2: number);
							public constructor(param0: native.Array<java.nio.ByteBuffer>);
							public get(param0: java.nio.ByteBuffer, param1: number): com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet;
							public putRemaining(param0: java.nio.ByteBuffer): number;
							public put(param0: java.nio.ByteBuffer, param1: number): com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module impl {
						export class ByteBufferUtil {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.impl.ByteBufferUtil>;
							public constructor();
							public static copy(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: number): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module impl {
						export class TlsChannelImpl {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl>;
							public close(): void;
							public getSessionInitCallback(): any /* any*/;
							public engine(): javax.net.ssl.SSLEngine;
							public handshake(): void;
							public static checkReadBuffer(param0: com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet): void;
							public plainReadableChannel(): java.nio.channels.ReadableByteChannel;
							public read(param0: com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet): number;
							public getRunTasks(): boolean;
							public getPlainBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
							public constructor(param0: java.nio.channels.ReadableByteChannel, param1: java.nio.channels.WritableByteChannel, param2: javax.net.ssl.SSLEngine, param3: java.util.Optional<com.mongodb.internal.connection.tlschannel.impl.BufferHolder>, param4: any /* any*/, param5: boolean, param6: com.mongodb.internal.connection.tlschannel.TrackingAllocator, param7: com.mongodb.internal.connection.tlschannel.TrackingAllocator, param8: boolean, param9: boolean);
							public isOpen(): boolean;
							public write(param0: java.nio.ByteBuffer): number;
							public getEncryptedBufferAllocator(): com.mongodb.internal.connection.tlschannel.TrackingAllocator;
							public write(param0: com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet): number;
							public read(param0: java.nio.ByteBuffer): number;
							public static readFromChannel(param0: java.nio.channels.ReadableByteChannel, param1: java.nio.ByteBuffer): number;
							public shutdownReceived(): boolean;
							public shutdownSent(): boolean;
							public shutdown(): boolean;
							public plainWritableChannel(): java.nio.channels.WritableByteChannel;
							public renegotiate(): void;
						}
						export module TlsChannelImpl {
							export class EofException {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.EofException>;
								public constructor();
								public fillInStackTrace(): java.lang.Throwable;
							}
							export class UnwrapResult {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.UnwrapResult>;
							}
							export class WrapResult {
								public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.WrapResult>;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module util {
						export class TlsChannelCallbackException {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.util.TlsChannelCallbackException>;
							public constructor(param0: string, param1: java.lang.Throwable);
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module connection {
				export module tlschannel {
					export module util {
						export class Util {
							public static class: java.lang.Class<com.mongodb.internal.connection.tlschannel.util.Util>;
							public constructor();
							public static resultToString(param0: javax.net.ssl.SSLEngineResult): string;
							public static assertTrue(param0: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module dns {
				export class DefaultDnsResolver extends com.mongodb.internal.dns.DnsResolver {
					public static class: java.lang.Class<com.mongodb.internal.dns.DefaultDnsResolver>;
					public constructor();
					public resolveHostFromSrvRecords(param0: string): java.util.List<string>;
					public resolveAdditionalQueryParametersFromTxtRecords(param0: string): string;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module dns {
				export class DnsResolver {
					public static class: java.lang.Class<com.mongodb.internal.dns.DnsResolver>;
					/**
					 * Constructs a new instance of the com.mongodb.internal.dns.DnsResolver interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						resolveHostFromSrvRecords(param0: string): java.util.List<string>;
						resolveAdditionalQueryParametersFromTxtRecords(param0: string): string;
					});
					public constructor();
					public resolveHostFromSrvRecords(param0: string): java.util.List<string>;
					public resolveAdditionalQueryParametersFromTxtRecords(param0: string): string;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module event {
				export class ClusterListenerMulticaster extends com.mongodb.event.ClusterListener {
					public static class: java.lang.Class<com.mongodb.internal.event.ClusterListenerMulticaster>;
					public clusterDescriptionChanged(param0: com.mongodb.event.ClusterDescriptionChangedEvent): void;
					public clusterOpening(param0: com.mongodb.event.ClusterOpeningEvent): void;
					public clusterClosed(param0: com.mongodb.event.ClusterClosedEvent): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module event {
				export class CommandListenerMulticaster extends com.mongodb.event.CommandListener {
					public static class: java.lang.Class<com.mongodb.internal.event.CommandListenerMulticaster>;
					public commandSucceeded(param0: com.mongodb.event.CommandSucceededEvent): void;
					public commandFailed(param0: com.mongodb.event.CommandFailedEvent): void;
					public commandStarted(param0: com.mongodb.event.CommandStartedEvent): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module event {
				export class ConnectionPoolListenerMulticaster extends com.mongodb.event.ConnectionPoolListener {
					public static class: java.lang.Class<com.mongodb.internal.event.ConnectionPoolListenerMulticaster>;
					public connectionCheckedOut(param0: com.mongodb.event.ConnectionCheckedOutEvent): void;
					public connectionRemoved(param0: com.mongodb.event.ConnectionRemovedEvent): void;
					public waitQueueExited(param0: com.mongodb.event.ConnectionPoolWaitQueueExitedEvent): void;
					public waitQueueEntered(param0: com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent): void;
					public connectionPoolClosed(param0: com.mongodb.event.ConnectionPoolClosedEvent): void;
					public connectionAdded(param0: com.mongodb.event.ConnectionAddedEvent): void;
					public connectionCheckedIn(param0: com.mongodb.event.ConnectionCheckedInEvent): void;
					public connectionPoolOpened(param0: com.mongodb.event.ConnectionPoolOpenedEvent): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module event {
				export class EventListenerHelper {
					public static class: java.lang.Class<com.mongodb.internal.event.EventListenerHelper>;
					public static NO_OP_SERVER_LISTENER: com.mongodb.event.ServerListener;
					public static NO_OP_SERVER_MONITOR_LISTENER: com.mongodb.event.ServerMonitorListener;
					public static NO_OP_CLUSTER_LISTENER: com.mongodb.event.ClusterListener;
					public static NO_OP_CONNECTION_POOL_LISTENER: com.mongodb.event.ConnectionPoolListener;
					public static getCommandListener(param0: java.util.List<com.mongodb.event.CommandListener>): com.mongodb.event.CommandListener;
					public static getConnectionPoolListener(param0: com.mongodb.connection.ConnectionPoolSettings): com.mongodb.event.ConnectionPoolListener;
					public static createServerListener(param0: com.mongodb.connection.ServerSettings, param1: com.mongodb.event.ServerListener): com.mongodb.event.ServerListener;
					public static getServerMonitorListener(param0: com.mongodb.connection.ServerSettings): com.mongodb.event.ServerMonitorListener;
					public static getClusterListener(param0: com.mongodb.connection.ClusterSettings): com.mongodb.event.ClusterListener;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module event {
				export class ServerListenerMulticaster extends com.mongodb.event.ServerListener {
					public static class: java.lang.Class<com.mongodb.internal.event.ServerListenerMulticaster>;
					public serverClosed(param0: com.mongodb.event.ServerClosedEvent): void;
					public serverDescriptionChanged(param0: com.mongodb.event.ServerDescriptionChangedEvent): void;
					public serverOpening(param0: com.mongodb.event.ServerOpeningEvent): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module event {
				export class ServerMonitorListenerMulticaster extends com.mongodb.event.ServerMonitorListener {
					public static class: java.lang.Class<com.mongodb.internal.event.ServerMonitorListenerMulticaster>;
					public serverHeartbeatFailed(param0: com.mongodb.event.ServerHeartbeatFailedEvent): void;
					public serverHearbeatStarted(param0: com.mongodb.event.ServerHeartbeatStartedEvent): void;
					public serverHeartbeatSucceeded(param0: com.mongodb.event.ServerHeartbeatSucceededEvent): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module management {
				export module jmx {
					export class JMXMBeanServer extends com.mongodb.management.MBeanServer {
						public static class: java.lang.Class<com.mongodb.internal.management.jmx.JMXMBeanServer>;
						public constructor();
						public registerMBean(param0: any, param1: string): void;
						public unregisterMBean(param0: string): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module operation {
				export class AsyncOperations<TDocument>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.operation.AsyncOperations<any>>;
					public aggregateToCollection(param0: java.util.List<any>, param1: number, param2: java.lang.Boolean, param3: java.lang.Boolean, param4: com.mongodb.client.model.Collation, param5: org.bson.conversions.Bson, param6: string, param7: com.mongodb.client.model.AggregationLevel): com.mongodb.operation.AsyncWriteOperation<java.lang.Void>;
					public createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>, param1: com.mongodb.client.model.CreateIndexOptions): com.mongodb.operation.AsyncWriteOperation<java.lang.Void>;
					public findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndUpdateOptions): com.mongodb.operation.AsyncWriteOperation<TDocument>;
					public mapReduceToCollection(param0: string, param1: string, param2: string, param3: string, param4: string, param5: org.bson.conversions.Bson, param6: number, param7: number, param8: boolean, param9: org.bson.conversions.Bson, param10: org.bson.conversions.Bson, param11: boolean, param12: com.mongodb.client.model.MapReduceAction, param13: boolean, param14: boolean, param15: java.lang.Boolean, param16: com.mongodb.client.model.Collation): com.mongodb.operation.AsyncWriteOperation<com.mongodb.operation.MapReduceStatistics>;
					public findFirst(param0: org.bson.conversions.Bson, param1: java.lang.Class, param2: com.mongodb.client.model.FindOptions): com.mongodb.operation.AsyncReadOperation<any>;
					public constructor(param0: com.mongodb.MongoNamespace, param1: java.lang.Class<TDocument>, param2: com.mongodb.ReadPreference, param3: org.bson.codecs.configuration.CodecRegistry);
					public find(param0: com.mongodb.MongoNamespace, param1: org.bson.conversions.Bson, param2: java.lang.Class, param3: com.mongodb.client.model.FindOptions): com.mongodb.operation.AsyncReadOperation<any>;
					public updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public mapReduce(param0: string, param1: string, param2: string, param3: java.lang.Class, param4: org.bson.conversions.Bson, param5: number, param6: number, param7: boolean, param8: org.bson.conversions.Bson, param9: org.bson.conversions.Bson, param10: boolean, param11: com.mongodb.client.model.Collation): com.mongodb.operation.AsyncReadOperation<any>;
					public renameCollection(param0: com.mongodb.MongoNamespace, param1: com.mongodb.client.model.RenameCollectionOptions): com.mongodb.operation.AsyncWriteOperation<java.lang.Void>;
					public updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public listIndexes(param0: java.lang.Class, param1: java.lang.Integer, param2: number): com.mongodb.operation.AsyncReadOperation<any>;
					public aggregate(param0: java.util.List, param1: java.lang.Class, param2: number, param3: number, param4: java.lang.Integer, param5: com.mongodb.client.model.Collation, param6: org.bson.conversions.Bson, param7: string, param8: java.lang.Boolean, param9: java.lang.Boolean, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.operation.AsyncReadOperation<any>;
					public find(param0: org.bson.conversions.Bson, param1: java.lang.Class, param2: com.mongodb.client.model.FindOptions): com.mongodb.operation.AsyncReadOperation<any>;
					public replaceOne(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.ReplaceOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public constructor(param0: java.lang.Class<TDocument>, param1: com.mongodb.ReadPreference, param2: org.bson.codecs.configuration.CodecRegistry);
					public deleteOne(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public deleteMany(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public distinct(param0: string, param1: org.bson.conversions.Bson, param2: java.lang.Class, param3: number, param4: com.mongodb.client.model.Collation): com.mongodb.operation.AsyncReadOperation<any>;
					public dropIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DropIndexOptions): com.mongodb.operation.AsyncWriteOperation<java.lang.Void>;
					public constructor(param0: com.mongodb.MongoNamespace, param1: java.lang.Class<TDocument>, param2: com.mongodb.ReadPreference, param3: org.bson.codecs.configuration.CodecRegistry, param4: com.mongodb.WriteConcern, param5: boolean);
					public findOneAndDelete(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.FindOneAndDeleteOptions): com.mongodb.operation.AsyncWriteOperation<TDocument>;
					public bulkWrite(param0: java.util.List<any>, param1: com.mongodb.client.model.BulkWriteOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public dropCollection(): com.mongodb.operation.AsyncWriteOperation<java.lang.Void>;
					public count(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions, param2: com.mongodb.internal.client.model.CountStrategy): com.mongodb.operation.AsyncReadOperation<java.lang.Long>;
					public dropIndex(param0: string, param1: com.mongodb.client.model.DropIndexOptions): com.mongodb.operation.AsyncWriteOperation<java.lang.Void>;
					public listCollections(param0: string, param1: java.lang.Class, param2: org.bson.conversions.Bson, param3: boolean, param4: java.lang.Integer, param5: number): com.mongodb.operation.AsyncReadOperation<any>;
					public listDatabases(param0: java.lang.Class, param1: org.bson.conversions.Bson, param2: java.lang.Boolean, param3: number): com.mongodb.operation.AsyncReadOperation<any>;
					public findOneAndReplace(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.FindOneAndReplaceOptions): com.mongodb.operation.AsyncWriteOperation<TDocument>;
					public insertOne(param0: TDocument, param1: com.mongodb.client.model.InsertOneOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public insertMany(param0: java.util.List<any>, param1: com.mongodb.client.model.InsertManyOptions): com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module operation {
				export class IndexHelper {
					public static class: java.lang.Class<com.mongodb.internal.operation.IndexHelper>;
					public static generateIndexName(param0: org.bson.BsonDocument): string;
					public static getIndexNames(param0: java.util.List<com.mongodb.client.model.IndexModel>, param1: org.bson.codecs.configuration.CodecRegistry): java.util.List<string>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module operation {
				export class Operations<TDocument>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.operation.Operations<any>>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module operation {
				export class ServerVersionHelper {
					public static class: java.lang.Class<com.mongodb.internal.operation.ServerVersionHelper>;
					public static THREE_DOT_ZERO_WIRE_VERSION: number;
					public static THREE_DOT_TWO_WIRE_VERSION: number;
					public static THREE_DOT_FOUR_WIRE_VERSION: number;
					public static THREE_DOT_SIX_WIRE_VERSION: number;
					public static FOUR_DOT_ZERO_WIRE_VERSION: number;
					public static FOUR_DOT_TWO_WIRE_VERSION: number;
					public static serverIsAtLeastVersionThreeDotFour(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsLessThanVersionThreeDotZero(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsAtLeastVersionFourDotZero(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsLessThanVersionThreeDotFour(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsLessThanVersionFourDotZero(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsLessThanVersionThreeDotTwo(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsLessThanVersionFourDotTwo(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsAtLeastVersionThreeDotZero(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsAtLeastVersionThreeDotTwo(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsLessThanVersionThreeDotSix(param0: com.mongodb.connection.ConnectionDescription): boolean;
					public static serverIsAtLeastVersionThreeDotSix(param0: com.mongodb.connection.ConnectionDescription): boolean;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module operation {
				export class SyncOperations<TDocument>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.internal.operation.SyncOperations<any>>;
					public insertMany(param0: java.util.List<any>, param1: com.mongodb.client.model.InsertManyOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public bulkWrite(param0: java.util.List<any>, param1: com.mongodb.client.model.BulkWriteOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public listIndexes(param0: java.lang.Class, param1: java.lang.Integer, param2: number): com.mongodb.operation.ReadOperation<any>;
					public deleteMany(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public constructor(param0: com.mongodb.MongoNamespace, param1: java.lang.Class<TDocument>, param2: com.mongodb.ReadPreference, param3: org.bson.codecs.configuration.CodecRegistry);
					public dropIndex(param0: string, param1: com.mongodb.client.model.DropIndexOptions): com.mongodb.operation.WriteOperation<java.lang.Void>;
					public distinct(param0: string, param1: org.bson.conversions.Bson, param2: java.lang.Class, param3: number, param4: com.mongodb.client.model.Collation): com.mongodb.operation.ReadOperation<any>;
					public aggregateToCollection(param0: java.util.List<any>, param1: number, param2: java.lang.Boolean, param3: java.lang.Boolean, param4: com.mongodb.client.model.Collation, param5: org.bson.conversions.Bson, param6: string, param7: com.mongodb.client.model.AggregationLevel): com.mongodb.operation.WriteOperation<java.lang.Void>;
					public createIndexes(param0: java.util.List<com.mongodb.client.model.IndexModel>, param1: com.mongodb.client.model.CreateIndexOptions): com.mongodb.operation.WriteOperation<java.lang.Void>;
					public find(param0: org.bson.conversions.Bson, param1: java.lang.Class, param2: com.mongodb.client.model.FindOptions): com.mongodb.operation.ReadOperation<any>;
					public dropCollection(): com.mongodb.operation.WriteOperation<java.lang.Void>;
					public find(param0: com.mongodb.MongoNamespace, param1: org.bson.conversions.Bson, param2: java.lang.Class, param3: com.mongodb.client.model.FindOptions): com.mongodb.operation.ReadOperation<any>;
					public mapReduce(param0: string, param1: string, param2: string, param3: java.lang.Class, param4: org.bson.conversions.Bson, param5: number, param6: number, param7: boolean, param8: org.bson.conversions.Bson, param9: org.bson.conversions.Bson, param10: boolean, param11: com.mongodb.client.model.Collation): com.mongodb.operation.ReadOperation<any>;
					public mapReduceToCollection(param0: string, param1: string, param2: string, param3: string, param4: string, param5: org.bson.conversions.Bson, param6: number, param7: number, param8: boolean, param9: org.bson.conversions.Bson, param10: org.bson.conversions.Bson, param11: boolean, param12: com.mongodb.client.model.MapReduceAction, param13: boolean, param14: boolean, param15: java.lang.Boolean, param16: com.mongodb.client.model.Collation): com.mongodb.operation.WriteOperation<com.mongodb.operation.MapReduceStatistics>;
					public findOneAndReplace(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.FindOneAndReplaceOptions): com.mongodb.operation.WriteOperation<TDocument>;
					public constructor(param0: java.lang.Class<TDocument>, param1: com.mongodb.ReadPreference, param2: org.bson.codecs.configuration.CodecRegistry);
					public listCollections(param0: string, param1: java.lang.Class, param2: org.bson.conversions.Bson, param3: boolean, param4: java.lang.Integer, param5: number): com.mongodb.operation.ReadOperation<any>;
					public findOneAndUpdate(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.FindOneAndUpdateOptions): com.mongodb.operation.WriteOperation<TDocument>;
					public dropIndex(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DropIndexOptions): com.mongodb.operation.WriteOperation<java.lang.Void>;
					public deleteOne(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.DeleteOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public constructor(param0: com.mongodb.MongoNamespace, param1: java.lang.Class<TDocument>, param2: com.mongodb.ReadPreference, param3: org.bson.codecs.configuration.CodecRegistry, param4: com.mongodb.WriteConcern, param5: boolean);
					public renameCollection(param0: com.mongodb.MongoNamespace, param1: com.mongodb.client.model.RenameCollectionOptions): com.mongodb.operation.WriteOperation<java.lang.Void>;
					public listDatabases(param0: java.lang.Class, param1: org.bson.conversions.Bson, param2: java.lang.Boolean, param3: number): com.mongodb.operation.ReadOperation<any>;
					public count(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.CountOptions, param2: com.mongodb.internal.client.model.CountStrategy): com.mongodb.operation.ReadOperation<java.lang.Long>;
					public updateOne(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public updateMany(param0: org.bson.conversions.Bson, param1: org.bson.conversions.Bson, param2: com.mongodb.client.model.UpdateOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public aggregate(param0: java.util.List, param1: java.lang.Class, param2: number, param3: number, param4: java.lang.Integer, param5: com.mongodb.client.model.Collation, param6: org.bson.conversions.Bson, param7: string, param8: java.lang.Boolean, param9: java.lang.Boolean, param10: com.mongodb.client.model.AggregationLevel): com.mongodb.operation.ReadOperation<any>;
					public insertOne(param0: TDocument, param1: com.mongodb.client.model.InsertOneOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
					public findFirst(param0: org.bson.conversions.Bson, param1: java.lang.Class, param2: com.mongodb.client.model.FindOptions): com.mongodb.operation.ReadOperation<any>;
					public findOneAndDelete(param0: org.bson.conversions.Bson, param1: com.mongodb.client.model.FindOneAndDeleteOptions): com.mongodb.operation.WriteOperation<TDocument>;
					public replaceOne(param0: org.bson.conversions.Bson, param1: TDocument, param2: com.mongodb.client.model.ReplaceOptions): com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module operation {
				export class WriteConcernHelper {
					public static class: java.lang.Class<com.mongodb.internal.operation.WriteConcernHelper>;
					public static appendWriteConcernToCommand(param0: com.mongodb.WriteConcern, param1: org.bson.BsonDocument, param2: com.mongodb.connection.ConnectionDescription): void;
					public static createWriteConcernError(param0: org.bson.BsonDocument): com.mongodb.bulk.WriteConcernError;
					public static hasWriteConcernError(param0: org.bson.BsonDocument): boolean;
					public static createWriteConcernException(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress): com.mongodb.MongoWriteConcernException;
					public static throwOnSpecialException(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress): void;
					public static throwOnWriteConcernError(param0: org.bson.BsonDocument, param1: com.mongodb.ServerAddress): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module session {
				export class BaseClientSessionImpl extends com.mongodb.session.ClientSession {
					public static class: java.lang.Class<com.mongodb.internal.session.BaseClientSessionImpl>;
					public isCausallyConsistent(): boolean;
					public getOperationTime(): org.bson.BsonTimestamp;
					public advanceClusterTime(param0: org.bson.BsonDocument): void;
					public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					public getClusterTime(): org.bson.BsonDocument;
					public close(): void;
					public getOriginator(): any;
					public constructor(param0: com.mongodb.internal.session.ServerSessionPool, param1: any, param2: com.mongodb.ClientSessionOptions);
					public getOptions(): com.mongodb.ClientSessionOptions;
					public getServerSession(): com.mongodb.session.ServerSession;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module session {
				export abstract class ClientSessionContext extends com.mongodb.session.SessionContext {
					public static class: java.lang.Class<com.mongodb.internal.session.ClientSessionContext>;
					public isCausallyConsistent(): boolean;
					public advanceClusterTime(param0: org.bson.BsonDocument): void;
					public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					public getClusterTime(): org.bson.BsonDocument;
					public notifyMessageSent(): boolean;
					public advanceTransactionNumber(): number;
					public getTransactionNumber(): number;
					public getOperationTime(): org.bson.BsonTimestamp;
					public hasSession(): boolean;
					public getSessionId(): org.bson.BsonDocument;
					public getReadConcern(): com.mongodb.ReadConcern;
					public getClientSession(): com.mongodb.session.ClientSession;
					public hasActiveTransaction(): boolean;
					public isImplicitSession(): boolean;
					public constructor(param0: com.mongodb.session.ClientSession);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module session {
				export class ServerSessionPool {
					public static class: java.lang.Class<com.mongodb.internal.session.ServerSessionPool>;
					public constructor(param0: com.mongodb.connection.Cluster);
					public release(param0: com.mongodb.session.ServerSession): void;
					public constructor(param0: com.mongodb.connection.Cluster, param1: com.mongodb.internal.session.ServerSessionPool.Clock);
					public close(): void;
					public getInUseCount(): number;
					public get(): com.mongodb.session.ServerSession;
				}
				export module ServerSessionPool {
					export class Clock {
						public static class: java.lang.Class<com.mongodb.internal.session.ServerSessionPool.Clock>;
						/**
						 * Constructs a new instance of the com.mongodb.internal.session.ServerSessionPool$Clock interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							millis(): number;
						});
						public constructor();
						public millis(): number;
					}
					export class ServerSessionImpl extends com.mongodb.session.ServerSession {
						public static class: java.lang.Class<com.mongodb.internal.session.ServerSessionPool.ServerSessionImpl>;
						public isClosed(): boolean;
						public getIdentifier(): org.bson.BsonDocument;
						public advanceTransactionNumber(): number;
						public getTransactionNumber(): number;
					}
					export class ServerSessionItemFactory extends com.mongodb.internal.connection.ConcurrentPool.ItemFactory<com.mongodb.internal.session.ServerSessionPool.ServerSessionImpl> {
						public static class: java.lang.Class<com.mongodb.internal.session.ServerSessionPool.ServerSessionItemFactory>;
						public shouldPrune(param0: any): com.mongodb.internal.connection.ConcurrentPool.Prune;
						public create(param0: boolean): com.mongodb.internal.session.ServerSessionPool.ServerSessionImpl;
						public create(param0: boolean): any;
						public close(param0: com.mongodb.internal.session.ServerSessionPool.ServerSessionImpl): void;
						public shouldPrune(param0: com.mongodb.internal.session.ServerSessionPool.ServerSessionImpl): com.mongodb.internal.connection.ConcurrentPool.Prune;
						public close(param0: any): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module thread {
				export class DaemonThreadFactory {
					public static class: java.lang.Class<com.mongodb.internal.thread.DaemonThreadFactory>;
					public newThread(param0: java.lang.Runnable): java.lang.Thread;
					public constructor(param0: string);
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module validator {
				export class CollectibleDocumentFieldNameValidator extends org.bson.FieldNameValidator {
					public static class: java.lang.Class<com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator>;
					public constructor();
					public validate(param0: string): boolean;
					public getValidatorForField(param0: string): org.bson.FieldNameValidator;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module validator {
				export class MappedFieldNameValidator extends org.bson.FieldNameValidator {
					public static class: java.lang.Class<com.mongodb.internal.validator.MappedFieldNameValidator>;
					public constructor(param0: org.bson.FieldNameValidator, param1: java.util.Map<string,org.bson.FieldNameValidator>);
					public validate(param0: string): boolean;
					public getValidatorForField(param0: string): org.bson.FieldNameValidator;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module validator {
				export class NoOpFieldNameValidator extends org.bson.FieldNameValidator {
					public static class: java.lang.Class<com.mongodb.internal.validator.NoOpFieldNameValidator>;
					public constructor();
					public validate(param0: string): boolean;
					public getValidatorForField(param0: string): org.bson.FieldNameValidator;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module internal {
			export module validator {
				export class UpdateFieldNameValidator extends org.bson.FieldNameValidator {
					public static class: java.lang.Class<com.mongodb.internal.validator.UpdateFieldNameValidator>;
					public constructor();
					public validate(param0: string): boolean;
					public getValidatorForField(param0: string): org.bson.FieldNameValidator;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module lang {
			export class NonNull {
				public static class: java.lang.Class<com.mongodb.lang.NonNull>;
				/**
				 * Constructs a new instance of the com.mongodb.lang.NonNull interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module lang {
			export class NonNullApi {
				public static class: java.lang.Class<com.mongodb.lang.NonNullApi>;
				/**
				 * Constructs a new instance of the com.mongodb.lang.NonNullApi interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module lang {
			export class Nullable {
				public static class: java.lang.Class<com.mongodb.lang.Nullable>;
				/**
				 * Constructs a new instance of the com.mongodb.lang.Nullable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module management {
			export class ConnectionPoolStatistics extends com.mongodb.event.ConnectionPoolListenerAdapter implements com.mongodb.management.ConnectionPoolStatisticsMBean {
				public static class: java.lang.Class<com.mongodb.management.ConnectionPoolStatistics>;
				public getCheckedOutCount(): number;
				public getPort(): number;
				public connectionPoolOpened(param0: com.mongodb.event.ConnectionPoolOpenedEvent): void;
				public getMinSize(): number;
				public connectionCheckedOut(param0: com.mongodb.event.ConnectionCheckedOutEvent): void;
				public connectionCheckedIn(param0: com.mongodb.event.ConnectionCheckedInEvent): void;
				public waitQueueExited(param0: com.mongodb.event.ConnectionPoolWaitQueueExitedEvent): void;
				public connectionPoolClosed(param0: com.mongodb.event.ConnectionPoolClosedEvent): void;
				public getWaitQueueSize(): number;
				public connectionAdded(param0: com.mongodb.event.ConnectionAddedEvent): void;
				public waitQueueEntered(param0: com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent): void;
				public getHost(): string;
				public getSize(): number;
				public getMaxSize(): number;
				public connectionRemoved(param0: com.mongodb.event.ConnectionRemovedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module management {
			export class ConnectionPoolStatisticsMBean {
				public static class: java.lang.Class<com.mongodb.management.ConnectionPoolStatisticsMBean>;
				/**
				 * Constructs a new instance of the com.mongodb.management.ConnectionPoolStatisticsMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getHost(): string;
					getPort(): number;
					getMinSize(): number;
					getMaxSize(): number;
					getSize(): number;
					getCheckedOutCount(): number;
					getWaitQueueSize(): number;
				});
				public constructor();
				public getCheckedOutCount(): number;
				public getWaitQueueSize(): number;
				public getPort(): number;
				public getHost(): string;
				public getSize(): number;
				public getMaxSize(): number;
				public getMinSize(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module management {
			export class JMXConnectionPoolListener extends com.mongodb.event.ConnectionPoolListener {
				public static class: java.lang.Class<com.mongodb.management.JMXConnectionPoolListener>;
				public connectionPoolClosed(param0: com.mongodb.event.ConnectionPoolClosedEvent): void;
				public waitQueueEntered(param0: com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent): void;
				public connectionAdded(param0: com.mongodb.event.ConnectionAddedEvent): void;
				public connectionPoolOpened(param0: com.mongodb.event.ConnectionPoolOpenedEvent): void;
				public connectionCheckedOut(param0: com.mongodb.event.ConnectionCheckedOutEvent): void;
				public connectionCheckedIn(param0: com.mongodb.event.ConnectionCheckedInEvent): void;
				public waitQueueExited(param0: com.mongodb.event.ConnectionPoolWaitQueueExitedEvent): void;
				public constructor();
				public connectionRemoved(param0: com.mongodb.event.ConnectionRemovedEvent): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module management {
			export class MBeanServer {
				public static class: java.lang.Class<com.mongodb.management.MBeanServer>;
				/**
				 * Constructs a new instance of the com.mongodb.management.MBeanServer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					unregisterMBean(param0: string): void;
					registerMBean(param0: any, param1: string): void;
				});
				public constructor();
				public registerMBean(param0: any, param1: string): void;
				public unregisterMBean(param0: string): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module management {
			export class MBeanServerFactory {
				public static class: java.lang.Class<com.mongodb.management.MBeanServerFactory>;
				public static getMBeanServer(): com.mongodb.management.MBeanServer;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module management {
			export class NullMBeanServer extends com.mongodb.management.MBeanServer {
				public static class: java.lang.Class<com.mongodb.management.NullMBeanServer>;
				public registerMBean(param0: any, param1: string): void;
				public unregisterMBean(param0: string): void;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AbortTransactionOperation extends com.mongodb.operation.TransactionOperation {
				public static class: java.lang.Class<com.mongodb.operation.AbortTransactionOperation>;
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public constructor(param0: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getCommandName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AggregateExplainOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.AggregateExplainOperation>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public hint(param0: org.bson.BsonValue): com.mongodb.operation.AggregateExplainOperation;
				public execute(param0: com.mongodb.binding.ReadBinding): any;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.AggregateExplainOperation;
				public getHintBsonValue(): org.bson.BsonValue;
				public execute(param0: com.mongodb.binding.ReadBinding): org.bson.BsonDocument;
				public allowDiskUse(param0: java.lang.Boolean): com.mongodb.operation.AggregateExplainOperation;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.AggregateExplainOperation;
				public getHint(): org.bson.BsonDocument;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AggregateOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.AggregateOperation<any>>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<org.bson.BsonDocument>, param2: org.bson.codecs.Decoder<T>, param3: com.mongodb.client.model.AggregationLevel);
				public hint(param0: org.bson.BsonValue): com.mongodb.operation.AggregateOperation<T>;
				public allowDiskUse(param0: java.lang.Boolean): com.mongodb.operation.AggregateOperation<T>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
				public getHint(): org.bson.BsonDocument;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.AggregateOperation<T>;
				public asExplainableOperation(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.ReadOperation<org.bson.BsonDocument>;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public getPipeline(): java.util.List<org.bson.BsonDocument>;
				public getAllowDiskUse(): java.lang.Boolean;
				public batchSize(param0: java.lang.Integer): com.mongodb.operation.AggregateOperation<T>;
				public comment(param0: string): com.mongodb.operation.AggregateOperation<T>;
				public getComment(): string;
				public getCollation(): com.mongodb.client.model.Collation;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<org.bson.BsonDocument>, param2: org.bson.codecs.Decoder<T>);
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.AggregateOperation<T>;
				public getUseCursor(): java.lang.Boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public getHintBsonValue(): org.bson.BsonValue;
				public asExplainableOperationAsync(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>;
				public toString(): string;
				public useCursor(param0: java.lang.Boolean): com.mongodb.operation.AggregateOperation<T>;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public getMaxAwaitTime(param0: java.util.concurrent.TimeUnit): number;
				public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.AggregateOperation<T>;
				public getBatchSize(): java.lang.Integer;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AggregateOperationImpl<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.AggregateOperationImpl<any>>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
			}
			export module AggregateOperationImpl {
				export class AggregateTarget {
					public static class: java.lang.Class<com.mongodb.operation.AggregateOperationImpl.AggregateTarget>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.AggregateOperationImpl$AggregateTarget interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(): org.bson.BsonValue;
					});
					public constructor();
					public create(): org.bson.BsonValue;
				}
				export class PipelineCreator {
					public static class: java.lang.Class<com.mongodb.operation.AggregateOperationImpl.PipelineCreator>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.AggregateOperationImpl$PipelineCreator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(param0: com.mongodb.connection.ConnectionDescription, param1: com.mongodb.session.SessionContext): org.bson.BsonArray;
					});
					public constructor();
					public create(param0: com.mongodb.connection.ConnectionDescription, param1: com.mongodb.session.SessionContext): org.bson.BsonArray;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AggregateToCollectionOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.AggregateToCollectionOperation>;
				public getCollation(): com.mongodb.client.model.Collation;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.operation.AggregateToCollectionOperation;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.AggregateToCollectionOperation;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.AggregateToCollectionOperation;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<org.bson.BsonDocument>, param2: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public hint(param0: org.bson.BsonDocument): com.mongodb.operation.AggregateToCollectionOperation;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<org.bson.BsonDocument>);
				public comment(param0: string): com.mongodb.operation.AggregateToCollectionOperation;
				public getHint(): org.bson.BsonDocument;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getBypassDocumentValidation(): java.lang.Boolean;
				public asExplainableOperation(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.ReadOperation<org.bson.BsonDocument>;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public allowDiskUse(param0: java.lang.Boolean): com.mongodb.operation.AggregateToCollectionOperation;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<org.bson.BsonDocument>, param2: com.mongodb.WriteConcern, param3: com.mongodb.client.model.AggregationLevel);
				public getPipeline(): java.util.List<org.bson.BsonDocument>;
				public getAllowDiskUse(): java.lang.Boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public getComment(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AsyncChangeStreamBatchCursor<T>  extends com.mongodb.async.AsyncBatchCursor<any> {
				public static class: java.lang.Class<com.mongodb.operation.AsyncChangeStreamBatchCursor<any>>;
				public close(): void;
				public tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public isClosed(): boolean;
				public getBatchSize(): number;
				public setBatchSize(param0: number): void;
			}
			export module AsyncChangeStreamBatchCursor {
				export class AsyncBlock {
					public static class: java.lang.Class<com.mongodb.operation.AsyncChangeStreamBatchCursor.AsyncBlock>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.AsyncChangeStreamBatchCursor$AsyncBlock interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						apply(param0: com.mongodb.async.AsyncBatchCursor<org.bson.RawBsonDocument>, param1: com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>): void;
					});
					public constructor();
					public apply(param0: com.mongodb.async.AsyncBatchCursor<org.bson.RawBsonDocument>, param1: com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AsyncOperationExecutor {
				public static class: java.lang.Class<com.mongodb.operation.AsyncOperationExecutor>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.AsyncOperationExecutor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					execute(param0: com.mongodb.operation.AsyncReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.async.SingleResultCallback<any>): void;
					execute(param0: com.mongodb.operation.AsyncReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.session.ClientSession, param3: com.mongodb.async.SingleResultCallback<any>): void;
					execute(param0: com.mongodb.operation.AsyncWriteOperation<any>, param1: com.mongodb.async.SingleResultCallback<any>): void;
					execute(param0: com.mongodb.operation.AsyncWriteOperation<any>, param1: com.mongodb.session.ClientSession, param2: com.mongodb.async.SingleResultCallback<any>): void;
				});
				public constructor();
				public execute(param0: com.mongodb.operation.AsyncReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.async.SingleResultCallback<any>): void;
				public execute(param0: com.mongodb.operation.AsyncWriteOperation<any>, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public execute(param0: com.mongodb.operation.AsyncReadOperation<any>, param1: com.mongodb.ReadPreference, param2: com.mongodb.session.ClientSession, param3: com.mongodb.async.SingleResultCallback<any>): void;
				public execute(param0: com.mongodb.operation.AsyncWriteOperation<any>, param1: com.mongodb.session.ClientSession, param2: com.mongodb.async.SingleResultCallback<any>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AsyncQueryBatchCursor<T>  extends com.mongodb.async.AsyncBatchCursor<any> {
				public static class: java.lang.Class<com.mongodb.operation.AsyncQueryBatchCursor<any>>;
				public close(): void;
				public tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public isClosed(): boolean;
				public getBatchSize(): number;
				public setBatchSize(param0: number): void;
			}
			export module AsyncQueryBatchCursor {
				export class CommandResultSingleResultCallback extends com.mongodb.async.SingleResultCallback<org.bson.BsonDocument> {
					public static class: java.lang.Class<com.mongodb.operation.AsyncQueryBatchCursor.CommandResultSingleResultCallback>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public onResult(param0: org.bson.BsonDocument, param1: java.lang.Throwable): void;
				}
				export class QueryResultSingleResultCallback extends com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<any>> {
					public static class: java.lang.Class<com.mongodb.operation.AsyncQueryBatchCursor.QueryResultSingleResultCallback>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public onResult(param0: com.mongodb.connection.QueryResult<any>, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AsyncReadOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.AsyncReadOperation<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.AsyncReadOperation<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				});
				public constructor();
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AsyncSingleBatchQueryCursor<T>  extends com.mongodb.async.AsyncBatchCursor<any> {
				public static class: java.lang.Class<com.mongodb.operation.AsyncSingleBatchQueryCursor<any>>;
				public close(): void;
				public tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public isClosed(): boolean;
				public getBatchSize(): number;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class AsyncWriteOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.AsyncWriteOperation<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.AsyncWriteOperation<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				});
				public constructor();
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export abstract class BaseFindAndModifyOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.BaseFindAndModifyOperation<any>>;
				public isRetryWrites(): boolean;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: boolean, param3: org.bson.codecs.Decoder<T>);
				public getFieldNameValidator(): org.bson.FieldNameValidator;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public getNamespace(): com.mongodb.MongoNamespace;
				public addTxnNumberToCommand(param0: com.mongodb.connection.ServerDescription, param1: com.mongodb.connection.ConnectionDescription, param2: org.bson.BsonDocument, param3: com.mongodb.session.SessionContext): void;
				public getDatabaseName(): string;
				public addWriteConcernToCommand(param0: com.mongodb.connection.ConnectionDescription, param1: org.bson.BsonDocument, param2: com.mongodb.session.SessionContext): void;
				public execute(param0: com.mongodb.binding.WriteBinding): T;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public getDecoder(): org.bson.codecs.Decoder<T>;
				public getCommandCreator(param0: com.mongodb.session.SessionContext): com.mongodb.operation.CommandOperationHelper.CommandCreator;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export abstract class BaseWriteOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.BaseWriteOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern);
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: boolean);
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.operation.BaseWriteOperation;
				public getType(): com.mongodb.bulk.WriteRequest.Type;
				public isOrdered(): boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getBypassDocumentValidation(): java.lang.Boolean;
				public execute(param0: com.mongodb.binding.WriteBinding): com.mongodb.WriteConcernResult;
				public getNamespace(): com.mongodb.MongoNamespace;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public getWriteRequests(): java.util.List<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class BatchCursor<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.BatchCursor<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.BatchCursor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					close(): void;
					hasNext(): boolean;
					next(): java.util.List<T>;
					setBatchSize(param0: number): void;
					getBatchSize(): number;
					tryNext(): java.util.List<T>;
					getServerCursor(): com.mongodb.ServerCursor;
					getServerAddress(): com.mongodb.ServerAddress;
				});
				public constructor();
				public next(): java.util.List<T>;
				public close(): void;
				public tryNext(): java.util.List<T>;
				public getServerCursor(): com.mongodb.ServerCursor;
				public hasNext(): boolean;
				public getBatchSize(): number;
				public getServerAddress(): com.mongodb.ServerAddress;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class BsonArrayWrapper<T>  extends org.bson.BsonArray {
				public static class: java.lang.Class<com.mongodb.operation.BsonArrayWrapper<any>>;
				public set(param0: number, param1: org.bson.BsonValue): org.bson.BsonValue;
				public indexOf(param0: any): number;
				public getValues(): java.util.List<org.bson.BsonValue>;
				public addAll(param0: java.util.Collection<any>): boolean;
				public iterator(): java.util.Iterator<org.bson.BsonValue>;
				public toArray(): native.Array<any>;
				public get(param0: number): org.bson.BsonValue;
				public containsAll(param0: java.util.Collection<any>): boolean;
				public remove(param0: number): org.bson.BsonValue;
				public add(param0: org.bson.BsonValue): boolean;
				public clone(): org.bson.BsonArray;
				public hashCode(): number;
				public getWrappedArray(): java.util.List<any>;
				public clear(): void;
				public equals(param0: any): boolean;
				public addAll(param0: number, param1: java.util.Collection<any>): boolean;
				public isEmpty(): boolean;
				public lastIndexOf(param0: any): number;
				public remove(param0: any): boolean;
				public contains(param0: any): boolean;
				public toArray(param0: native.Array<any>): native.Array<any>;
				public listIterator(param0: number): java.util.ListIterator<org.bson.BsonValue>;
				public toString(): string;
				public retainAll(param0: java.util.Collection<any>): boolean;
				public size(): number;
				public add(param0: number, param1: org.bson.BsonValue): void;
				public removeAll(param0: java.util.Collection<any>): boolean;
				public subList(param0: number, param1: number): java.util.List<org.bson.BsonValue>;
				public listIterator(): java.util.ListIterator<org.bson.BsonValue>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class BsonDocumentWrapperHelper {
				public static class: java.lang.Class<com.mongodb.operation.BsonDocumentWrapperHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class BulkWriteBatch {
				public static class: java.lang.Class<com.mongodb.operation.BulkWriteBatch>;
				public hasAnotherBatch(): boolean;
				public addResult(param0: org.bson.BsonDocument): void;
				public getPayload(): com.mongodb.connection.SplittablePayload;
				public getRetryWrites(): boolean;
				public getFieldNameValidator(): org.bson.FieldNameValidator;
				public static createBulkWriteBatch(param0: com.mongodb.MongoNamespace, param1: com.mongodb.connection.ServerDescription, param2: com.mongodb.connection.ConnectionDescription, param3: boolean, param4: com.mongodb.WriteConcern, param5: java.lang.Boolean, param6: boolean, param7: java.util.List<any>, param8: com.mongodb.session.SessionContext): com.mongodb.operation.BulkWriteBatch;
				public getNextBatch(): com.mongodb.operation.BulkWriteBatch;
				public getResult(): com.mongodb.bulk.BulkWriteResult;
				public hasErrors(): boolean;
				public shouldProcessBatch(): boolean;
				public getError(): com.mongodb.MongoBulkWriteException;
				public getDecoder(): org.bson.codecs.Decoder<org.bson.BsonDocument>;
				public getCommand(): org.bson.BsonDocument;
			}
			export module BulkWriteBatch {
				export class WriteRequestEncoder extends org.bson.codecs.Encoder<com.mongodb.bulk.WriteRequest> {
					public static class: java.lang.Class<com.mongodb.operation.BulkWriteBatch.WriteRequestEncoder>;
					public encode(param0: org.bson.BsonWriter, param1: com.mongodb.bulk.WriteRequest, param2: org.bson.codecs.EncoderContext): void;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public getEncoderClass(): java.lang.Class<com.mongodb.bulk.WriteRequest>;
					public getEncoderClass(): java.lang.Class<any>;
				}
				export class WriteRequestWithIndex {
					public static class: java.lang.Class<com.mongodb.operation.BulkWriteBatch.WriteRequestWithIndex>;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ChangeStreamBatchCursor<T>  extends com.mongodb.operation.BatchCursor<any> {
				public static class: java.lang.Class<com.mongodb.operation.ChangeStreamBatchCursor<any>>;
				public close(): void;
				public remove(): void;
				public getServerCursor(): com.mongodb.ServerCursor;
				public hasNext(): boolean;
				public tryNext(): java.util.List<any>;
				public getBatchSize(): number;
				public getServerAddress(): com.mongodb.ServerAddress;
				public next(): java.util.List<any>;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ChangeStreamBatchCursorHelper {
				public static class: java.lang.Class<com.mongodb.operation.ChangeStreamBatchCursorHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ChangeStreamOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.ChangeStreamOperation<any>>;
				public getCollation(): com.mongodb.client.model.Collation;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public batchSize(param0: java.lang.Integer): com.mongodb.operation.ChangeStreamOperation<T>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.client.model.changestream.FullDocument, param2: java.util.List<org.bson.BsonDocument>, param3: org.bson.codecs.Decoder<T>);
				public getFullDocument(): com.mongodb.client.model.changestream.FullDocument;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
				public getStartAtOperationTime(): org.bson.BsonTimestamp;
				public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.ChangeStreamOperation<T>;
				public startAtOperationTime(param0: org.bson.BsonTimestamp): com.mongodb.operation.ChangeStreamOperation<T>;
				public getNamespace(): com.mongodb.MongoNamespace;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.ChangeStreamOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.client.model.changestream.FullDocument, param2: java.util.List<org.bson.BsonDocument>, param3: org.bson.codecs.Decoder<T>, param4: com.mongodb.client.model.changestream.ChangeStreamLevel);
				public getPipeline(): java.util.List<org.bson.BsonDocument>;
				public getMaxAwaitTime(param0: java.util.concurrent.TimeUnit): number;
				public resumeAfter(param0: org.bson.BsonDocument): com.mongodb.operation.ChangeStreamOperation<T>;
				public getDecoder(): org.bson.codecs.Decoder<T>;
				public getResumeToken(): org.bson.BsonDocument;
				public getBatchSize(): java.lang.Integer;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CommandOperationHelper {
				public static class: java.lang.Class<com.mongodb.operation.CommandOperationHelper>;
			}
			export module CommandOperationHelper {
				export class CommandCreator {
					public static class: java.lang.Class<com.mongodb.operation.CommandOperationHelper.CommandCreator>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.CommandOperationHelper$CommandCreator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(param0: com.mongodb.connection.ServerDescription, param1: com.mongodb.connection.ConnectionDescription): org.bson.BsonDocument;
					});
					public constructor();
					public create(param0: com.mongodb.connection.ServerDescription, param1: com.mongodb.connection.ConnectionDescription): org.bson.BsonDocument;
				}
				export class CommandProtocolExecutingCallback<D, R>  extends com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource> {
					public static class: java.lang.Class<com.mongodb.operation.CommandOperationHelper.CommandProtocolExecutingCallback<any,any>>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public onResult(param0: com.mongodb.binding.AsyncConnectionSource, param1: java.lang.Throwable): void;
				}
				export class CommandTransformer<T, R>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.operation.CommandOperationHelper.CommandTransformer<any,any>>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.CommandOperationHelper$CommandTransformer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						apply(param0: T, param1: com.mongodb.ServerAddress): R;
					});
					public constructor();
					public apply(param0: T, param1: com.mongodb.ServerAddress): R;
				}
				export class IdentityTransformer<T>  extends com.mongodb.operation.CommandOperationHelper.CommandTransformer<any,any> {
					public static class: java.lang.Class<com.mongodb.operation.CommandOperationHelper.IdentityTransformer<any>>;
					public apply(param0: any, param1: com.mongodb.ServerAddress): any;
				}
				export class TransformingResultCallback<T, R>  extends com.mongodb.async.SingleResultCallback<any> {
					public static class: java.lang.Class<com.mongodb.operation.CommandOperationHelper.TransformingResultCallback<any,any>>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CommandReadOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.CommandReadOperation<any>>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public constructor(param0: string, param1: org.bson.BsonDocument, param2: org.bson.codecs.Decoder<T>);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CommandResultArrayCodec<T>  extends org.bson.codecs.BsonArrayCodec {
				public static class: java.lang.Class<com.mongodb.operation.CommandResultArrayCodec<any>>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonArray;
				public readValue(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonValue;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CommandResultCodecProvider<P>  extends org.bson.codecs.configuration.CodecProvider {
				public static class: java.lang.Class<com.mongodb.operation.CommandResultCodecProvider<any>>;
				public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				public hashCode(): number;
				public equals(param0: any): boolean;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CommandResultDocumentCodec<T>  extends org.bson.codecs.BsonDocumentCodec {
				public static class: java.lang.Class<com.mongodb.operation.CommandResultDocumentCodec<any>>;
				public getDocumentId(param0: any): org.bson.BsonValue;
				public readValue(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonValue;
				public generateIdIfAbsentFromDocument(param0: any): any;
				public documentHasId(param0: org.bson.BsonDocument): boolean;
				public getDocumentId(param0: org.bson.BsonDocument): org.bson.BsonValue;
				public documentHasId(param0: any): boolean;
				public generateIdIfAbsentFromDocument(param0: org.bson.BsonDocument): org.bson.BsonDocument;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CommandWriteOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.CommandWriteOperation<any>>;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public constructor(param0: string, param1: org.bson.BsonDocument, param2: org.bson.codecs.Decoder<T>);
				public execute(param0: com.mongodb.binding.WriteBinding): T;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CommitTransactionOperation extends com.mongodb.operation.TransactionOperation {
				public static class: java.lang.Class<com.mongodb.operation.CommitTransactionOperation>;
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public constructor(param0: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getCommandName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CountOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.CountOperation>;
				public skip(param0: number): com.mongodb.operation.CountOperation;
				public getHint(): org.bson.BsonValue;
				public getCollation(): com.mongodb.client.model.Collation;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public limit(param0: number): com.mongodb.operation.CountOperation;
				public execute(param0: com.mongodb.binding.ReadBinding): any;
				public execute(param0: com.mongodb.binding.ReadBinding): java.lang.Long;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.CountOperation;
				public getSkip(): number;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.CountOperation;
				public asExplainableOperationAsync(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>;
				public asExplainableOperation(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.ReadOperation<org.bson.BsonDocument>;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.CountOperation;
				public hint(param0: org.bson.BsonValue): com.mongodb.operation.CountOperation;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Long>): void;
				public getFilter(): org.bson.BsonDocument;
				public constructor(param0: com.mongodb.MongoNamespace);
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.internal.client.model.CountStrategy);
				public getLimit(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CreateCollectionOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.CreateCollectionOperation>;
				public storageEngineOptions(param0: org.bson.BsonDocument): com.mongodb.operation.CreateCollectionOperation;
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public isUsePowerOf2Sizes(): java.lang.Boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.CreateCollectionOperation;
				public getMaxDocuments(): number;
				public getIndexOptionDefaults(): org.bson.BsonDocument;
				public capped(param0: boolean): com.mongodb.operation.CreateCollectionOperation;
				public maxDocuments(param0: number): com.mongodb.operation.CreateCollectionOperation;
				public getValidationAction(): com.mongodb.client.model.ValidationAction;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public sizeInBytes(param0: number): com.mongodb.operation.CreateCollectionOperation;
				public getStorageEngineOptions(): org.bson.BsonDocument;
				public constructor(param0: string, param1: string);
				public getCollectionName(): string;
				public getCollation(): com.mongodb.client.model.Collation;
				public validator(param0: org.bson.BsonDocument): com.mongodb.operation.CreateCollectionOperation;
				public validationAction(param0: com.mongodb.client.model.ValidationAction): com.mongodb.operation.CreateCollectionOperation;
				public getValidator(): org.bson.BsonDocument;
				public validationLevel(param0: com.mongodb.client.model.ValidationLevel): com.mongodb.operation.CreateCollectionOperation;
				public isAutoIndex(): boolean;
				public autoIndex(param0: boolean): com.mongodb.operation.CreateCollectionOperation;
				public constructor(param0: string, param1: string, param2: com.mongodb.WriteConcern);
				public getValidationLevel(): com.mongodb.client.model.ValidationLevel;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public indexOptionDefaults(param0: org.bson.BsonDocument): com.mongodb.operation.CreateCollectionOperation;
				public getSizeInBytes(): number;
				public usePowerOf2Sizes(param0: java.lang.Boolean): com.mongodb.operation.CreateCollectionOperation;
				public isCapped(): boolean;
				public getWriteConcern(): com.mongodb.WriteConcern;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CreateIndexesOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.CreateIndexesOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<com.mongodb.bulk.IndexRequest>, param2: com.mongodb.WriteConcern);
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.CreateIndexesOperation;
				public getRequests(): java.util.List<com.mongodb.bulk.IndexRequest>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<com.mongodb.bulk.IndexRequest>);
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public getIndexNames(): java.util.List<string>;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CreateUserOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.CreateUserOperation>;
				public getCredential(): com.mongodb.MongoCredential;
				public constructor(param0: com.mongodb.MongoCredential, param1: boolean, param2: com.mongodb.WriteConcern);
				public constructor(param0: com.mongodb.MongoCredential, param1: boolean);
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public isReadOnly(): boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CreateViewOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.CreateViewOperation>;
				public getCollation(): com.mongodb.client.model.Collation;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.CreateViewOperation;
				public getViewOn(): string;
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public constructor(param0: string, param1: string, param2: string, param3: java.util.List<org.bson.BsonDocument>, param4: com.mongodb.WriteConcern);
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public getDatabaseName(): string;
				public getPipeline(): java.util.List<org.bson.BsonDocument>;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getViewName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CurrentOpOperation extends com.mongodb.operation.ReadOperation<org.bson.BsonDocument> {
				public static class: java.lang.Class<com.mongodb.operation.CurrentOpOperation>;
				public execute(param0: com.mongodb.binding.ReadBinding): any;
				public execute(param0: com.mongodb.binding.ReadBinding): org.bson.BsonDocument;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class CursorHelper {
				public static class: java.lang.Class<com.mongodb.operation.CursorHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class DeleteOperation extends com.mongodb.operation.BaseWriteOperation {
				public static class: java.lang.Class<com.mongodb.operation.DeleteOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern);
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: boolean, param4: java.util.List<com.mongodb.bulk.DeleteRequest>);
				public execute(param0: com.mongodb.binding.WriteBinding): com.mongodb.WriteConcernResult;
				public getDeleteRequests(): java.util.List<com.mongodb.bulk.DeleteRequest>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: boolean);
				public getType(): com.mongodb.bulk.WriteRequest.Type;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: java.util.List<com.mongodb.bulk.DeleteRequest>);
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getWriteRequests(): java.util.List<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class DistinctOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.DistinctOperation<any>>;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.DistinctOperation<T>;
				public getCollation(): com.mongodb.client.model.Collation;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.DistinctOperation<T>;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.DistinctOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: string, param2: org.bson.codecs.Decoder<T>);
				public getFilter(): org.bson.BsonDocument;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class DocumentHelper {
				public static class: java.lang.Class<com.mongodb.operation.DocumentHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class DropCollectionOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.DropCollectionOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public constructor(param0: com.mongodb.MongoNamespace);
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class DropDatabaseOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.DropDatabaseOperation>;
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public constructor(param0: string, param1: com.mongodb.WriteConcern);
				public getWriteConcern(): com.mongodb.WriteConcern;
				public constructor(param0: string);
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class DropIndexOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.DropIndexOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: string);
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.DropIndexOperation;
				public constructor(param0: com.mongodb.MongoNamespace, param1: string, param2: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument, param2: com.mongodb.WriteConcern);
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonDocument);
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class DropUserOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.DropUserOperation>;
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public constructor(param0: string, param1: string);
				public constructor(param0: string, param1: string, param2: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ExplainHelper {
				public static class: java.lang.Class<com.mongodb.operation.ExplainHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class FindAndDeleteOperation<T>  extends com.mongodb.operation.BaseFindAndModifyOperation<any> {
				public static class: java.lang.Class<com.mongodb.operation.FindAndDeleteOperation<any>>;
				public getCollation(): com.mongodb.client.model.Collation;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.FindAndDeleteOperation<any>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: org.bson.codecs.Decoder<any>);
				public getProjection(): org.bson.BsonDocument;
				public sort(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndDeleteOperation<any>;
				public getCommandCreator(param0: com.mongodb.session.SessionContext): com.mongodb.operation.CommandOperationHelper.CommandCreator;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.FindAndDeleteOperation<any>;
				public getFieldNameValidator(): org.bson.FieldNameValidator;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public projection(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndDeleteOperation<any>;
				public getSort(): org.bson.BsonDocument;
				public getDatabaseName(): string;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: boolean, param3: org.bson.codecs.Decoder<any>);
				public getFilter(): org.bson.BsonDocument;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndDeleteOperation<any>;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.codecs.Decoder<any>);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class FindAndModifyHelper {
				public static class: java.lang.Class<com.mongodb.operation.FindAndModifyHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class FindAndReplaceOperation<T>  extends com.mongodb.operation.BaseFindAndModifyOperation<any> {
				public static class: java.lang.Class<com.mongodb.operation.FindAndReplaceOperation<any>>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.codecs.Decoder<any>, param2: org.bson.BsonDocument);
				public sort(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndReplaceOperation<any>;
				public getProjection(): org.bson.BsonDocument;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: boolean, param3: org.bson.codecs.Decoder<any>, param4: org.bson.BsonDocument);
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndReplaceOperation<any>;
				public projection(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndReplaceOperation<any>;
				public getBypassDocumentValidation(): java.lang.Boolean;
				public getFieldNameValidator(): org.bson.FieldNameValidator;
				public getReplacement(): org.bson.BsonDocument;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: org.bson.codecs.Decoder<any>, param3: org.bson.BsonDocument);
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: boolean, param3: org.bson.codecs.Decoder<any>);
				public isUpsert(): boolean;
				public getFilter(): org.bson.BsonDocument;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.operation.FindAndReplaceOperation<any>;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.FindAndReplaceOperation<any>;
				public getCollation(): com.mongodb.client.model.Collation;
				public isReturnOriginal(): boolean;
				public upsert(param0: boolean): com.mongodb.operation.FindAndReplaceOperation<any>;
				public getCommandCreator(param0: com.mongodb.session.SessionContext): com.mongodb.operation.CommandOperationHelper.CommandCreator;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.FindAndReplaceOperation<any>;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public returnOriginal(param0: boolean): com.mongodb.operation.FindAndReplaceOperation<any>;
				public getSort(): org.bson.BsonDocument;
				public getDatabaseName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class FindAndUpdateOperation<T>  extends com.mongodb.operation.BaseFindAndModifyOperation<any> {
				public static class: java.lang.Class<com.mongodb.operation.FindAndUpdateOperation<any>>;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.FindAndUpdateOperation<any>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.codecs.Decoder<any>, param2: org.bson.BsonDocument);
				public getProjection(): org.bson.BsonDocument;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: boolean, param3: org.bson.codecs.Decoder<any>, param4: org.bson.BsonDocument);
				public sort(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndUpdateOperation<any>;
				public getBypassDocumentValidation(): java.lang.Boolean;
				public getFieldNameValidator(): org.bson.FieldNameValidator;
				public getUpdate(): org.bson.BsonDocument;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndUpdateOperation<any>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: org.bson.codecs.Decoder<any>, param3: org.bson.BsonDocument);
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.WriteConcern, param2: boolean, param3: org.bson.codecs.Decoder<any>);
				public isUpsert(): boolean;
				public getFilter(): org.bson.BsonDocument;
				public projection(param0: org.bson.BsonDocument): com.mongodb.operation.FindAndUpdateOperation<any>;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public upsert(param0: boolean): com.mongodb.operation.FindAndUpdateOperation<any>;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.operation.FindAndUpdateOperation<any>;
				public getCollation(): com.mongodb.client.model.Collation;
				public isReturnOriginal(): boolean;
				public getCommandCreator(param0: com.mongodb.session.SessionContext): com.mongodb.operation.CommandOperationHelper.CommandCreator;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public returnOriginal(param0: boolean): com.mongodb.operation.FindAndUpdateOperation<any>;
				public arrayFilters(param0: java.util.List<org.bson.BsonDocument>): com.mongodb.operation.FindAndUpdateOperation<any>;
				public getArrayFilters(): java.util.List<org.bson.BsonDocument>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.FindAndUpdateOperation<any>;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public getSort(): org.bson.BsonDocument;
				public getDatabaseName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class FindOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.FindOperation<any>>;
				public getProjection(): org.bson.BsonDocument;
				public getSkip(): number;
				public batchSize(param0: number): com.mongodb.operation.FindOperation<T>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
				public maxScan(param0: number): com.mongodb.operation.FindOperation<T>;
				public getHint(): org.bson.BsonDocument;
				public sort(param0: org.bson.BsonDocument): com.mongodb.operation.FindOperation<T>;
				public getMin(): org.bson.BsonDocument;
				public modifiers(param0: org.bson.BsonDocument): com.mongodb.operation.FindOperation<T>;
				public asExplainableOperation(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.ReadOperation<org.bson.BsonDocument>;
				public getNamespace(): com.mongodb.MongoNamespace;
				public getMax(): org.bson.BsonDocument;
				public snapshot(param0: boolean): com.mongodb.operation.FindOperation<T>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.codecs.Decoder<T>);
				public getComment(): string;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public getModifiers(): org.bson.BsonDocument;
				public isOplogReplay(): boolean;
				public partial(param0: boolean): com.mongodb.operation.FindOperation<T>;
				public slaveOk(param0: boolean): com.mongodb.operation.FindOperation<T>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.FindOperation<T>;
				public limit(param0: number): com.mongodb.operation.FindOperation<T>;
				public getMaxScan(): number;
				public isReturnKey(): boolean;
				public getDecoder(): org.bson.codecs.Decoder<T>;
				public isPartial(): boolean;
				public oplogReplay(param0: boolean): com.mongodb.operation.FindOperation<T>;
				public hint(param0: org.bson.BsonDocument): com.mongodb.operation.FindOperation<T>;
				public min(param0: org.bson.BsonDocument): com.mongodb.operation.FindOperation<T>;
				public getCursorType(): com.mongodb.CursorType;
				public getBatchSize(): number;
				public comment(param0: string): com.mongodb.operation.FindOperation<T>;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.FindOperation<T>;
				public isSlaveOk(): boolean;
				public returnKey(param0: boolean): com.mongodb.operation.FindOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public isSnapshot(): boolean;
				public getFilter(): org.bson.BsonDocument;
				public showRecordId(param0: boolean): com.mongodb.operation.FindOperation<T>;
				public getLimit(): number;
				public getCollation(): com.mongodb.client.model.Collation;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public max(param0: org.bson.BsonDocument): com.mongodb.operation.FindOperation<T>;
				public skip(param0: number): com.mongodb.operation.FindOperation<T>;
				public isShowRecordId(): boolean;
				public asExplainableOperationAsync(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>;
				public noCursorTimeout(param0: boolean): com.mongodb.operation.FindOperation<T>;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.FindOperation<T>;
				public isNoCursorTimeout(): boolean;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public projection(param0: org.bson.BsonDocument): com.mongodb.operation.FindOperation<T>;
				public getSort(): org.bson.BsonDocument;
				public cursorType(param0: com.mongodb.CursorType): com.mongodb.operation.FindOperation<T>;
				public getMaxAwaitTime(param0: java.util.concurrent.TimeUnit): number;
				public maxAwaitTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.FindOperation<T>;
			}
			export module FindOperation {
				export class ExplainResultCallback extends com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>> {
					public static class: java.lang.Class<com.mongodb.operation.FindOperation.ExplainResultCallback>;
					public onResult(param0: com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, param1: java.lang.Throwable): void;
					public onResult(param0: any, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class FsyncUnlockOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.FsyncUnlockOperation>;
				public execute(param0: com.mongodb.binding.ReadBinding): any;
				public execute(param0: com.mongodb.binding.WriteBinding): org.bson.BsonDocument;
				public execute(param0: com.mongodb.binding.ReadBinding): org.bson.BsonDocument;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class GroupOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.GroupOperation<any>>;
				public getCollation(): com.mongodb.client.model.Collation;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.GroupOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.GroupOperation<T>;
				public getFinalizeFunction(): org.bson.BsonJavaScript;
				public getInitial(): org.bson.BsonDocument;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
				public getReduceFunction(): org.bson.BsonJavaScript;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonJavaScript, param2: org.bson.BsonDocument, param3: org.bson.codecs.Decoder<T>);
				public getKey(): org.bson.BsonDocument;
				public getNamespace(): com.mongodb.MongoNamespace;
				public key(param0: org.bson.BsonDocument): com.mongodb.operation.GroupOperation<T>;
				public finalizeFunction(param0: org.bson.BsonJavaScript): com.mongodb.operation.GroupOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public getFilter(): org.bson.BsonDocument;
				public getDecoder(): org.bson.codecs.Decoder<T>;
				public getKeyFunction(): org.bson.BsonJavaScript;
				public keyFunction(param0: org.bson.BsonJavaScript): com.mongodb.operation.GroupOperation<T>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class InsertOperation extends com.mongodb.operation.BaseWriteOperation {
				public static class: java.lang.Class<com.mongodb.operation.InsertOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): com.mongodb.WriteConcernResult;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: boolean);
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: boolean, param4: java.util.List<com.mongodb.bulk.InsertRequest>);
				public getInsertRequests(): java.util.List<com.mongodb.bulk.InsertRequest>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: java.util.List<com.mongodb.bulk.InsertRequest>);
				public getType(): com.mongodb.bulk.WriteRequest.Type;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getWriteRequests(): java.util.List<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ListCollectionsOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.ListCollectionsOperation<any>>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public isNameOnly(): boolean;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.ListCollectionsOperation<T>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public batchSize(param0: number): com.mongodb.operation.ListCollectionsOperation<T>;
				public constructor(param0: string, param1: org.bson.codecs.Decoder<T>);
				public getFilter(): org.bson.BsonDocument;
				public getBatchSize(): java.lang.Integer;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.ListCollectionsOperation<T>;
				public nameOnly(param0: boolean): com.mongodb.operation.ListCollectionsOperation<T>;
			}
			export module ListCollectionsOperation {
				export class ProjectingAsyncBatchCursor extends com.mongodb.async.AsyncBatchCursor<any> {
					public static class: java.lang.Class<com.mongodb.operation.ListCollectionsOperation.ProjectingAsyncBatchCursor>;
					public tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
					public next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
					public close(): void;
					public getBatchSize(): number;
					public setBatchSize(param0: number): void;
					public isClosed(): boolean;
				}
				export class ProjectingBatchCursor extends com.mongodb.operation.BatchCursor<any> {
					public static class: java.lang.Class<com.mongodb.operation.ListCollectionsOperation.ProjectingBatchCursor>;
					public tryNext(): java.util.List<any>;
					public next(): java.util.List<any>;
					public getServerCursor(): com.mongodb.ServerCursor;
					public close(): void;
					public getServerAddress(): com.mongodb.ServerAddress;
					public getBatchSize(): number;
					public remove(): void;
					public hasNext(): boolean;
					public setBatchSize(param0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ListDatabasesOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.ListDatabasesOperation<any>>;
				public nameOnly(param0: java.lang.Boolean): com.mongodb.operation.ListDatabasesOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public getNameOnly(): java.lang.Boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.ListDatabasesOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public constructor(param0: org.bson.codecs.Decoder<T>);
				public getFilter(): org.bson.BsonDocument;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.ListDatabasesOperation<T>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ListIndexesOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.ListIndexesOperation<any>>;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.ListIndexesOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.BatchCursor<T>;
				public batchSize(param0: number): com.mongodb.operation.ListIndexesOperation<T>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.codecs.Decoder<T>);
				public getBatchSize(): java.lang.Integer;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceAsyncBatchCursor<T>  extends com.mongodb.async.AsyncBatchCursor<any> {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceAsyncBatchCursor<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.MapReduceAsyncBatchCursor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getStatistics(): com.mongodb.operation.MapReduceStatistics;
					next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
					tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
					setBatchSize(param0: number): void;
					getBatchSize(): number;
					isClosed(): boolean;
					close(): void;
				});
				public constructor();
				public getStatistics(): com.mongodb.operation.MapReduceStatistics;
				public close(): void;
				public tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public isClosed(): boolean;
				public getBatchSize(): number;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceBatchCursor<T>  extends com.mongodb.operation.BatchCursor<any> {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceBatchCursor<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.MapReduceBatchCursor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getStatistics(): com.mongodb.operation.MapReduceStatistics;
					close(): void;
					hasNext(): boolean;
					next(): java.util.List<any>;
					setBatchSize(param0: number): void;
					getBatchSize(): number;
					tryNext(): java.util.List<any>;
					getServerCursor(): com.mongodb.ServerCursor;
					getServerAddress(): com.mongodb.ServerAddress;
				});
				public constructor();
				public getStatistics(): com.mongodb.operation.MapReduceStatistics;
				public close(): void;
				public getServerCursor(): com.mongodb.ServerCursor;
				public hasNext(): boolean;
				public getBatchSize(): number;
				public tryNext(): java.util.List<any>;
				public getServerAddress(): com.mongodb.ServerAddress;
				public next(): java.util.List<any>;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceHelper {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceInlineResultsAsyncCursor<T>  extends com.mongodb.operation.AsyncSingleBatchQueryCursor<any> implements com.mongodb.operation.MapReduceAsyncBatchCursor<any>  {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceInlineResultsAsyncCursor<any>>;
				public getStatistics(): com.mongodb.operation.MapReduceStatistics;
				public close(): void;
				public tryNext(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public next(param0: com.mongodb.async.SingleResultCallback<java.util.List<any>>): void;
				public isClosed(): boolean;
				public getBatchSize(): number;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceInlineResultsCursor<T>  extends com.mongodb.operation.QueryBatchCursor<any> implements com.mongodb.operation.MapReduceBatchCursor<any>  {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceInlineResultsCursor<any>>;
				public getStatistics(): com.mongodb.operation.MapReduceStatistics;
				public close(): void;
				public getServerCursor(): com.mongodb.ServerCursor;
				public hasNext(): boolean;
				public getBatchSize(): number;
				public tryNext(): java.util.List<any>;
				public getServerAddress(): com.mongodb.ServerAddress;
				public next(): java.util.List<any>;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceStatistics {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceStatistics>;
				public getEmitCount(): number;
				public getInputCount(): number;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public getDuration(): number;
				public getOutputCount(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceToCollectionOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceToCollectionOperation>;
				public sort(param0: org.bson.BsonDocument): com.mongodb.operation.MapReduceToCollectionOperation;
				public execute(param0: com.mongodb.binding.WriteBinding): com.mongodb.operation.MapReduceStatistics;
				public sharded(param0: boolean): com.mongodb.operation.MapReduceToCollectionOperation;
				public isVerbose(): boolean;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.operation.MapReduceToCollectionOperation;
				public isJsMode(): boolean;
				public nonAtomic(param0: boolean): com.mongodb.operation.MapReduceToCollectionOperation;
				public getBypassDocumentValidation(): java.lang.Boolean;
				public asExplainableOperation(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.ReadOperation<org.bson.BsonDocument>;
				public getNamespace(): com.mongodb.MongoNamespace;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.MapReduceToCollectionOperation;
				public getFilter(): org.bson.BsonDocument;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public finalizeFunction(param0: org.bson.BsonJavaScript): com.mongodb.operation.MapReduceToCollectionOperation;
				public isSharded(): boolean;
				public getLimit(): number;
				public getMapFunction(): org.bson.BsonJavaScript;
				public getCollectionName(): string;
				public getScope(): org.bson.BsonDocument;
				public getCollation(): com.mongodb.client.model.Collation;
				public scope(param0: org.bson.BsonDocument): com.mongodb.operation.MapReduceToCollectionOperation;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.MapReduceToCollectionOperation;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.MapReduceToCollectionOperation;
				public limit(param0: number): com.mongodb.operation.MapReduceToCollectionOperation;
				public getFinalizeFunction(): org.bson.BsonJavaScript;
				public getAction(): string;
				public verbose(param0: boolean): com.mongodb.operation.MapReduceToCollectionOperation;
				public asExplainableOperationAsync(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>;
				public isNonAtomic(): boolean;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public databaseName(param0: string): com.mongodb.operation.MapReduceToCollectionOperation;
				public getReduceFunction(): org.bson.BsonJavaScript;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonJavaScript, param2: org.bson.BsonJavaScript, param3: string, param4: com.mongodb.WriteConcern);
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public action(param0: string): com.mongodb.operation.MapReduceToCollectionOperation;
				public getSort(): org.bson.BsonDocument;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceStatistics>): void;
				public getDatabaseName(): string;
				public jsMode(param0: boolean): com.mongodb.operation.MapReduceToCollectionOperation;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonJavaScript, param2: org.bson.BsonJavaScript, param3: string);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MapReduceWithInlineResultsOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.MapReduceWithInlineResultsOperation<any>>;
				public sort(param0: org.bson.BsonDocument): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public isVerbose(): boolean;
				public isJsMode(): boolean;
				public scope(param0: org.bson.BsonDocument): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public asExplainableOperation(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.ReadOperation<org.bson.BsonDocument>;
				public getNamespace(): com.mongodb.MongoNamespace;
				public finalizeFunction(param0: org.bson.BsonJavaScript): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public getFilter(): org.bson.BsonDocument;
				public constructor(param0: com.mongodb.MongoNamespace, param1: org.bson.BsonJavaScript, param2: org.bson.BsonJavaScript, param3: org.bson.codecs.Decoder<T>);
				public execute(param0: com.mongodb.binding.ReadBinding): com.mongodb.operation.MapReduceBatchCursor<T>;
				public filter(param0: org.bson.BsonDocument): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceAsyncBatchCursor<T>>): void;
				public getLimit(): number;
				public getMapFunction(): org.bson.BsonJavaScript;
				public getScope(): org.bson.BsonDocument;
				public getCollation(): com.mongodb.client.model.Collation;
				public collation(param0: com.mongodb.client.model.Collation): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public getFinalizeFunction(): org.bson.BsonJavaScript;
				public jsMode(param0: boolean): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public asExplainableOperationAsync(param0: com.mongodb.ExplainVerbosity): com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>;
				public getReduceFunction(): org.bson.BsonJavaScript;
				public verbose(param0: boolean): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public getMaxTime(param0: java.util.concurrent.TimeUnit): number;
				public limit(param0: number): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public getSort(): org.bson.BsonDocument;
				public maxTime(param0: number, param1: java.util.concurrent.TimeUnit): com.mongodb.operation.MapReduceWithInlineResultsOperation<T>;
				public getDecoder(): org.bson.codecs.Decoder<T>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class MixedBulkWriteOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.MixedBulkWriteOperation>;
				public execute(param0: com.mongodb.binding.WriteBinding): com.mongodb.bulk.BulkWriteResult;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>): void;
				public bypassDocumentValidation(param0: java.lang.Boolean): com.mongodb.operation.MixedBulkWriteOperation;
				public getRetryWrites(): java.lang.Boolean;
				public isOrdered(): boolean;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getBypassDocumentValidation(): java.lang.Boolean;
				public getNamespace(): com.mongodb.MongoNamespace;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<any>, param2: boolean, param3: com.mongodb.WriteConcern);
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public constructor(param0: com.mongodb.MongoNamespace, param1: java.util.List<any>, param2: boolean, param3: com.mongodb.WriteConcern, param4: boolean);
				public getWriteConcern(): com.mongodb.WriteConcern;
				public getWriteRequests(): java.util.List<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class OperationExecutor {
				public static class: java.lang.Class<com.mongodb.operation.OperationExecutor>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.OperationExecutor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference): any;
					execute(param0: com.mongodb.operation.WriteOperation<any>): any;
				});
				public constructor();
				public execute(param0: com.mongodb.operation.ReadOperation<any>, param1: com.mongodb.ReadPreference): any;
				public execute(param0: com.mongodb.operation.WriteOperation<any>): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class OperationHelper {
				public static class: java.lang.Class<com.mongodb.operation.OperationHelper>;
				public static LOGGER: com.mongodb.diagnostics.logging.Logger;
			}
			export module OperationHelper {
				export class AsyncCallableWithConnection {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.AsyncCallableWithConnection>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.OperationHelper$AsyncCallableWithConnection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						call(param0: com.mongodb.connection.AsyncConnection, param1: java.lang.Throwable): void;
					});
					public constructor();
					public call(param0: com.mongodb.connection.AsyncConnection, param1: java.lang.Throwable): void;
				}
				export class AsyncCallableWithConnectionAndSource {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.AsyncCallableWithConnectionAndSource>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						call(param0: com.mongodb.binding.AsyncConnectionSource, param1: com.mongodb.connection.AsyncConnection, param2: java.lang.Throwable): void;
					});
					public constructor();
					public call(param0: com.mongodb.binding.AsyncConnectionSource, param1: com.mongodb.connection.AsyncConnection, param2: java.lang.Throwable): void;
				}
				export class AsyncCallableWithConnectionAndSourceCallback extends com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource> {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.AsyncCallableWithConnectionAndSourceCallback>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public onResult(param0: com.mongodb.binding.AsyncConnectionSource, param1: java.lang.Throwable): void;
				}
				export class AsyncCallableWithConnectionCallback extends com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource> {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.AsyncCallableWithConnectionCallback>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public onResult(param0: com.mongodb.binding.AsyncConnectionSource, param1: java.lang.Throwable): void;
				}
				export class CallableWithConnection<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.CallableWithConnection<any>>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.OperationHelper$CallableWithConnection interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						call(param0: com.mongodb.connection.Connection): T;
					});
					public constructor();
					public call(param0: com.mongodb.connection.Connection): T;
				}
				export class CallableWithConnectionAndSource<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.CallableWithConnectionAndSource<any>>;
					/**
					 * Constructs a new instance of the com.mongodb.operation.OperationHelper$CallableWithConnectionAndSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						call(param0: com.mongodb.binding.ConnectionSource, param1: com.mongodb.connection.Connection): T;
					});
					public constructor();
					public call(param0: com.mongodb.binding.ConnectionSource, param1: com.mongodb.connection.Connection): T;
				}
				export class ConnectionReleasingWrappedCallback<T>  extends com.mongodb.async.SingleResultCallback<any> {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.ConnectionReleasingWrappedCallback<any>>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
					public releaseConnectionAndGetWrapped(): com.mongodb.async.SingleResultCallback<any>;
				}
				export class ReferenceCountedReleasingWrappedCallback<T>  extends com.mongodb.async.SingleResultCallback<any> {
					public static class: java.lang.Class<com.mongodb.operation.OperationHelper.ReferenceCountedReleasingWrappedCallback<any>>;
					public onResult(param0: any, param1: java.lang.Throwable): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class OperationReadConcernHelper {
				public static class: java.lang.Class<com.mongodb.operation.OperationReadConcernHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class OrderBy {
				public static class: java.lang.Class<com.mongodb.operation.OrderBy>;
				public static ASC: com.mongodb.operation.OrderBy;
				public static DESC: com.mongodb.operation.OrderBy;
				public getIntRepresentation(): number;
				public static fromInt(param0: number): com.mongodb.operation.OrderBy;
				public static values(): native.Array<com.mongodb.operation.OrderBy>;
				public static valueOf(param0: string): com.mongodb.operation.OrderBy;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ParallelCollectionScanOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.ParallelCollectionScanOperation<any>>;
				public batchSize(param0: number): com.mongodb.operation.ParallelCollectionScanOperation<T>;
				public getNumCursors(): number;
				public execute(param0: com.mongodb.binding.ReadBinding): T;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<T>): void;
				public getBatchSize(): number;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<java.util.List<com.mongodb.async.AsyncBatchCursor<T>>>): void;
				public execute(param0: com.mongodb.binding.ReadBinding): java.util.List<com.mongodb.operation.BatchCursor<T>>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: number, param2: org.bson.codecs.Decoder<T>);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class QueryBatchCursor<T>  extends com.mongodb.operation.BatchCursor<any> {
				public static class: java.lang.Class<com.mongodb.operation.QueryBatchCursor<any>>;
				public remove(): void;
				public close(): void;
				public getServerCursor(): com.mongodb.ServerCursor;
				public hasNext(): boolean;
				public getBatchSize(): number;
				public tryNext(): java.util.List<any>;
				public getServerAddress(): com.mongodb.ServerAddress;
				public next(): java.util.List<any>;
				public setBatchSize(param0: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class QueryHelper {
				public static class: java.lang.Class<com.mongodb.operation.QueryHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class ReadOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.ReadOperation<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.ReadOperation<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					execute(param0: com.mongodb.binding.ReadBinding): T;
				});
				public constructor();
				public execute(param0: com.mongodb.binding.ReadBinding): T;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class RenameCollectionOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.RenameCollectionOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.MongoNamespace, param2: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public constructor(param0: com.mongodb.MongoNamespace, param1: com.mongodb.MongoNamespace);
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public isDropTarget(): boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public dropTarget(param0: boolean): com.mongodb.operation.RenameCollectionOperation;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export abstract class TransactionOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.TransactionOperation>;
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public getWriteConcern(): com.mongodb.WriteConcern;
				public constructor(param0: com.mongodb.WriteConcern);
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getCommandName(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class UpdateOperation extends com.mongodb.operation.BaseWriteOperation {
				public static class: java.lang.Class<com.mongodb.operation.UpdateOperation>;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern);
				public getUpdateRequests(): java.util.List<com.mongodb.bulk.UpdateRequest>;
				public execute(param0: com.mongodb.binding.WriteBinding): com.mongodb.WriteConcernResult;
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: boolean);
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: java.util.List<com.mongodb.bulk.UpdateRequest>);
				public constructor(param0: com.mongodb.MongoNamespace, param1: boolean, param2: com.mongodb.WriteConcern, param3: boolean, param4: java.util.List<com.mongodb.bulk.UpdateRequest>);
				public getType(): com.mongodb.bulk.WriteRequest.Type;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>): void;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
				public getWriteRequests(): java.util.List<any>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class UpdateUserOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.UpdateUserOperation>;
				public getCredential(): com.mongodb.MongoCredential;
				public constructor(param0: com.mongodb.MongoCredential, param1: boolean, param2: com.mongodb.WriteConcern);
				public constructor(param0: com.mongodb.MongoCredential, param1: boolean);
				public execute(param0: com.mongodb.binding.WriteBinding): java.lang.Void;
				public isReadOnly(): boolean;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Void>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncWriteBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public execute(param0: com.mongodb.binding.WriteBinding): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class UserExistsOperation extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.UserExistsOperation>;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<java.lang.Boolean>): void;
				public executeAsync(param0: com.mongodb.binding.AsyncReadBinding, param1: com.mongodb.async.SingleResultCallback<any>): void;
				public execute(param0: com.mongodb.binding.ReadBinding): any;
				public execute(param0: com.mongodb.binding.ReadBinding): java.lang.Boolean;
				public constructor(param0: string, param1: string);
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class UserOperationHelper {
				public static class: java.lang.Class<com.mongodb.operation.UserOperationHelper>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module operation {
			export class WriteOperation<T>  extends java.lang.Object {
				public static class: java.lang.Class<com.mongodb.operation.WriteOperation<any>>;
				/**
				 * Constructs a new instance of the com.mongodb.operation.WriteOperation<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					execute(param0: com.mongodb.binding.WriteBinding): T;
				});
				public constructor();
				public execute(param0: com.mongodb.binding.WriteBinding): T;
			}
		}
	}
}



declare module com {
	export module mongodb {
		export module selector {
			export class CompositeServerSelector extends com.mongodb.selector.ServerSelector {
				public static class: java.lang.Class<com.mongodb.selector.CompositeServerSelector>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: java.util.List<any>);
				public select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public toString(): string;
				public getServerSelectors(): java.util.List<com.mongodb.selector.ServerSelector>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module selector {
			export class LatencyMinimizingServerSelector extends com.mongodb.selector.ServerSelector {
				public static class: java.lang.Class<com.mongodb.selector.LatencyMinimizingServerSelector>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getAcceptableLatencyDifference(param0: java.util.concurrent.TimeUnit): number;
				public select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public constructor(param0: number, param1: java.util.concurrent.TimeUnit);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module selector {
			export class PrimaryServerSelector extends com.mongodb.selector.ServerSelector {
				public static class: java.lang.Class<com.mongodb.selector.PrimaryServerSelector>;
				public select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public toString(): string;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module selector {
			export class ReadPreferenceServerSelector extends com.mongodb.selector.ServerSelector {
				public static class: java.lang.Class<com.mongodb.selector.ReadPreferenceServerSelector>;
				public getReadPreference(): com.mongodb.ReadPreference;
				public constructor(param0: com.mongodb.ReadPreference);
				public select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module selector {
			export class ServerAddressSelector extends com.mongodb.selector.ServerSelector {
				public static class: java.lang.Class<com.mongodb.selector.ServerAddressSelector>;
				public getServerAddress(): com.mongodb.ServerAddress;
				public select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public constructor(param0: com.mongodb.ServerAddress);
				public toString(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module selector {
			export class ServerSelector {
				public static class: java.lang.Class<com.mongodb.selector.ServerSelector>;
				/**
				 * Constructs a new instance of the com.mongodb.selector.ServerSelector interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				});
				public constructor();
				public select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module selector {
			export class WritableServerSelector extends com.mongodb.selector.ServerSelector {
				public static class: java.lang.Class<com.mongodb.selector.WritableServerSelector>;
				public select(param0: com.mongodb.connection.ClusterDescription): java.util.List<com.mongodb.connection.ServerDescription>;
				public toString(): string;
				public constructor();
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module session {
			export class ClientSession {
				public static class: java.lang.Class<com.mongodb.session.ClientSession>;
				/**
				 * Constructs a new instance of the com.mongodb.session.ClientSession interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getOptions(): com.mongodb.ClientSessionOptions;
					isCausallyConsistent(): boolean;
					getOriginator(): any;
					getServerSession(): com.mongodb.session.ServerSession;
					getOperationTime(): org.bson.BsonTimestamp;
					advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					advanceClusterTime(param0: org.bson.BsonDocument): void;
					getClusterTime(): org.bson.BsonDocument;
					close(): void;
				});
				public constructor();
				public getOptions(): com.mongodb.ClientSessionOptions;
				public getOperationTime(): org.bson.BsonTimestamp;
				public getClusterTime(): org.bson.BsonDocument;
				public close(): void;
				public isCausallyConsistent(): boolean;
				public getOriginator(): any;
				public getServerSession(): com.mongodb.session.ServerSession;
				public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
				public advanceClusterTime(param0: org.bson.BsonDocument): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module session {
			export class ServerSession {
				public static class: java.lang.Class<com.mongodb.session.ServerSession>;
				/**
				 * Constructs a new instance of the com.mongodb.session.ServerSession interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getIdentifier(): org.bson.BsonDocument;
					getTransactionNumber(): number;
					advanceTransactionNumber(): number;
					isClosed(): boolean;
				});
				public constructor();
				public advanceTransactionNumber(): number;
				public isClosed(): boolean;
				public getIdentifier(): org.bson.BsonDocument;
				public getTransactionNumber(): number;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module session {
			export class SessionContext {
				public static class: java.lang.Class<com.mongodb.session.SessionContext>;
				/**
				 * Constructs a new instance of the com.mongodb.session.SessionContext interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					hasSession(): boolean;
					isImplicitSession(): boolean;
					getSessionId(): org.bson.BsonDocument;
					isCausallyConsistent(): boolean;
					getTransactionNumber(): number;
					advanceTransactionNumber(): number;
					notifyMessageSent(): boolean;
					getOperationTime(): org.bson.BsonTimestamp;
					advanceOperationTime(param0: org.bson.BsonTimestamp): void;
					getClusterTime(): org.bson.BsonDocument;
					advanceClusterTime(param0: org.bson.BsonDocument): void;
					hasActiveTransaction(): boolean;
					getReadConcern(): com.mongodb.ReadConcern;
				});
				public constructor();
				public getOperationTime(): org.bson.BsonTimestamp;
				public hasActiveTransaction(): boolean;
				public getClusterTime(): org.bson.BsonDocument;
				public advanceTransactionNumber(): number;
				public isCausallyConsistent(): boolean;
				public getTransactionNumber(): number;
				public getReadConcern(): com.mongodb.ReadConcern;
				public isImplicitSession(): boolean;
				public notifyMessageSent(): boolean;
				public getSessionId(): org.bson.BsonDocument;
				public advanceOperationTime(param0: org.bson.BsonTimestamp): void;
				public hasSession(): boolean;
				public advanceClusterTime(param0: org.bson.BsonDocument): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export abstract class AbstractObjectSerializer extends com.mongodb.util.ObjectSerializer {
				public static class: java.lang.Class<com.mongodb.util.AbstractObjectSerializer>;
				public serialize(param0: any, param1: java.lang.StringBuilder): void;
				public serialize(param0: any): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class ClassMapBasedObjectSerializer extends com.mongodb.util.AbstractObjectSerializer {
				public static class: java.lang.Class<com.mongodb.util.ClassMapBasedObjectSerializer>;
				public serialize(param0: any, param1: java.lang.StringBuilder): void;
				public serialize(param0: any): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class JSON {
				public static class: java.lang.Class<com.mongodb.util.JSON>;
				public static serialize(param0: any, param1: java.lang.StringBuilder): void;
				public static serialize(param0: any): string;
				public static parse(param0: string): any;
				public constructor();
				public static parse(param0: string, param1: org.bson.BSONCallback): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class JSONCallback extends org.bson.BasicBSONCallback {
				public static class: java.lang.Class<com.mongodb.util.JSONCallback>;
				public static _msDateFormat: string;
				public static _secDateFormat: string;
				public arrayDone(): any;
				public gotRegex(param0: string, param1: string, param2: string): void;
				public gotTimestamp(param0: string, param1: number, param2: number): void;
				public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
				public create(): org.bson.BSONObject;
				public gotMinKey(param0: string): void;
				public gotBinaryArray(param0: string, param1: native.Array<number>): void;
				public gotBoolean(param0: string, param1: boolean): void;
				public arrayStart(param0: string): void;
				public gotCodeWScope(param0: string, param1: string, param2: any): void;
				public constructor();
				public arrayStart(): void;
				public gotInt(param0: string, param1: number): void;
				public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
				public reset(): void;
				public gotCode(param0: string, param1: string): void;
				public gotUUID(param0: string, param1: number, param2: number): void;
				public gotUndefined(param0: string): void;
				public create(param0: boolean, param1: java.util.List<string>): org.bson.BSONObject;
				public objectStart(param0: string): void;
				public gotSymbol(param0: string, param1: string): void;
				public createList(): org.bson.BSONObject;
				public gotNull(param0: string): void;
				public gotLong(param0: string, param1: number): void;
				public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
				public objectStart(): void;
				public objectDone(): any;
				public gotMaxKey(param0: string): void;
				public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
				public gotDouble(param0: string, param1: number): void;
				public get(): any;
				public createBSONCallback(): org.bson.BSONCallback;
				public gotString(param0: string, param1: string): void;
				public gotDate(param0: string, param1: number): void;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class JSONParseException {
				public static class: java.lang.Class<com.mongodb.util.JSONParseException>;
				public constructor(param0: string, param1: number, param2: java.lang.Throwable);
				public constructor(param0: string, param1: number);
				public getMessage(): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class JSONParser {
				public static class: java.lang.Class<com.mongodb.util.JSONParser>;
				public get(): string;
				public parseArray(): any;
				public parseExponent(): void;
				public parseObject(param0: string): any;
				public skipWS(): void;
				public readHex(): void;
				public parse(): any;
				public parseFraction(): void;
				public read(): string;
				public parseNumber(): java.lang.Number;
				public read(param0: string): void;
				public check(param0: string): boolean;
				public doCallback(param0: string, param1: any): void;
				public parseString(param0: boolean): string;
				public parse(param0: string): any;
				public parseArray(param0: string): any;
				public parseObject(): any;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class JSONSerializers {
				public static class: java.lang.Class<com.mongodb.util.JSONSerializers>;
				public static getLegacy(): com.mongodb.util.ObjectSerializer;
				public static getStrict(): com.mongodb.util.ObjectSerializer;
			}
			export module JSONSerializers {
				export class BSONTimestampSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.BSONTimestampSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class BinarySerializer extends com.mongodb.util.JSONSerializers.BinarySerializerBase {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.BinarySerializer>;
					public serialize(param0: native.Array<number>, param1: number, param2: java.lang.StringBuilder): void;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export abstract class BinarySerializerBase extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.BinarySerializerBase>;
					public serialize(param0: native.Array<number>, param1: number, param2: java.lang.StringBuilder): void;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class ByteArraySerializer extends com.mongodb.util.JSONSerializers.BinarySerializerBase {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.ByteArraySerializer>;
					public serialize(param0: native.Array<number>, param1: number, param2: java.lang.StringBuilder): void;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class CodeSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.CodeSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class CodeWScopeSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.CodeWScopeSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export abstract class CompoundObjectSerializer extends com.mongodb.util.AbstractObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.CompoundObjectSerializer>;
					public serializer: com.mongodb.util.ObjectSerializer;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class DBObjectSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.DBObjectSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class DBRefBaseSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.DBRefBaseSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class DateSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.DateSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class Decimal128Serializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.Decimal128Serializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class IterableSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.IterableSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class LegacyBSONTimestampSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.LegacyBSONTimestampSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class LegacyBinarySerializer extends com.mongodb.util.AbstractObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.LegacyBinarySerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class LegacyDateSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.LegacyDateSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class MapSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.MapSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class MaxKeySerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.MaxKeySerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class MinKeySerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.MinKeySerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class ObjectArraySerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.ObjectArraySerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class ObjectIdSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.ObjectIdSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class PatternSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.PatternSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class StringSerializer extends com.mongodb.util.AbstractObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.StringSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class SymbolSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.SymbolSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class ToStringSerializer extends com.mongodb.util.AbstractObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.ToStringSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class UndefinedSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.UndefinedSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
				export class UuidSerializer extends com.mongodb.util.JSONSerializers.CompoundObjectSerializer {
					public static class: java.lang.Class<com.mongodb.util.JSONSerializers.UuidSerializer>;
					public serialize(param0: any): string;
					public serialize(param0: any, param1: java.lang.StringBuilder): void;
				}
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class ObjectSerializer {
				public static class: java.lang.Class<com.mongodb.util.ObjectSerializer>;
				/**
				 * Constructs a new instance of the com.mongodb.util.ObjectSerializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					serialize(param0: any, param1: java.lang.StringBuilder): void;
					serialize(param0: any): string;
				});
				public constructor();
				public serialize(param0: any, param1: java.lang.StringBuilder): void;
				public serialize(param0: any): string;
			}
		}
	}
}

declare module com {
	export module mongodb {
		export module util {
			export class Util {
				public static class: java.lang.Class<com.mongodb.util.Util>;
				public static toHex(param0: native.Array<number>): string;
				public constructor();
				public static hexMD5(param0: native.Array<number>): string;
				public static hexMD5(param0: java.nio.ByteBuffer, param1: number, param2: number): string;
			}
		}
	}
}

declare module org {
	export module bson {
		export abstract class AbstractBsonReader extends org.bson.BsonReader {
			public static class: java.lang.Class<org.bson.AbstractBsonReader>;
			public readDecimal128(param0: string): org.bson.types.Decimal128;
			public peekBinarySubType(): number;
			public readJavaScript(): string;
			public readInt64(): number;
			public readObjectId(): org.bson.types.ObjectId;
			public doSkipValue(): void;
			public readString(): string;
			public readMinKey(param0: string): void;
			public doReadSymbol(): string;
			public setCurrentBsonType(param0: org.bson.BsonType): void;
			public doReadEndDocument(): void;
			public doReadMinKey(): void;
			public readDateTime(param0: string): number;
			public throwInvalidState(param0: string, param1: native.Array<org.bson.AbstractBsonReader.State>): void;
			public throwInvalidContextType(param0: string, param1: org.bson.BsonContextType, param2: native.Array<org.bson.BsonContextType>): void;
			public doReadJavaScript(): string;
			public doReadString(): string;
			public readDBPointer(param0: string): org.bson.BsonDbPointer;
			public skipValue(): void;
			public doReadTimestamp(): org.bson.BsonTimestamp;
			public mark(): void;
			public readSymbol(): string;
			public readBinaryData(param0: string): org.bson.BsonBinary;
			public getState(): org.bson.AbstractBsonReader.State;
			public verifyName(param0: string): void;
			public readMinKey(): void;
			public constructor();
			public doPeekBinarySubType(): number;
			public readEndArray(): void;
			public readMaxKey(param0: string): void;
			public verifyBSONType(param0: string, param1: org.bson.BsonType): void;
			public checkPreconditions(param0: string, param1: org.bson.BsonType): void;
			public doReadMaxKey(): void;
			public readBoolean(): boolean;
			public readTimestamp(): org.bson.BsonTimestamp;
			public doReadDBPointer(): org.bson.BsonDbPointer;
			public readStartDocument(): void;
			public doReadInt32(): number;
			public readEndDocument(): void;
			public getMark(): org.bson.BsonReaderMark;
			public doPeekBinarySize(): number;
			public readJavaScriptWithScope(): string;
			public readRegularExpression(): org.bson.BsonRegularExpression;
			public doReadBoolean(): boolean;
			public getCurrentBsonType(): org.bson.BsonType;
			public readRegularExpression(param0: string): org.bson.BsonRegularExpression;
			public doReadStartDocument(): void;
			public readBoolean(param0: string): boolean;
			public isClosed(): boolean;
			public peekBinarySize(): number;
			public doReadUndefined(): void;
			public doSkipName(): void;
			public doReadDateTime(): number;
			public readJavaScript(param0: string): string;
			public readTimestamp(param0: string): org.bson.BsonTimestamp;
			public readUndefined(): void;
			public setContext(param0: org.bson.AbstractBsonReader.Context): void;
			public doReadBinaryData(): org.bson.BsonBinary;
			public readStartArray(): void;
			public readDouble(param0: string): number;
			public doReadEndArray(): void;
			public readDouble(): number;
			public readInt32(): number;
			public readInt64(param0: string): number;
			public readJavaScriptWithScope(param0: string): string;
			public getNextState(): org.bson.AbstractBsonReader.State;
			public reset(): void;
			public doReadDouble(): number;
			public readName(param0: string): void;
			public close(): void;
			public readBsonType(): org.bson.BsonType;
			public doReadObjectId(): org.bson.types.ObjectId;
			public doReadDecimal128(): org.bson.types.Decimal128;
			public doReadJavaScriptWithScope(): string;
			public readDateTime(): number;
			public readDBPointer(): org.bson.BsonDbPointer;
			public getCurrentName(): string;
			public readObjectId(param0: string): org.bson.types.ObjectId;
			public readDecimal128(): org.bson.types.Decimal128;
			public doReadInt64(): number;
			public readNull(param0: string): void;
			public doReadNull(): void;
			public setState(param0: org.bson.AbstractBsonReader.State): void;
			public doReadRegularExpression(): org.bson.BsonRegularExpression;
			public readNull(): void;
			public readBinaryData(): org.bson.BsonBinary;
			public doReadStartArray(): void;
			public skipName(): void;
			public readMaxKey(): void;
			public readName(): string;
			public readUndefined(param0: string): void;
			public setCurrentName(param0: string): void;
			public readInt32(param0: string): number;
			public readSymbol(param0: string): string;
			public readString(param0: string): string;
			public getContext(): org.bson.AbstractBsonReader.Context;
		}
		export module AbstractBsonReader {
			export abstract class Context {
				public static class: java.lang.Class<org.bson.AbstractBsonReader.Context>;
				public getParentContext(): org.bson.AbstractBsonReader.Context;
				public constructor(param0: org.bson.AbstractBsonReader, param1: org.bson.AbstractBsonReader.Context, param2: org.bson.BsonContextType);
				public getContextType(): org.bson.BsonContextType;
			}
			export class Mark extends org.bson.BsonReaderMark {
				public static class: java.lang.Class<org.bson.AbstractBsonReader.Mark>;
				public reset(): void;
				public getParentContext(): org.bson.AbstractBsonReader.Context;
				public constructor(param0: org.bson.AbstractBsonReader);
				public getContextType(): org.bson.BsonContextType;
			}
			export class State {
				public static class: java.lang.Class<org.bson.AbstractBsonReader.State>;
				public static INITIAL: org.bson.AbstractBsonReader.State;
				public static TYPE: org.bson.AbstractBsonReader.State;
				public static NAME: org.bson.AbstractBsonReader.State;
				public static VALUE: org.bson.AbstractBsonReader.State;
				public static SCOPE_DOCUMENT: org.bson.AbstractBsonReader.State;
				public static END_OF_DOCUMENT: org.bson.AbstractBsonReader.State;
				public static END_OF_ARRAY: org.bson.AbstractBsonReader.State;
				public static DONE: org.bson.AbstractBsonReader.State;
				public static CLOSED: org.bson.AbstractBsonReader.State;
				public static valueOf(param0: string): org.bson.AbstractBsonReader.State;
				public static values(): native.Array<org.bson.AbstractBsonReader.State>;
			}
		}
	}
}

declare module org {
	export module bson {
		export abstract class AbstractBsonWriter extends org.bson.BsonWriter {
			public static class: java.lang.Class<org.bson.AbstractBsonWriter>;
			public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDBPointer(param0: org.bson.BsonDbPointer): void;
			public writeJavaScriptWithScope(param0: string): void;
			public pipeExtraElements(param0: java.util.List<org.bson.BsonElement>): void;
			public writeName(param0: string): void;
			public writeSymbol(param0: string, param1: string): void;
			public doWriteMaxKey(): void;
			public writeStartArray(param0: string): void;
			public doWriteDateTime(param0: number): void;
			public doWriteRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDouble(param0: number): void;
			public writeInt64(param0: number): void;
			public constructor(param0: org.bson.BsonWriterSettings);
			public doWriteSymbol(param0: string): void;
			public throwInvalidContextType(param0: string, param1: org.bson.BsonContextType, param2: native.Array<org.bson.BsonContextType>): void;
			public checkState(param0: native.Array<org.bson.AbstractBsonWriter.State>): boolean;
			public checkPreconditions(param0: string, param1: native.Array<org.bson.AbstractBsonWriter.State>): void;
			public writeStartDocument(param0: string): void;
			public writeJavaScriptWithScope(param0: string, param1: string): void;
			public writeNull(): void;
			public flush(): void;
			public doWriteEndArray(): void;
			public doWriteNull(): void;
			public writeBinaryData(param0: org.bson.BsonBinary): void;
			public writeSymbol(param0: string): void;
			public doWriteBinaryData(param0: org.bson.BsonBinary): void;
			public writeDBPointer(param0: org.bson.BsonDbPointer): void;
			public doWriteMinKey(): void;
			public writeStartDocument(): void;
			public doWriteObjectId(param0: org.bson.types.ObjectId): void;
			public writeBoolean(param0: boolean): void;
			public doWriteBoolean(param0: boolean): void;
			public writeJavaScript(param0: string, param1: string): void;
			public writeUndefined(): void;
			public abortPipe(): boolean;
			public doWriteTimestamp(param0: org.bson.BsonTimestamp): void;
			public writeDecimal128(param0: org.bson.types.Decimal128): void;
			public pipe(param0: org.bson.BsonReader, param1: java.util.List<org.bson.BsonElement>): void;
			public setState(param0: org.bson.AbstractBsonWriter.State): void;
			public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public getNextState(): org.bson.AbstractBsonWriter.State;
			public writeInt64(param0: string, param1: number): void;
			public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.FieldNameValidator);
			public doWriteInt64(param0: number): void;
			public isClosed(): boolean;
			public writeDateTime(param0: string, param1: number): void;
			public writeDateTime(param0: number): void;
			public writeMinKey(): void;
			public pipe(param0: org.bson.BsonReader): void;
			public writeMaxKey(param0: string): void;
			public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public writeObjectId(param0: org.bson.types.ObjectId): void;
			public doWriteString(param0: string): void;
			public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
			public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
			public writeInt32(param0: number): void;
			public writeNull(param0: string): void;
			public writeString(param0: string): void;
			public writeDouble(param0: string, param1: number): void;
			public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
			public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
			public doWriteDecimal128(param0: org.bson.types.Decimal128): void;
			public doWriteJavaScript(param0: string): void;
			public doWriteName(param0: string): void;
			public writeString(param0: string, param1: string): void;
			public throwInvalidState(param0: string, param1: native.Array<org.bson.AbstractBsonWriter.State>): void;
			public doWriteStartDocument(): void;
			public writeMinKey(param0: string): void;
			public close(): void;
			public doWriteUndefined(): void;
			public writeStartArray(): void;
			public writeMaxKey(): void;
			public writeEndDocument(): void;
			public setContext(param0: org.bson.AbstractBsonWriter.Context): void;
			public getState(): org.bson.AbstractBsonWriter.State;
			public writeInt32(param0: string, param1: number): void;
			public doWriteJavaScriptWithScope(param0: string): void;
			public writeEndArray(): void;
			public writeBoolean(param0: string, param1: boolean): void;
			public doWriteEndDocument(): void;
			public writeDouble(param0: number): void;
			public doWriteInt32(param0: number): void;
			public writeJavaScript(param0: string): void;
			public getContext(): org.bson.AbstractBsonWriter.Context;
			public getName(): string;
			public writeUndefined(param0: string): void;
			public writeTimestamp(param0: org.bson.BsonTimestamp): void;
			public doWriteStartArray(): void;
		}
		export module AbstractBsonWriter {
			export class Context {
				public static class: java.lang.Class<org.bson.AbstractBsonWriter.Context>;
				public constructor(param0: org.bson.AbstractBsonWriter, param1: org.bson.AbstractBsonWriter.Context);
				public getParentContext(): org.bson.AbstractBsonWriter.Context;
				public constructor(param0: org.bson.AbstractBsonWriter, param1: org.bson.AbstractBsonWriter.Context, param2: org.bson.BsonContextType);
				public getContextType(): org.bson.BsonContextType;
				public copy(): org.bson.AbstractBsonWriter.Context;
			}
			export class Mark {
				public static class: java.lang.Class<org.bson.AbstractBsonWriter.Mark>;
				public reset(): void;
				public constructor(param0: org.bson.AbstractBsonWriter);
			}
			export class State {
				public static class: java.lang.Class<org.bson.AbstractBsonWriter.State>;
				public static INITIAL: org.bson.AbstractBsonWriter.State;
				public static NAME: org.bson.AbstractBsonWriter.State;
				public static VALUE: org.bson.AbstractBsonWriter.State;
				public static SCOPE_DOCUMENT: org.bson.AbstractBsonWriter.State;
				public static DONE: org.bson.AbstractBsonWriter.State;
				public static CLOSED: org.bson.AbstractBsonWriter.State;
				public static values(): native.Array<org.bson.AbstractBsonWriter.State>;
				public static valueOf(param0: string): org.bson.AbstractBsonWriter.State;
			}
		}
	}
}

declare module org {
	export module bson {
		export class BSON {
			public static class: java.lang.Class<org.bson.BSON>;
			public static EOO: number;
			public static NUMBER: number;
			public static STRING: number;
			public static OBJECT: number;
			public static ARRAY: number;
			public static BINARY: number;
			public static UNDEFINED: number;
			public static OID: number;
			public static BOOLEAN: number;
			public static DATE: number;
			public static NULL: number;
			public static REGEX: number;
			public static REF: number;
			public static CODE: number;
			public static SYMBOL: number;
			public static CODE_W_SCOPE: number;
			public static NUMBER_INT: number;
			public static TIMESTAMP: number;
			public static NUMBER_LONG: number;
			public static MINKEY: number;
			public static MAXKEY: number;
			public static B_GENERAL: number;
			public static B_FUNC: number;
			public static B_BINARY: number;
			public static B_UUID: number;
			public static toInt(param0: any): number;
			public static decode(param0: native.Array<number>): org.bson.BSONObject;
			public static clearEncodingHooks(): void;
			public static clearDecodingHooks(): void;
			public constructor();
			public static removeEncodingHook(param0: java.lang.Class<any>, param1: org.bson.Transformer): void;
			public static regexFlags(param0: string): number;
			public static addEncodingHook(param0: java.lang.Class<any>, param1: org.bson.Transformer): void;
			public static encode(param0: org.bson.BSONObject): native.Array<number>;
			public static applyEncodingHooks(param0: any): any;
			public static hasDecodeHooks(): boolean;
			public static clearAllHooks(): void;
			public static hasEncodeHooks(): boolean;
			public static addDecodingHook(param0: java.lang.Class<any>, param1: org.bson.Transformer): void;
			public static getDecodingHooks(param0: java.lang.Class<any>): java.util.List<org.bson.Transformer>;
			public static regexFlag(param0: string): number;
			public static removeDecodingHooks(param0: java.lang.Class<any>): void;
			public static applyDecodingHooks(param0: any): any;
			public static regexFlags(param0: number): string;
			public static getEncodingHooks(param0: java.lang.Class<any>): java.util.List<org.bson.Transformer>;
			public static removeEncodingHooks(param0: java.lang.Class<any>): void;
			public static removeDecodingHook(param0: java.lang.Class<any>, param1: org.bson.Transformer): void;
		}
	}
}

declare module org {
	export module bson {
		export class BSONCallback {
			public static class: java.lang.Class<org.bson.BSONCallback>;
			/**
			 * Constructs a new instance of the org.bson.BSONCallback interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				objectStart(): void;
				objectStart(param0: string): void;
				objectDone(): any;
				reset(): void;
				get(): any;
				createBSONCallback(): org.bson.BSONCallback;
				arrayStart(): void;
				arrayStart(param0: string): void;
				arrayDone(): any;
				gotNull(param0: string): void;
				gotUndefined(param0: string): void;
				gotMinKey(param0: string): void;
				gotMaxKey(param0: string): void;
				gotBoolean(param0: string, param1: boolean): void;
				gotDouble(param0: string, param1: number): void;
				gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
				gotInt(param0: string, param1: number): void;
				gotLong(param0: string, param1: number): void;
				gotDate(param0: string, param1: number): void;
				gotString(param0: string, param1: string): void;
				gotSymbol(param0: string, param1: string): void;
				gotRegex(param0: string, param1: string, param2: string): void;
				gotTimestamp(param0: string, param1: number, param2: number): void;
				gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
				gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
				gotBinaryArray(param0: string, param1: native.Array<number>): void;
				gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
				gotUUID(param0: string, param1: number, param2: number): void;
				gotCode(param0: string, param1: string): void;
				gotCodeWScope(param0: string, param1: string, param2: any): void;
			});
			public constructor();
			public arrayDone(): any;
			public arrayStart(param0: string): void;
			public get(): any;
			public objectStart(): void;
			public gotTimestamp(param0: string, param1: number, param2: number): void;
			public gotSymbol(param0: string, param1: string): void;
			public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public objectDone(): any;
			public arrayStart(): void;
			public gotMaxKey(param0: string): void;
			public reset(): void;
			public gotUndefined(param0: string): void;
			public gotMinKey(param0: string): void;
			public gotInt(param0: string, param1: number): void;
			public gotCode(param0: string, param1: string): void;
			public objectStart(param0: string): void;
			public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
			public gotDouble(param0: string, param1: number): void;
			public gotString(param0: string, param1: string): void;
			public gotCodeWScope(param0: string, param1: string, param2: any): void;
			public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public gotBoolean(param0: string, param1: boolean): void;
			public gotBinaryArray(param0: string, param1: native.Array<number>): void;
			public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
			public gotUUID(param0: string, param1: number, param2: number): void;
			public gotNull(param0: string): void;
			public gotDate(param0: string, param1: number): void;
			public gotLong(param0: string, param1: number): void;
			public createBSONCallback(): org.bson.BSONCallback;
			public gotRegex(param0: string, param1: string, param2: string): void;
		}
	}
}

declare module org {
	export module bson {
		export class BSONCallbackAdapter extends org.bson.AbstractBsonWriter {
			public static class: java.lang.Class<org.bson.BSONCallbackAdapter>;
			public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDBPointer(param0: org.bson.BsonDbPointer): void;
			public writeJavaScriptWithScope(param0: string): void;
			public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.BSONCallback);
			public writeName(param0: string): void;
			public writeSymbol(param0: string, param1: string): void;
			public doWriteMaxKey(): void;
			public writeStartArray(param0: string): void;
			public doWriteDateTime(param0: number): void;
			public doWriteRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDouble(param0: number): void;
			public writeInt64(param0: number): void;
			public constructor(param0: org.bson.BsonWriterSettings);
			public doWriteSymbol(param0: string): void;
			public getContext(): org.bson.BSONCallbackAdapter.Context;
			public writeStartDocument(param0: string): void;
			public writeJavaScriptWithScope(param0: string, param1: string): void;
			public writeNull(): void;
			public flush(): void;
			public doWriteEndArray(): void;
			public doWriteNull(): void;
			public writeBinaryData(param0: org.bson.BsonBinary): void;
			public writeSymbol(param0: string): void;
			public doWriteBinaryData(param0: org.bson.BsonBinary): void;
			public writeDBPointer(param0: org.bson.BsonDbPointer): void;
			public doWriteMinKey(): void;
			public writeStartDocument(): void;
			public doWriteObjectId(param0: org.bson.types.ObjectId): void;
			public writeBoolean(param0: boolean): void;
			public doWriteBoolean(param0: boolean): void;
			public writeJavaScript(param0: string, param1: string): void;
			public writeUndefined(): void;
			public doWriteTimestamp(param0: org.bson.BsonTimestamp): void;
			public writeDecimal128(param0: org.bson.types.Decimal128): void;
			public pipe(param0: org.bson.BsonReader, param1: java.util.List<org.bson.BsonElement>): void;
			public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public writeInt64(param0: string, param1: number): void;
			public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.FieldNameValidator);
			public doWriteInt64(param0: number): void;
			public writeDateTime(param0: string, param1: number): void;
			public writeDateTime(param0: number): void;
			public writeMinKey(): void;
			public pipe(param0: org.bson.BsonReader): void;
			public writeMaxKey(param0: string): void;
			public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public writeObjectId(param0: org.bson.types.ObjectId): void;
			public doWriteString(param0: string): void;
			public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
			public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
			public writeInt32(param0: number): void;
			public writeNull(param0: string): void;
			public writeString(param0: string): void;
			public writeDouble(param0: string, param1: number): void;
			public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
			public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
			public doWriteDecimal128(param0: org.bson.types.Decimal128): void;
			public doWriteJavaScript(param0: string): void;
			public writeString(param0: string, param1: string): void;
			public doWriteStartDocument(): void;
			public writeMinKey(param0: string): void;
			public doWriteUndefined(): void;
			public writeStartArray(): void;
			public writeMaxKey(): void;
			public writeEndDocument(): void;
			public writeInt32(param0: string, param1: number): void;
			public doWriteJavaScriptWithScope(param0: string): void;
			public writeBoolean(param0: string, param1: boolean): void;
			public writeEndArray(): void;
			public doWriteEndDocument(): void;
			public writeDouble(param0: number): void;
			public doWriteInt32(param0: number): void;
			public writeJavaScript(param0: string): void;
			public getContext(): org.bson.AbstractBsonWriter.Context;
			public getName(): string;
			public writeUndefined(param0: string): void;
			public writeTimestamp(param0: org.bson.BsonTimestamp): void;
			public doWriteStartArray(): void;
		}
		export module BSONCallbackAdapter {
			export class Context extends org.bson.AbstractBsonWriter.Context {
				public static class: java.lang.Class<org.bson.BSONCallbackAdapter.Context>;
				public getParentContext(): org.bson.AbstractBsonWriter.Context;
				public getParentContext(): org.bson.BSONCallbackAdapter.Context;
			}
		}
	}
}

declare module org {
	export module bson {
		export class BSONDecoder {
			public static class: java.lang.Class<org.bson.BSONDecoder>;
			/**
			 * Constructs a new instance of the org.bson.BSONDecoder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				readObject(param0: native.Array<number>): org.bson.BSONObject;
				readObject(param0: java.io.InputStream): org.bson.BSONObject;
				decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
				decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
			});
			public constructor();
			public readObject(param0: java.io.InputStream): org.bson.BSONObject;
			public decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
			public readObject(param0: native.Array<number>): org.bson.BSONObject;
			public decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
		}
	}
}

declare module org {
	export module bson {
		export class BSONEncoder {
			public static class: java.lang.Class<org.bson.BSONEncoder>;
			/**
			 * Constructs a new instance of the org.bson.BSONEncoder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				encode(param0: org.bson.BSONObject): native.Array<number>;
				putObject(param0: org.bson.BSONObject): number;
				done(): void;
				set(param0: org.bson.io.OutputBuffer): void;
			});
			public constructor();
			public putObject(param0: org.bson.BSONObject): number;
			public set(param0: org.bson.io.OutputBuffer): void;
			public done(): void;
			public encode(param0: org.bson.BSONObject): native.Array<number>;
		}
	}
}

declare module org {
	export module bson {
		export class BSONException {
			public static class: java.lang.Class<org.bson.BSONException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public getErrorCode(): java.lang.Integer;
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
			public hasErrorCode(): boolean;
		}
	}
}

declare module org {
	export module bson {
		export class BSONObject {
			public static class: java.lang.Class<org.bson.BSONObject>;
			/**
			 * Constructs a new instance of the org.bson.BSONObject interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				put(param0: string, param1: any): any;
				putAll(param0: org.bson.BSONObject): void;
				putAll(param0: java.util.Map): void;
				get(param0: string): any;
				toMap(): java.util.Map;
				removeField(param0: string): any;
				containsKey(param0: string): boolean;
				containsField(param0: string): boolean;
				keySet(): java.util.Set<string>;
			});
			public constructor();
			public removeField(param0: string): any;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public toMap(): java.util.Map;
			public containsField(param0: string): boolean;
			public putAll(param0: org.bson.BSONObject): void;
			public containsKey(param0: string): boolean;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module org {
	export module bson {
		export class BasicBSONCallback extends org.bson.BSONCallback {
			public static class: java.lang.Class<org.bson.BasicBSONCallback>;
			public arrayDone(): any;
			public arrayStart(param0: string): void;
			public get(): any;
			public objectStart(): void;
			public isStackEmpty(): boolean;
			public gotTimestamp(param0: string, param1: number, param2: number): void;
			public gotSymbol(param0: string, param1: string): void;
			public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public objectDone(): any;
			public setRoot(param0: any): void;
			public arrayStart(): void;
			public gotMaxKey(param0: string): void;
			public cur(): org.bson.BSONObject;
			public gotUndefined(param0: string): void;
			public reset(): void;
			public gotMinKey(param0: string): void;
			public gotInt(param0: string, param1: number): void;
			public gotCode(param0: string, param1: string): void;
			public createList(): org.bson.BSONObject;
			public constructor();
			public objectStart(param0: string): void;
			public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
			public gotDouble(param0: string, param1: number): void;
			public create(param0: boolean, param1: java.util.List<string>): org.bson.BSONObject;
			public gotString(param0: string, param1: string): void;
			public gotCodeWScope(param0: string, param1: string, param2: any): void;
			public curName(): string;
			public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public gotBoolean(param0: string, param1: boolean): void;
			public gotBinaryArray(param0: string, param1: native.Array<number>): void;
			public _put(param0: string, param1: any): void;
			public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
			public gotUUID(param0: string, param1: number, param2: number): void;
			public gotNull(param0: string): void;
			public gotDate(param0: string, param1: number): void;
			public create(): org.bson.BSONObject;
			public gotLong(param0: string, param1: number): void;
			public createBSONCallback(): org.bson.BSONCallback;
			public gotRegex(param0: string, param1: string, param2: string): void;
		}
	}
}

declare module org {
	export module bson {
		export class BasicBSONDecoder extends org.bson.BSONDecoder {
			public static class: java.lang.Class<org.bson.BasicBSONDecoder>;
			public readObject(param0: java.io.InputStream): org.bson.BSONObject;
			public decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
			public readObject(param0: native.Array<number>): org.bson.BSONObject;
			public constructor();
			public decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
		}
	}
}

declare module org {
	export module bson {
		export class BasicBSONEncoder extends org.bson.BSONEncoder {
			public static class: java.lang.Class<org.bson.BasicBSONEncoder>;
			public set(param0: org.bson.io.OutputBuffer): void;
			public putObject(param0: org.bson.BSONObject): number;
			public done(): void;
			public putString(param0: string, param1: string): void;
			public putSpecial(param0: string, param1: any): boolean;
			public putUUID(param0: string, param1: java.util.UUID): void;
			public putArray(param0: string, param1: any): void;
			public encode(param0: org.bson.BSONObject): native.Array<number>;
			public _putObjectField(param0: string, param1: any): void;
			public putTimestamp(param0: string, param1: org.bson.types.BSONTimestamp): void;
			public putObject(param0: string, param1: org.bson.BSONObject): number;
			public putName(param0: string): void;
			public putIterable(param0: string, param1: java.lang.Iterable): void;
			public putCode(param0: string, param1: org.bson.types.Code): void;
			public putBinary(param0: string, param1: native.Array<number>): void;
			public putMinKey(param0: string): void;
			public putObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public getOutputBuffer(): org.bson.io.OutputBuffer;
			public putPattern(param0: string, param1: java.util.regex.Pattern): void;
			public putDate(param0: string, param1: java.util.Date): void;
			public putMaxKey(param0: string): void;
			public putNull(param0: string): void;
			public putMap(param0: string, param1: java.util.Map): void;
			public putNumber(param0: string, param1: java.lang.Number): void;
			public putUndefined(param0: string): void;
			public putSymbol(param0: string, param1: org.bson.types.Symbol): void;
			public putDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public constructor();
			public putBoolean(param0: string, param1: java.lang.Boolean): void;
			public getBsonWriter(): org.bson.BsonBinaryWriter;
			public putBinary(param0: string, param1: org.bson.types.Binary): void;
			public putCodeWScope(param0: string, param1: org.bson.types.CodeWScope): void;
		}
	}
}

declare module org {
	export module bson {
		export class BasicBSONObject extends java.util.LinkedHashMap<string,any> implements org.bson.BSONObject  {
			public static class: java.lang.Class<org.bson.BasicBSONObject>;
			public constructor(param0: java.util.Map);
			public keySet(): java.util.Set<string>;
			public equals(param0: any): boolean;
			public put(param0: string, param1: any): any;
			public getBoolean(param0: string): boolean;
			public getObjectId(param0: string, param1: org.bson.types.ObjectId): org.bson.types.ObjectId;
			public getObjectId(param0: string): org.bson.types.ObjectId;
			public getLong(param0: string, param1: number): number;
			public getDate(param0: string): java.util.Date;
			public getDate(param0: string, param1: java.util.Date): java.util.Date;
			public append(param0: string, param1: any): org.bson.BasicBSONObject;
			public constructor(param0: string, param1: any);
			public containsKey(param0: string): boolean;
			public getLong(param0: string): number;
			public get(param0: string): any;
			public getInt(param0: string): number;
			public toMap(): java.util.Map;
			public getInt(param0: string, param1: number): number;
			public constructor(param0: number);
			public getString(param0: string): string;
			public constructor();
			public containsField(param0: string): boolean;
			public removeField(param0: string): any;
			public getDouble(param0: string, param1: number): number;
			public getDouble(param0: string): number;
			public getBoolean(param0: string, param1: boolean): boolean;
			public getString(param0: string, param1: string): string;
			public putAll(param0: org.bson.BSONObject): void;
			public putAll(param0: java.util.Map): void;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonArray extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonArray>;
			public addAll(param0: number, param1: java.util.Collection<any>): boolean;
			public equals(param0: any): boolean;
			public toArray(): native.Array<any>;
			public listIterator(param0: number): java.util.ListIterator<org.bson.BsonValue>;
			public add(param0: org.bson.BsonValue): boolean;
			public add(param0: number, param1: org.bson.BsonValue): void;
			public contains(param0: any): boolean;
			public clone(): org.bson.BsonArray;
			public getValues(): java.util.List<org.bson.BsonValue>;
			public remove(param0: number): org.bson.BsonValue;
			public clear(): void;
			public subList(param0: number, param1: number): java.util.List<org.bson.BsonValue>;
			public iterator(): java.util.Iterator<org.bson.BsonValue>;
			public size(): number;
			public isEmpty(): boolean;
			public toArray(param0: native.Array<any>): native.Array<any>;
			public constructor();
			public constructor(param0: java.util.List<any>);
			public addAll(param0: java.util.Collection<any>): boolean;
			public retainAll(param0: java.util.Collection<any>): boolean;
			public remove(param0: any): boolean;
			public containsAll(param0: java.util.Collection<any>): boolean;
			public listIterator(): java.util.ListIterator<org.bson.BsonValue>;
			public lastIndexOf(param0: any): number;
			public toString(): string;
			public get(param0: number): org.bson.BsonValue;
			public set(param0: number, param1: org.bson.BsonValue): org.bson.BsonValue;
			public removeAll(param0: java.util.Collection<any>): boolean;
			public static parse(param0: string): org.bson.BsonArray;
			public getBsonType(): org.bson.BsonType;
			public indexOf(param0: any): number;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonBinary extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonBinary>;
			public getType(): number;
			public equals(param0: any): boolean;
			public constructor(param0: number, param1: native.Array<number>);
			public constructor(param0: org.bson.BsonBinarySubType, param1: native.Array<number>);
			public constructor(param0: native.Array<number>);
			public asUuid(): java.util.UUID;
			public asUuid(param0: org.bson.UuidRepresentation): java.util.UUID;
			public constructor(param0: java.util.UUID, param1: org.bson.UuidRepresentation);
			public constructor(param0: java.util.UUID);
			public getData(): native.Array<number>;
			public toString(): string;
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonBinaryReader extends org.bson.AbstractBsonReader {
			public static class: java.lang.Class<org.bson.BsonBinaryReader>;
			public readDecimal128(param0: string): org.bson.types.Decimal128;
			public peekBinarySubType(): number;
			public readJavaScript(): string;
			public readInt64(): number;
			public readObjectId(): org.bson.types.ObjectId;
			public doSkipValue(): void;
			public readMinKey(param0: string): void;
			public readString(): string;
			public doReadSymbol(): string;
			public doReadMinKey(): void;
			public doReadEndDocument(): void;
			public readDateTime(param0: string): number;
			public doReadJavaScript(): string;
			public getBsonInput(): org.bson.io.BsonInput;
			public doReadString(): string;
			public readDBPointer(param0: string): org.bson.BsonDbPointer;
			public skipValue(): void;
			public doReadTimestamp(): org.bson.BsonTimestamp;
			public mark(): void;
			public readBinaryData(param0: string): org.bson.BsonBinary;
			public readSymbol(): string;
			public readMinKey(): void;
			public constructor();
			public doPeekBinarySubType(): number;
			public readEndArray(): void;
			public readMaxKey(param0: string): void;
			public doReadMaxKey(): void;
			public readBoolean(): boolean;
			public readTimestamp(): org.bson.BsonTimestamp;
			public doReadDBPointer(): org.bson.BsonDbPointer;
			public readStartDocument(): void;
			public doReadInt32(): number;
			public readEndDocument(): void;
			public getMark(): org.bson.BsonReaderMark;
			public doPeekBinarySize(): number;
			public readJavaScriptWithScope(): string;
			public readRegularExpression(): org.bson.BsonRegularExpression;
			public doReadBoolean(): boolean;
			public getCurrentBsonType(): org.bson.BsonType;
			public readRegularExpression(param0: string): org.bson.BsonRegularExpression;
			public doReadStartDocument(): void;
			public readBoolean(param0: string): boolean;
			public getContext(): org.bson.BsonBinaryReader.Context;
			public peekBinarySize(): number;
			public doReadUndefined(): void;
			public doSkipName(): void;
			public doReadDateTime(): number;
			public constructor(param0: java.nio.ByteBuffer);
			public readJavaScript(param0: string): string;
			public readTimestamp(param0: string): org.bson.BsonTimestamp;
			public readUndefined(): void;
			public doReadBinaryData(): org.bson.BsonBinary;
			public readStartArray(): void;
			public readDouble(param0: string): number;
			public doReadEndArray(): void;
			public readDouble(): number;
			public readInt32(): number;
			public readInt64(param0: string): number;
			public reset(): void;
			public readJavaScriptWithScope(param0: string): string;
			public doReadDouble(): number;
			public readName(param0: string): void;
			public close(): void;
			public readBsonType(): org.bson.BsonType;
			public constructor(param0: org.bson.io.BsonInput);
			public doReadObjectId(): org.bson.types.ObjectId;
			public doReadDecimal128(): org.bson.types.Decimal128;
			public doReadJavaScriptWithScope(): string;
			public readDateTime(): number;
			public readDBPointer(): org.bson.BsonDbPointer;
			public getCurrentName(): string;
			public readObjectId(param0: string): org.bson.types.ObjectId;
			public readDecimal128(): org.bson.types.Decimal128;
			public doReadInt64(): number;
			public readNull(param0: string): void;
			public doReadNull(): void;
			public doReadRegularExpression(): org.bson.BsonRegularExpression;
			public readNull(): void;
			public readBinaryData(): org.bson.BsonBinary;
			public doReadStartArray(): void;
			public skipName(): void;
			public readMaxKey(): void;
			public readName(): string;
			public readUndefined(param0: string): void;
			public readInt32(param0: string): number;
			public readSymbol(param0: string): string;
			public getContext(): org.bson.AbstractBsonReader.Context;
			public readString(param0: string): string;
		}
		export module BsonBinaryReader {
			export class Context extends org.bson.AbstractBsonReader.Context {
				public static class: java.lang.Class<org.bson.BsonBinaryReader.Context>;
				public getParentContext(): org.bson.AbstractBsonReader.Context;
				public getParentContext(): org.bson.BsonBinaryReader.Context;
			}
			export class Mark extends org.bson.AbstractBsonReader.Mark {
				public static class: java.lang.Class<org.bson.BsonBinaryReader.Mark>;
				public reset(): void;
				public constructor(param0: org.bson.BsonBinaryReader);
				public constructor(param0: org.bson.AbstractBsonReader);
			}
		}
	}
}

declare module org {
	export module bson {
		export class BsonBinarySubType {
			public static class: java.lang.Class<org.bson.BsonBinarySubType>;
			public static BINARY: org.bson.BsonBinarySubType;
			public static FUNCTION: org.bson.BsonBinarySubType;
			public static OLD_BINARY: org.bson.BsonBinarySubType;
			public static UUID_LEGACY: org.bson.BsonBinarySubType;
			public static UUID_STANDARD: org.bson.BsonBinarySubType;
			public static MD5: org.bson.BsonBinarySubType;
			public static USER_DEFINED: org.bson.BsonBinarySubType;
			public getValue(): number;
			public static values(): native.Array<org.bson.BsonBinarySubType>;
			public static valueOf(param0: string): org.bson.BsonBinarySubType;
			public static isUuid(param0: number): boolean;
		}
	}
}

declare module org {
	export module bson {
		export class BsonBinaryWriter extends org.bson.AbstractBsonWriter {
			public static class: java.lang.Class<org.bson.BsonBinaryWriter>;
			public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDBPointer(param0: org.bson.BsonDbPointer): void;
			public writeJavaScriptWithScope(param0: string): void;
			public writeName(param0: string): void;
			public writeSymbol(param0: string, param1: string): void;
			public doWriteMaxKey(): void;
			public writeStartArray(param0: string): void;
			public doWriteDateTime(param0: number): void;
			public doWriteRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDouble(param0: number): void;
			public writeInt64(param0: number): void;
			public constructor(param0: org.bson.BsonWriterSettings);
			public doWriteSymbol(param0: string): void;
			public writeStartDocument(param0: string): void;
			public writeJavaScriptWithScope(param0: string, param1: string): void;
			public writeNull(): void;
			public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.BsonBinaryWriterSettings, param2: org.bson.io.BsonOutput, param3: org.bson.FieldNameValidator);
			public flush(): void;
			public mark(): void;
			public doWriteEndArray(): void;
			public doWriteNull(): void;
			public writeBinaryData(param0: org.bson.BsonBinary): void;
			public writeSymbol(param0: string): void;
			public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.BsonBinaryWriterSettings, param2: org.bson.io.BsonOutput);
			public doWriteBinaryData(param0: org.bson.BsonBinary): void;
			public writeDBPointer(param0: org.bson.BsonDbPointer): void;
			public doWriteMinKey(): void;
			public writeStartDocument(): void;
			public doWriteObjectId(param0: org.bson.types.ObjectId): void;
			public pushMaxDocumentSize(param0: number): void;
			public writeBoolean(param0: boolean): void;
			public doWriteBoolean(param0: boolean): void;
			public writeJavaScript(param0: string, param1: string): void;
			public writeUndefined(): void;
			public doWriteTimestamp(param0: org.bson.BsonTimestamp): void;
			public writeDecimal128(param0: org.bson.types.Decimal128): void;
			public pipe(param0: org.bson.BsonReader, param1: java.util.List<org.bson.BsonElement>): void;
			public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public writeInt64(param0: string, param1: number): void;
			public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.FieldNameValidator);
			public doWriteInt64(param0: number): void;
			public writeDateTime(param0: string, param1: number): void;
			public writeDateTime(param0: number): void;
			public pipe(param0: org.bson.BsonReader): void;
			public writeMinKey(): void;
			public getBsonOutput(): org.bson.io.BsonOutput;
			public writeMaxKey(param0: string): void;
			public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public writeObjectId(param0: org.bson.types.ObjectId): void;
			public doWriteString(param0: string): void;
			public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
			public getContext(): org.bson.BsonBinaryWriter.Context;
			public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
			public writeInt32(param0: number): void;
			public writeNull(param0: string): void;
			public writeString(param0: string): void;
			public popMaxDocumentSize(): void;
			public writeDouble(param0: string, param1: number): void;
			public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
			public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
			public doWriteDecimal128(param0: org.bson.types.Decimal128): void;
			public doWriteJavaScript(param0: string): void;
			public constructor(param0: org.bson.io.BsonOutput, param1: org.bson.FieldNameValidator);
			public reset(): void;
			public writeString(param0: string, param1: string): void;
			public doWriteStartDocument(): void;
			public close(): void;
			public writeMinKey(param0: string): void;
			public doWriteUndefined(): void;
			public writeStartArray(): void;
			public writeMaxKey(): void;
			public writeEndDocument(): void;
			public constructor(param0: org.bson.io.BsonOutput);
			public writeInt32(param0: string, param1: number): void;
			public doWriteJavaScriptWithScope(param0: string): void;
			public writeBoolean(param0: string, param1: boolean): void;
			public writeEndArray(): void;
			public doWriteEndDocument(): void;
			public writeDouble(param0: number): void;
			public doWriteInt32(param0: number): void;
			public getBinaryWriterSettings(): org.bson.BsonBinaryWriterSettings;
			public writeJavaScript(param0: string): void;
			public getContext(): org.bson.AbstractBsonWriter.Context;
			public writeUndefined(param0: string): void;
			public writeTimestamp(param0: org.bson.BsonTimestamp): void;
			public doWriteStartArray(): void;
		}
		export module BsonBinaryWriter {
			export class Context extends org.bson.AbstractBsonWriter.Context {
				public static class: java.lang.Class<org.bson.BsonBinaryWriter.Context>;
				public constructor(param0: org.bson.BsonBinaryWriter, param1: org.bson.BsonBinaryWriter.Context);
				public constructor(param0: org.bson.AbstractBsonWriter, param1: org.bson.AbstractBsonWriter.Context);
				public getParentContext(): org.bson.AbstractBsonWriter.Context;
				public constructor(param0: org.bson.AbstractBsonWriter, param1: org.bson.AbstractBsonWriter.Context, param2: org.bson.BsonContextType);
				public copy(): org.bson.BsonBinaryWriter.Context;
				public getParentContext(): org.bson.BsonBinaryWriter.Context;
				public constructor(param0: org.bson.BsonBinaryWriter, param1: org.bson.BsonBinaryWriter.Context, param2: org.bson.BsonContextType, param3: number);
				public copy(): org.bson.AbstractBsonWriter.Context;
			}
			export class Mark extends org.bson.AbstractBsonWriter.Mark {
				public static class: java.lang.Class<org.bson.BsonBinaryWriter.Mark>;
				public reset(): void;
				public constructor(param0: org.bson.AbstractBsonWriter);
				public constructor(param0: org.bson.BsonBinaryWriter);
			}
		}
	}
}

declare module org {
	export module bson {
		export class BsonBinaryWriterSettings {
			public static class: java.lang.Class<org.bson.BsonBinaryWriterSettings>;
			public getMaxDocumentSize(): number;
			public constructor(param0: number);
			public constructor();
		}
	}
}

declare module org {
	export module bson {
		export class BsonBoolean extends org.bson.BsonValue implements java.lang.Comparable<org.bson.BsonBoolean>  {
			public static class: java.lang.Class<org.bson.BsonBoolean>;
			public static TRUE: org.bson.BsonBoolean;
			public static FALSE: org.bson.BsonBoolean;
			public getValue(): boolean;
			public equals(param0: any): boolean;
			public constructor(param0: boolean);
			public toString(): string;
			public compareTo(param0: org.bson.BsonBoolean): number;
			public static valueOf(param0: boolean): org.bson.BsonBoolean;
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonContextType {
			public static class: java.lang.Class<org.bson.BsonContextType>;
			public static TOP_LEVEL: org.bson.BsonContextType;
			public static DOCUMENT: org.bson.BsonContextType;
			public static ARRAY: org.bson.BsonContextType;
			public static JAVASCRIPT_WITH_SCOPE: org.bson.BsonContextType;
			public static SCOPE_DOCUMENT: org.bson.BsonContextType;
			public static values(): native.Array<org.bson.BsonContextType>;
			public static valueOf(param0: string): org.bson.BsonContextType;
		}
	}
}

declare module org {
	export module bson {
		export class BsonDateTime extends org.bson.BsonValue implements java.lang.Comparable<org.bson.BsonDateTime>  {
			public static class: java.lang.Class<org.bson.BsonDateTime>;
			public getValue(): number;
			public equals(param0: any): boolean;
			public toString(): string;
			public constructor(param0: number);
			public compareTo(param0: org.bson.BsonDateTime): number;
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonDbPointer extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonDbPointer>;
			public constructor(param0: string, param1: org.bson.types.ObjectId);
			public equals(param0: any): boolean;
			public getNamespace(): string;
			public toString(): string;
			public getId(): org.bson.types.ObjectId;
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonDecimal128 extends org.bson.BsonNumber {
			public static class: java.lang.Class<org.bson.BsonDecimal128>;
			public getValue(): org.bson.types.Decimal128;
			public doubleValue(): number;
			public decimal128Value(): org.bson.types.Decimal128;
			public equals(param0: any): boolean;
			public intValue(): number;
			public toString(): string;
			public constructor();
			public constructor(param0: org.bson.types.Decimal128);
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
			public longValue(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonDocument extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonDocument>;
			public keySet(): java.util.Set<string>;
			public containsValue(param0: any): boolean;
			public getBoolean(param0: any): org.bson.BsonBoolean;
			public isArray(): boolean;
			public isString(): boolean;
			public getBoolean(param0: any, param1: org.bson.BsonBoolean): org.bson.BsonBoolean;
			public asBsonReader(): org.bson.BsonReader;
			public constructor(param0: java.util.List<org.bson.BsonElement>);
			public isNull(): boolean;
			public getArray(param0: any, param1: org.bson.BsonArray): org.bson.BsonArray;
			public append(param0: string, param1: org.bson.BsonValue): org.bson.BsonDocument;
			public isTimestamp(param0: any): boolean;
			public getNumber(param0: any): org.bson.BsonNumber;
			public isString(param0: any): boolean;
			public isBoolean(): boolean;
			public isDateTime(): boolean;
			public getDateTime(param0: any, param1: org.bson.BsonDateTime): org.bson.BsonDateTime;
			public get(param0: any): org.bson.BsonValue;
			public isDocument(): boolean;
			public putAll(param0: java.util.Map<any,any>): void;
			public getDocument(param0: any): org.bson.BsonDocument;
			public isNull(param0: any): boolean;
			public isDocument(param0: any): boolean;
			public isDateTime(param0: any): boolean;
			public isObjectId(): boolean;
			public isBinary(): boolean;
			public clear(): void;
			public getDouble(param0: any, param1: org.bson.BsonDouble): org.bson.BsonDouble;
			public isInt64(): boolean;
			public getInt64(param0: any, param1: org.bson.BsonInt64): org.bson.BsonInt64;
			public isNumber(): boolean;
			public constructor();
			public getString(param0: any): org.bson.BsonString;
			public getRegularExpression(param0: any): org.bson.BsonRegularExpression;
			public isTimestamp(): boolean;
			public isBoolean(param0: any): boolean;
			public put(param0: string, param1: org.bson.BsonValue): org.bson.BsonValue;
			public getInt32(param0: any, param1: org.bson.BsonInt32): org.bson.BsonInt32;
			public isObjectId(param0: any): boolean;
			public entrySet(): java.util.Set<java.util.Map.Entry<string,org.bson.BsonValue>>;
			public getDateTime(param0: any): org.bson.BsonDateTime;
			public containsKey(param0: any): boolean;
			public toJson(): string;
			public getBsonType(): org.bson.BsonType;
			public isInt32(): boolean;
			public equals(param0: any): boolean;
			public isDecimal128(param0: any): boolean;
			public getString(param0: any, param1: org.bson.BsonString): org.bson.BsonString;
			public getTimestamp(param0: any): org.bson.BsonTimestamp;
			public clone(): org.bson.BsonDocument;
			public getDouble(param0: any): org.bson.BsonDouble;
			public getDocument(param0: any, param1: org.bson.BsonDocument): org.bson.BsonDocument;
			public getBinary(param0: any): org.bson.BsonBinary;
			public getInt64(param0: any): org.bson.BsonInt64;
			public isNumber(param0: any): boolean;
			public getFirstKey(): string;
			public getRegularExpression(param0: any, param1: org.bson.BsonRegularExpression): org.bson.BsonRegularExpression;
			public isInt64(param0: any): boolean;
			public getArray(param0: any): org.bson.BsonArray;
			public isDouble(): boolean;
			public get(param0: any, param1: org.bson.BsonValue): org.bson.BsonValue;
			public constructor(param0: string, param1: org.bson.BsonValue);
			public remove(param0: any): org.bson.BsonValue;
			public isInt32(param0: any): boolean;
			public size(): number;
			public isEmpty(): boolean;
			public static parse(param0: string): org.bson.BsonDocument;
			public getObjectId(param0: any): org.bson.BsonObjectId;
			public getDecimal128(param0: any): org.bson.BsonDecimal128;
			public getBinary(param0: any, param1: org.bson.BsonBinary): org.bson.BsonBinary;
			public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			public isDouble(param0: any): boolean;
			public toString(): string;
			public getObjectId(param0: any, param1: org.bson.BsonObjectId): org.bson.BsonObjectId;
			public toJson(param0: org.bson.json.JsonWriterSettings): string;
			public isBinary(param0: any): boolean;
			public getNumber(param0: any, param1: org.bson.BsonNumber): org.bson.BsonNumber;
			public values(): java.util.Collection<org.bson.BsonValue>;
			public getInt32(param0: any): org.bson.BsonInt32;
			public getDecimal128(param0: any, param1: org.bson.BsonDecimal128): org.bson.BsonDecimal128;
			public getTimestamp(param0: any, param1: org.bson.BsonTimestamp): org.bson.BsonTimestamp;
			public isArray(param0: any): boolean;
			public isDecimal128(): boolean;
			public hashCode(): number;
		}
		export module BsonDocument {
			export class SerializationProxy {
				public static class: java.lang.Class<org.bson.BsonDocument.SerializationProxy>;
			}
		}
	}
}

declare module org {
	export module bson {
		export class BsonDocumentReader extends org.bson.AbstractBsonReader {
			public static class: java.lang.Class<org.bson.BsonDocumentReader>;
			public readDecimal128(param0: string): org.bson.types.Decimal128;
			public peekBinarySubType(): number;
			public readJavaScript(): string;
			public readInt64(): number;
			public readObjectId(): org.bson.types.ObjectId;
			public doSkipValue(): void;
			public readMinKey(param0: string): void;
			public readString(): string;
			public doReadSymbol(): string;
			public doReadEndDocument(): void;
			public doReadMinKey(): void;
			public readDateTime(param0: string): number;
			public doReadJavaScript(): string;
			public doReadString(): string;
			public readDBPointer(param0: string): org.bson.BsonDbPointer;
			public skipValue(): void;
			public doReadTimestamp(): org.bson.BsonTimestamp;
			public mark(): void;
			public readBinaryData(param0: string): org.bson.BsonBinary;
			public readSymbol(): string;
			public readMinKey(): void;
			public constructor();
			public doPeekBinarySubType(): number;
			public readEndArray(): void;
			public readMaxKey(param0: string): void;
			public doReadMaxKey(): void;
			public readBoolean(): boolean;
			public readTimestamp(): org.bson.BsonTimestamp;
			public doReadDBPointer(): org.bson.BsonDbPointer;
			public readStartDocument(): void;
			public doReadInt32(): number;
			public readEndDocument(): void;
			public getMark(): org.bson.BsonReaderMark;
			public doPeekBinarySize(): number;
			public readJavaScriptWithScope(): string;
			public readRegularExpression(): org.bson.BsonRegularExpression;
			public doReadBoolean(): boolean;
			public getCurrentBsonType(): org.bson.BsonType;
			public readRegularExpression(param0: string): org.bson.BsonRegularExpression;
			public doReadStartDocument(): void;
			public readBoolean(param0: string): boolean;
			public peekBinarySize(): number;
			public doReadUndefined(): void;
			public doSkipName(): void;
			public getContext(): org.bson.BsonDocumentReader.Context;
			public doReadDateTime(): number;
			public readJavaScript(param0: string): string;
			public readTimestamp(param0: string): org.bson.BsonTimestamp;
			public readUndefined(): void;
			public doReadBinaryData(): org.bson.BsonBinary;
			public readStartArray(): void;
			public readDouble(param0: string): number;
			public doReadEndArray(): void;
			public readDouble(): number;
			public readInt32(): number;
			public readInt64(param0: string): number;
			public reset(): void;
			public readJavaScriptWithScope(param0: string): string;
			public doReadDouble(): number;
			public readName(param0: string): void;
			public constructor(param0: org.bson.BsonDocument);
			public readBsonType(): org.bson.BsonType;
			public close(): void;
			public doReadObjectId(): org.bson.types.ObjectId;
			public doReadDecimal128(): org.bson.types.Decimal128;
			public doReadJavaScriptWithScope(): string;
			public readDateTime(): number;
			public readDBPointer(): org.bson.BsonDbPointer;
			public getCurrentName(): string;
			public readObjectId(param0: string): org.bson.types.ObjectId;
			public readDecimal128(): org.bson.types.Decimal128;
			public doReadInt64(): number;
			public readNull(param0: string): void;
			public doReadNull(): void;
			public doReadRegularExpression(): org.bson.BsonRegularExpression;
			public readNull(): void;
			public readBinaryData(): org.bson.BsonBinary;
			public doReadStartArray(): void;
			public skipName(): void;
			public readMaxKey(): void;
			public readName(): string;
			public readUndefined(param0: string): void;
			public readInt32(param0: string): number;
			public readSymbol(param0: string): string;
			public getContext(): org.bson.AbstractBsonReader.Context;
			public readString(param0: string): string;
		}
		export module BsonDocumentReader {
			export class BsonDocumentMarkableIterator<T>  extends java.util.Iterator<any> {
				public static class: java.lang.Class<org.bson.BsonDocumentReader.BsonDocumentMarkableIterator<any>>;
				public reset(): void;
				public remove(): void;
				public next(): any;
				public constructor(param0: java.util.Iterator<any>);
				public hasNext(): boolean;
				public mark(): void;
			}
			export class Context extends org.bson.AbstractBsonReader.Context {
				public static class: java.lang.Class<org.bson.BsonDocumentReader.Context>;
				public getNextElement(): java.util.Map.Entry<string,org.bson.BsonValue>;
				public reset(): void;
				public constructor(param0: org.bson.BsonDocumentReader, param1: org.bson.BsonDocumentReader.Context, param2: org.bson.BsonContextType, param3: org.bson.BsonArray);
				public constructor(param0: org.bson.BsonDocumentReader, param1: org.bson.BsonDocumentReader.Context, param2: org.bson.BsonContextType, param3: org.bson.BsonDocument);
				public constructor(param0: org.bson.AbstractBsonReader, param1: org.bson.AbstractBsonReader.Context, param2: org.bson.BsonContextType);
				public getNextValue(): org.bson.BsonValue;
				public mark(): void;
			}
			export class Mark extends org.bson.AbstractBsonReader.Mark {
				public static class: java.lang.Class<org.bson.BsonDocumentReader.Mark>;
				public reset(): void;
				public constructor(param0: org.bson.AbstractBsonReader);
				public constructor(param0: org.bson.BsonDocumentReader);
			}
		}
	}
}

declare module org {
	export module bson {
		export class BsonDocumentWrapper<T>  extends org.bson.BsonDocument {
			public static class: java.lang.Class<org.bson.BsonDocumentWrapper<any>>;
			public keySet(): java.util.Set<string>;
			public equals(param0: any): boolean;
			public static asBsonDocument(param0: any, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			public isUnwrapped(): boolean;
			public containsValue(param0: any): boolean;
			public clone(): org.bson.BsonDocument;
			public constructor(param0: java.util.List<org.bson.BsonElement>);
			public get(param0: any): org.bson.BsonValue;
			public putAll(param0: java.util.Map<any,any>): void;
			public getWrappedDocument(): any;
			public get(param0: any, param1: org.bson.BsonValue): org.bson.BsonValue;
			public constructor(param0: string, param1: org.bson.BsonValue);
			public remove(param0: any): org.bson.BsonValue;
			public clear(): void;
			public size(): number;
			public isEmpty(): boolean;
			public getEncoder(): org.bson.codecs.Encoder<any>;
			public constructor();
			public put(param0: string, param1: org.bson.BsonValue): org.bson.BsonValue;
			public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			public toString(): string;
			public constructor(param0: any, param1: org.bson.codecs.Encoder<any>);
			public entrySet(): java.util.Set<java.util.Map.Entry<string,org.bson.BsonValue>>;
			public containsKey(param0: any): boolean;
			public values(): java.util.Collection<org.bson.BsonValue>;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonDocumentWriter extends org.bson.AbstractBsonWriter {
			public static class: java.lang.Class<org.bson.BsonDocumentWriter>;
			public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDBPointer(param0: org.bson.BsonDbPointer): void;
			public writeJavaScriptWithScope(param0: string): void;
			public writeName(param0: string): void;
			public writeSymbol(param0: string, param1: string): void;
			public doWriteMaxKey(): void;
			public writeStartArray(param0: string): void;
			public doWriteDateTime(param0: number): void;
			public doWriteRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public doWriteDouble(param0: number): void;
			public writeInt64(param0: number): void;
			public constructor(param0: org.bson.BsonWriterSettings);
			public doWriteSymbol(param0: string): void;
			public writeStartDocument(param0: string): void;
			public writeJavaScriptWithScope(param0: string, param1: string): void;
			public writeNull(): void;
			public flush(): void;
			public doWriteEndArray(): void;
			public doWriteNull(): void;
			public writeBinaryData(param0: org.bson.BsonBinary): void;
			public writeSymbol(param0: string): void;
			public doWriteBinaryData(param0: org.bson.BsonBinary): void;
			public writeDBPointer(param0: org.bson.BsonDbPointer): void;
			public doWriteMinKey(): void;
			public writeStartDocument(): void;
			public doWriteObjectId(param0: org.bson.types.ObjectId): void;
			public getDocument(): org.bson.BsonDocument;
			public writeBoolean(param0: boolean): void;
			public doWriteBoolean(param0: boolean): void;
			public writeJavaScript(param0: string, param1: string): void;
			public writeUndefined(): void;
			public doWriteTimestamp(param0: org.bson.BsonTimestamp): void;
			public writeDecimal128(param0: org.bson.types.Decimal128): void;
			public pipe(param0: org.bson.BsonReader, param1: java.util.List<org.bson.BsonElement>): void;
			public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public writeInt64(param0: string, param1: number): void;
			public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.FieldNameValidator);
			public doWriteInt64(param0: number): void;
			public writeDateTime(param0: string, param1: number): void;
			public writeDateTime(param0: number): void;
			public writeMinKey(): void;
			public pipe(param0: org.bson.BsonReader): void;
			public writeMaxKey(param0: string): void;
			public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public writeObjectId(param0: org.bson.types.ObjectId): void;
			public doWriteString(param0: string): void;
			public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
			public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
			public writeInt32(param0: number): void;
			public writeNull(param0: string): void;
			public getContext(): org.bson.BsonDocumentWriter.Context;
			public writeString(param0: string): void;
			public writeDouble(param0: string, param1: number): void;
			public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
			public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
			public doWriteDecimal128(param0: org.bson.types.Decimal128): void;
			public doWriteJavaScript(param0: string): void;
			public writeString(param0: string, param1: string): void;
			public doWriteStartDocument(): void;
			public constructor(param0: org.bson.BsonDocument);
			public writeMinKey(param0: string): void;
			public doWriteUndefined(): void;
			public writeStartArray(): void;
			public writeMaxKey(): void;
			public writeEndDocument(): void;
			public writeInt32(param0: string, param1: number): void;
			public doWriteJavaScriptWithScope(param0: string): void;
			public writeBoolean(param0: string, param1: boolean): void;
			public writeEndArray(): void;
			public doWriteEndDocument(): void;
			public writeDouble(param0: number): void;
			public doWriteInt32(param0: number): void;
			public writeJavaScript(param0: string): void;
			public getContext(): org.bson.AbstractBsonWriter.Context;
			public writeUndefined(param0: string): void;
			public writeTimestamp(param0: org.bson.BsonTimestamp): void;
			public doWriteStartArray(): void;
		}
		export module BsonDocumentWriter {
			export class Context extends org.bson.AbstractBsonWriter.Context {
				public static class: java.lang.Class<org.bson.BsonDocumentWriter.Context>;
			}
		}
	}
}

declare module org {
	export module bson {
		export class BsonDouble extends org.bson.BsonNumber implements java.lang.Comparable<org.bson.BsonDouble>  {
			public static class: java.lang.Class<org.bson.BsonDouble>;
			public decimal128Value(): org.bson.types.Decimal128;
			public doubleValue(): number;
			public getValue(): number;
			public equals(param0: any): boolean;
			public intValue(): number;
			public toString(): string;
			public constructor(param0: number);
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public compareTo(param0: org.bson.BsonDouble): number;
			public longValue(): number;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonElement {
			public static class: java.lang.Class<org.bson.BsonElement>;
			public constructor(param0: string, param1: org.bson.BsonValue);
			public equals(param0: any): boolean;
			public getName(): string;
			public getValue(): org.bson.BsonValue;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonInt32 extends org.bson.BsonNumber implements java.lang.Comparable<org.bson.BsonInt32>  {
			public static class: java.lang.Class<org.bson.BsonInt32>;
			public decimal128Value(): org.bson.types.Decimal128;
			public doubleValue(): number;
			public getValue(): number;
			public equals(param0: any): boolean;
			public intValue(): number;
			public toString(): string;
			public compareTo(param0: org.bson.BsonInt32): number;
			public constructor(param0: number);
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public longValue(): number;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonInt64 extends org.bson.BsonNumber implements java.lang.Comparable<org.bson.BsonInt64>  {
			public static class: java.lang.Class<org.bson.BsonInt64>;
			public doubleValue(): number;
			public decimal128Value(): org.bson.types.Decimal128;
			public getValue(): number;
			public equals(param0: any): boolean;
			public intValue(): number;
			public compareTo(param0: org.bson.BsonInt64): number;
			public toString(): string;
			public constructor(param0: number);
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public longValue(): number;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonInvalidOperationException extends org.bson.BSONException {
			public static class: java.lang.Class<org.bson.BsonInvalidOperationException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module org {
	export module bson {
		export class BsonJavaScript extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonJavaScript>;
			public equals(param0: any): boolean;
			public getCode(): string;
			public toString(): string;
			public getBsonType(): org.bson.BsonType;
			public constructor(param0: string);
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonJavaScriptWithScope extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonJavaScriptWithScope>;
			public equals(param0: any): boolean;
			public getCode(): string;
			public toString(): string;
			public getBsonType(): org.bson.BsonType;
			public constructor(param0: string, param1: org.bson.BsonDocument);
			public getScope(): org.bson.BsonDocument;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonMaxKey extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonMaxKey>;
			public equals(param0: any): boolean;
			public toString(): string;
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonMaximumSizeExceededException extends org.bson.BsonSerializationException {
			public static class: java.lang.Class<org.bson.BsonMaximumSizeExceededException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module org {
	export module bson {
		export class BsonMinKey extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonMinKey>;
			public equals(param0: any): boolean;
			public toString(): string;
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonNull extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonNull>;
			public static VALUE: org.bson.BsonNull;
			public equals(param0: any): boolean;
			public toString(): string;
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export abstract class BsonNumber extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonNumber>;
			public doubleValue(): number;
			public decimal128Value(): org.bson.types.Decimal128;
			public intValue(): number;
			public constructor();
			public longValue(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonObjectId extends org.bson.BsonValue implements java.lang.Comparable<org.bson.BsonObjectId>  {
			public static class: java.lang.Class<org.bson.BsonObjectId>;
			public getValue(): org.bson.types.ObjectId;
			public equals(param0: any): boolean;
			public toString(): string;
			public constructor(param0: org.bson.types.ObjectId);
			public compareTo(param0: org.bson.BsonObjectId): number;
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonReader {
			public static class: java.lang.Class<org.bson.BsonReader>;
			/**
			 * Constructs a new instance of the org.bson.BsonReader interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				getCurrentBsonType(): org.bson.BsonType;
				getCurrentName(): string;
				readBinaryData(): org.bson.BsonBinary;
				peekBinarySubType(): number;
				peekBinarySize(): number;
				readBinaryData(param0: string): org.bson.BsonBinary;
				readBoolean(): boolean;
				readBoolean(param0: string): boolean;
				readBsonType(): org.bson.BsonType;
				readDateTime(): number;
				readDateTime(param0: string): number;
				readDouble(): number;
				readDouble(param0: string): number;
				readEndArray(): void;
				readEndDocument(): void;
				readInt32(): number;
				readInt32(param0: string): number;
				readInt64(): number;
				readInt64(param0: string): number;
				readDecimal128(): org.bson.types.Decimal128;
				readDecimal128(param0: string): org.bson.types.Decimal128;
				readJavaScript(): string;
				readJavaScript(param0: string): string;
				readJavaScriptWithScope(): string;
				readJavaScriptWithScope(param0: string): string;
				readMaxKey(): void;
				readMaxKey(param0: string): void;
				readMinKey(): void;
				readMinKey(param0: string): void;
				readName(): string;
				readName(param0: string): void;
				readNull(): void;
				readNull(param0: string): void;
				readObjectId(): org.bson.types.ObjectId;
				readObjectId(param0: string): org.bson.types.ObjectId;
				readRegularExpression(): org.bson.BsonRegularExpression;
				readRegularExpression(param0: string): org.bson.BsonRegularExpression;
				readDBPointer(): org.bson.BsonDbPointer;
				readDBPointer(param0: string): org.bson.BsonDbPointer;
				readStartArray(): void;
				readStartDocument(): void;
				readString(): string;
				readString(param0: string): string;
				readSymbol(): string;
				readSymbol(param0: string): string;
				readTimestamp(): org.bson.BsonTimestamp;
				readTimestamp(param0: string): org.bson.BsonTimestamp;
				readUndefined(): void;
				readUndefined(param0: string): void;
				skipName(): void;
				skipValue(): void;
				mark(): void;
				getMark(): org.bson.BsonReaderMark;
				reset(): void;
				close(): void;
			});
			public constructor();
			public readDecimal128(param0: string): org.bson.types.Decimal128;
			public peekBinarySubType(): number;
			public readJavaScript(): string;
			public readInt64(): number;
			public readObjectId(): org.bson.types.ObjectId;
			public readMinKey(param0: string): void;
			public readString(): string;
			public readDateTime(param0: string): number;
			public readDBPointer(param0: string): org.bson.BsonDbPointer;
			public skipValue(): void;
			public mark(): void;
			public readBinaryData(param0: string): org.bson.BsonBinary;
			public readSymbol(): string;
			public readMinKey(): void;
			public readEndArray(): void;
			public readMaxKey(param0: string): void;
			public readBoolean(): boolean;
			public readTimestamp(): org.bson.BsonTimestamp;
			public readStartDocument(): void;
			public readEndDocument(): void;
			public getMark(): org.bson.BsonReaderMark;
			public readJavaScriptWithScope(): string;
			public readRegularExpression(): org.bson.BsonRegularExpression;
			public getCurrentBsonType(): org.bson.BsonType;
			public readRegularExpression(param0: string): org.bson.BsonRegularExpression;
			public readBoolean(param0: string): boolean;
			public peekBinarySize(): number;
			public readJavaScript(param0: string): string;
			public readTimestamp(param0: string): org.bson.BsonTimestamp;
			public readUndefined(): void;
			public readStartArray(): void;
			public readDouble(param0: string): number;
			public readDouble(): number;
			public readInt32(): number;
			public readInt64(param0: string): number;
			public readJavaScriptWithScope(param0: string): string;
			public reset(): void;
			public readName(param0: string): void;
			public readBsonType(): org.bson.BsonType;
			public close(): void;
			public readDateTime(): number;
			public readDBPointer(): org.bson.BsonDbPointer;
			public getCurrentName(): string;
			public readObjectId(param0: string): org.bson.types.ObjectId;
			public readDecimal128(): org.bson.types.Decimal128;
			public readNull(param0: string): void;
			public readNull(): void;
			public readBinaryData(): org.bson.BsonBinary;
			public skipName(): void;
			public readMaxKey(): void;
			public readName(): string;
			public readUndefined(param0: string): void;
			public readInt32(param0: string): number;
			public readSymbol(param0: string): string;
			public readString(param0: string): string;
		}
	}
}

declare module org {
	export module bson {
		export class BsonReaderMark {
			public static class: java.lang.Class<org.bson.BsonReaderMark>;
			/**
			 * Constructs a new instance of the org.bson.BsonReaderMark interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				reset(): void;
			});
			public constructor();
			public reset(): void;
		}
	}
}

declare module org {
	export module bson {
		export class BsonRegularExpression extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonRegularExpression>;
			public constructor(param0: string, param1: string);
			public equals(param0: any): boolean;
			public toString(): string;
			public getBsonType(): org.bson.BsonType;
			public getPattern(): string;
			public constructor(param0: string);
			public getOptions(): string;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonSerializationException extends org.bson.BSONException {
			public static class: java.lang.Class<org.bson.BsonSerializationException>;
			public constructor(param0: string, param1: java.lang.Throwable);
			public constructor(param0: number, param1: string);
			public constructor(param0: string);
			public constructor(param0: number, param1: string, param2: java.lang.Throwable);
		}
	}
}

declare module org {
	export module bson {
		export class BsonString extends org.bson.BsonValue implements java.lang.Comparable<org.bson.BsonString>  {
			public static class: java.lang.Class<org.bson.BsonString>;
			public equals(param0: any): boolean;
			public toString(): string;
			public getBsonType(): org.bson.BsonType;
			public compareTo(param0: org.bson.BsonString): number;
			public getValue(): string;
			public constructor(param0: string);
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonSymbol extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonSymbol>;
			public equals(param0: any): boolean;
			public toString(): string;
			public getBsonType(): org.bson.BsonType;
			public getSymbol(): string;
			public constructor(param0: string);
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonTimestamp extends org.bson.BsonValue implements java.lang.Comparable<org.bson.BsonTimestamp>  {
			public static class: java.lang.Class<org.bson.BsonTimestamp>;
			public getValue(): number;
			public equals(param0: any): boolean;
			public toString(): string;
			public getTime(): number;
			public constructor(param0: number);
			public compareTo(param0: org.bson.BsonTimestamp): number;
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public constructor(param0: number, param1: number);
			public getInc(): number;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class BsonType {
			public static class: java.lang.Class<org.bson.BsonType>;
			public static END_OF_DOCUMENT: org.bson.BsonType;
			public static DOUBLE: org.bson.BsonType;
			public static STRING: org.bson.BsonType;
			public static DOCUMENT: org.bson.BsonType;
			public static ARRAY: org.bson.BsonType;
			public static BINARY: org.bson.BsonType;
			public static UNDEFINED: org.bson.BsonType;
			public static OBJECT_ID: org.bson.BsonType;
			public static BOOLEAN: org.bson.BsonType;
			public static DATE_TIME: org.bson.BsonType;
			public static NULL: org.bson.BsonType;
			public static REGULAR_EXPRESSION: org.bson.BsonType;
			public static DB_POINTER: org.bson.BsonType;
			public static JAVASCRIPT: org.bson.BsonType;
			public static SYMBOL: org.bson.BsonType;
			public static JAVASCRIPT_WITH_SCOPE: org.bson.BsonType;
			public static INT32: org.bson.BsonType;
			public static TIMESTAMP: org.bson.BsonType;
			public static INT64: org.bson.BsonType;
			public static DECIMAL128: org.bson.BsonType;
			public static MIN_KEY: org.bson.BsonType;
			public static MAX_KEY: org.bson.BsonType;
			public static values(): native.Array<org.bson.BsonType>;
			public getValue(): number;
			public static findByValue(param0: number): org.bson.BsonType;
			public isContainer(): boolean;
			public static valueOf(param0: string): org.bson.BsonType;
		}
	}
}

declare module org {
	export module bson {
		export class BsonUndefined extends org.bson.BsonValue {
			public static class: java.lang.Class<org.bson.BsonUndefined>;
			public equals(param0: any): boolean;
			public constructor();
			public getBsonType(): org.bson.BsonType;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export abstract class BsonValue {
			public static class: java.lang.Class<org.bson.BsonValue>;
			public isRegularExpression(): boolean;
			public asDBPointer(): org.bson.BsonDbPointer;
			public isArray(): boolean;
			public isString(): boolean;
			public asDecimal128(): org.bson.BsonDecimal128;
			public asBoolean(): org.bson.BsonBoolean;
			public isNull(): boolean;
			public asSymbol(): org.bson.BsonSymbol;
			public isBoolean(): boolean;
			public isDateTime(): boolean;
			public asJavaScriptWithScope(): org.bson.BsonJavaScriptWithScope;
			public isDocument(): boolean;
			public asInt64(): org.bson.BsonInt64;
			public asDouble(): org.bson.BsonDouble;
			public isObjectId(): boolean;
			public isDouble(): boolean;
			public isBinary(): boolean;
			public isSymbol(): boolean;
			public isInt64(): boolean;
			public asDocument(): org.bson.BsonDocument;
			public asArray(): org.bson.BsonArray;
			public isDBPointer(): boolean;
			public asJavaScript(): org.bson.BsonJavaScript;
			public asInt32(): org.bson.BsonInt32;
			public isNumber(): boolean;
			public asRegularExpression(): org.bson.BsonRegularExpression;
			public asBinary(): org.bson.BsonBinary;
			public asDateTime(): org.bson.BsonDateTime;
			public isJavaScriptWithScope(): boolean;
			public isTimestamp(): boolean;
			public isJavaScript(): boolean;
			public asObjectId(): org.bson.BsonObjectId;
			public asTimestamp(): org.bson.BsonTimestamp;
			public getBsonType(): org.bson.BsonType;
			public asString(): org.bson.BsonString;
			public asNumber(): org.bson.BsonNumber;
			public isInt32(): boolean;
			public isDecimal128(): boolean;
		}
	}
}

declare module org {
	export module bson {
		export class BsonWriter {
			public static class: java.lang.Class<org.bson.BsonWriter>;
			/**
			 * Constructs a new instance of the org.bson.BsonWriter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				flush(): void;
				writeBinaryData(param0: org.bson.BsonBinary): void;
				writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
				writeBoolean(param0: boolean): void;
				writeBoolean(param0: string, param1: boolean): void;
				writeDateTime(param0: number): void;
				writeDateTime(param0: string, param1: number): void;
				writeDBPointer(param0: org.bson.BsonDbPointer): void;
				writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
				writeDouble(param0: number): void;
				writeDouble(param0: string, param1: number): void;
				writeEndArray(): void;
				writeEndDocument(): void;
				writeInt32(param0: number): void;
				writeInt32(param0: string, param1: number): void;
				writeInt64(param0: number): void;
				writeInt64(param0: string, param1: number): void;
				writeDecimal128(param0: org.bson.types.Decimal128): void;
				writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
				writeJavaScript(param0: string): void;
				writeJavaScript(param0: string, param1: string): void;
				writeJavaScriptWithScope(param0: string): void;
				writeJavaScriptWithScope(param0: string, param1: string): void;
				writeMaxKey(): void;
				writeMaxKey(param0: string): void;
				writeMinKey(): void;
				writeMinKey(param0: string): void;
				writeName(param0: string): void;
				writeNull(): void;
				writeNull(param0: string): void;
				writeObjectId(param0: org.bson.types.ObjectId): void;
				writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
				writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
				writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
				writeStartArray(): void;
				writeStartArray(param0: string): void;
				writeStartDocument(): void;
				writeStartDocument(param0: string): void;
				writeString(param0: string): void;
				writeString(param0: string, param1: string): void;
				writeSymbol(param0: string): void;
				writeSymbol(param0: string, param1: string): void;
				writeTimestamp(param0: org.bson.BsonTimestamp): void;
				writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
				writeUndefined(): void;
				writeUndefined(param0: string): void;
				pipe(param0: org.bson.BsonReader): void;
			});
			public constructor();
			public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
			public writeJavaScriptWithScope(param0: string): void;
			public writeDateTime(param0: number): void;
			public writeDateTime(param0: string, param1: number): void;
			public writeName(param0: string): void;
			public writeSymbol(param0: string, param1: string): void;
			public writeMinKey(): void;
			public pipe(param0: org.bson.BsonReader): void;
			public writeStartArray(param0: string): void;
			public writeMaxKey(param0: string): void;
			public writeInt64(param0: number): void;
			public writeObjectId(param0: org.bson.types.ObjectId): void;
			public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
			public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
			public writeInt32(param0: number): void;
			public writeNull(param0: string): void;
			public writeString(param0: string): void;
			public writeDouble(param0: string, param1: number): void;
			public writeStartDocument(param0: string): void;
			public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
			public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
			public writeString(param0: string, param1: string): void;
			public writeJavaScriptWithScope(param0: string, param1: string): void;
			public writeMinKey(param0: string): void;
			public writeStartArray(): void;
			public writeNull(): void;
			public flush(): void;
			public writeMaxKey(): void;
			public writeEndDocument(): void;
			public writeBinaryData(param0: org.bson.BsonBinary): void;
			public writeSymbol(param0: string): void;
			public writeInt32(param0: string, param1: number): void;
			public writeBoolean(param0: string, param1: boolean): void;
			public writeEndArray(): void;
			public writeDouble(param0: number): void;
			public writeDBPointer(param0: org.bson.BsonDbPointer): void;
			public writeStartDocument(): void;
			public writeJavaScript(param0: string): void;
			public writeBoolean(param0: boolean): void;
			public writeJavaScript(param0: string, param1: string): void;
			public writeUndefined(): void;
			public writeDecimal128(param0: org.bson.types.Decimal128): void;
			public writeUndefined(param0: string): void;
			public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public writeInt64(param0: string, param1: number): void;
			public writeTimestamp(param0: org.bson.BsonTimestamp): void;
		}
	}
}

declare module org {
	export module bson {
		export class BsonWriterSettings {
			public static class: java.lang.Class<org.bson.BsonWriterSettings>;
			public getMaxSerializationDepth(): number;
			public constructor(param0: number);
			public constructor();
		}
	}
}

declare module org {
	export module bson {
		export class ByteBuf {
			public static class: java.lang.Class<org.bson.ByteBuf>;
			/**
			 * Constructs a new instance of the org.bson.ByteBuf interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				capacity(): number;
				put(param0: number, param1: number): org.bson.ByteBuf;
				remaining(): number;
				put(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
				hasRemaining(): boolean;
				put(param0: number): org.bson.ByteBuf;
				flip(): org.bson.ByteBuf;
				array(): native.Array<number>;
				limit(): number;
				position(param0: number): org.bson.ByteBuf;
				clear(): org.bson.ByteBuf;
				order(param0: java.nio.ByteOrder): org.bson.ByteBuf;
				get(): number;
				get(param0: number): number;
				get(param0: native.Array<number>): org.bson.ByteBuf;
				get(param0: number, param1: native.Array<number>): org.bson.ByteBuf;
				get(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
				get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bson.ByteBuf;
				getLong(): number;
				getLong(param0: number): number;
				getDouble(): number;
				getDouble(param0: number): number;
				getInt(): number;
				getInt(param0: number): number;
				position(): number;
				limit(param0: number): org.bson.ByteBuf;
				asReadOnly(): org.bson.ByteBuf;
				duplicate(): org.bson.ByteBuf;
				asNIO(): java.nio.ByteBuffer;
				getReferenceCount(): number;
				retain(): org.bson.ByteBuf;
				release(): void;
			});
			public constructor();
			public flip(): org.bson.ByteBuf;
			public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bson.ByteBuf;
			public asNIO(): java.nio.ByteBuffer;
			public put(param0: number, param1: number): org.bson.ByteBuf;
			public duplicate(): org.bson.ByteBuf;
			public limit(): number;
			public position(param0: number): org.bson.ByteBuf;
			public get(param0: number): number;
			public order(param0: java.nio.ByteOrder): org.bson.ByteBuf;
			public get(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
			public limit(param0: number): org.bson.ByteBuf;
			public release(): void;
			public put(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
			public getDouble(param0: number): number;
			public getInt(): number;
			public array(): native.Array<number>;
			public clear(): org.bson.ByteBuf;
			public getLong(): number;
			public getDouble(): number;
			public retain(): org.bson.ByteBuf;
			public hasRemaining(): boolean;
			public put(param0: number): org.bson.ByteBuf;
			public getReferenceCount(): number;
			public get(param0: number, param1: native.Array<number>): org.bson.ByteBuf;
			public asReadOnly(): org.bson.ByteBuf;
			public get(param0: native.Array<number>): org.bson.ByteBuf;
			public getLong(param0: number): number;
			public capacity(): number;
			public remaining(): number;
			public get(): number;
			public position(): number;
			public getInt(param0: number): number;
		}
	}
}

declare module org {
	export module bson {
		export class ByteBufNIO extends org.bson.ByteBuf {
			public static class: java.lang.Class<org.bson.ByteBufNIO>;
			public flip(): org.bson.ByteBuf;
			public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bson.ByteBuf;
			public asNIO(): java.nio.ByteBuffer;
			public put(param0: number, param1: number): org.bson.ByteBuf;
			public constructor(param0: java.nio.ByteBuffer);
			public duplicate(): org.bson.ByteBuf;
			public limit(): number;
			public position(param0: number): org.bson.ByteBuf;
			public get(param0: number): number;
			public order(param0: java.nio.ByteOrder): org.bson.ByteBuf;
			public get(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
			public release(): void;
			public limit(param0: number): org.bson.ByteBuf;
			public put(param0: native.Array<number>, param1: number, param2: number): org.bson.ByteBuf;
			public retain(): org.bson.ByteBufNIO;
			public getDouble(param0: number): number;
			public getInt(): number;
			public array(): native.Array<number>;
			public clear(): org.bson.ByteBuf;
			public getLong(): number;
			public getDouble(): number;
			public retain(): org.bson.ByteBuf;
			public hasRemaining(): boolean;
			public put(param0: number): org.bson.ByteBuf;
			public getReferenceCount(): number;
			public get(param0: number, param1: native.Array<number>): org.bson.ByteBuf;
			public asReadOnly(): org.bson.ByteBuf;
			public get(param0: native.Array<number>): org.bson.ByteBuf;
			public getLong(param0: number): number;
			public capacity(): number;
			public remaining(): number;
			public get(): number;
			public position(): number;
			public getInt(param0: number): number;
		}
	}
}

declare module org {
	export module bson {
		export class Document extends java.lang.Object {
			public static class: java.lang.Class<org.bson.Document>;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public equals(param0: any): boolean;
			public containsValue(param0: any): boolean;
			public append(param0: string, param1: any): org.bson.Document;
			public get(param0: any): any;
			public getList(param0: any, param1: java.lang.Class, param2: java.util.List): java.util.List;
			public getString(param0: any): string;
			public toJson(param0: org.bson.json.JsonWriterSettings, param1: org.bson.codecs.Encoder<org.bson.Document>): string;
			public get(param0: any, param1: any): any;
			public remove(param0: any): any;
			public getDouble(param0: any): java.lang.Double;
			public putAll(param0: java.util.Map<any,any>): void;
			public constructor(param0: string, param1: any);
			public getInteger(param0: any, param1: number): number;
			public getEmbedded(param0: java.util.List, param1: java.lang.Class): any;
			public values(): java.util.Collection<any>;
			public toJson(param0: org.bson.codecs.Encoder<org.bson.Document>): string;
			public getList(param0: any, param1: java.lang.Class): java.util.List;
			public getEmbedded(param0: java.util.List, param1: any): any;
			public clear(): void;
			public size(): number;
			public isEmpty(): boolean;
			public get(param0: any, param1: java.lang.Class): any;
			public getLong(param0: any): java.lang.Long;
			public getBoolean(param0: any): java.lang.Boolean;
			public entrySet(): java.util.Set<java.util.Map.Entry<string,any>>;
			public constructor();
			public getDate(param0: any): java.util.Date;
			public static parse(param0: string, param1: org.bson.codecs.Decoder<org.bson.Document>): org.bson.Document;
			public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			public getBoolean(param0: any, param1: boolean): boolean;
			public toString(): string;
			public static parse(param0: string): org.bson.Document;
			public getObjectId(param0: any): org.bson.types.ObjectId;
			public toJson(param0: org.bson.json.JsonWriterSettings): string;
			public constructor(param0: java.util.Map<string,any>);
			public containsKey(param0: any): boolean;
			public toJson(): string;
			public getInteger(param0: any): java.lang.Integer;
			public hashCode(): number;
		}
	}
}

declare module org {
	export module bson {
		export class EmptyBSONCallback extends org.bson.BSONCallback {
			public static class: java.lang.Class<org.bson.EmptyBSONCallback>;
			public arrayDone(): any;
			public arrayStart(param0: string): void;
			public get(): any;
			public objectStart(): void;
			public gotTimestamp(param0: string, param1: number, param2: number): void;
			public gotSymbol(param0: string, param1: string): void;
			public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public objectDone(): any;
			public arrayStart(): void;
			public gotMaxKey(param0: string): void;
			public reset(): void;
			public gotUndefined(param0: string): void;
			public gotMinKey(param0: string): void;
			public gotInt(param0: string, param1: number): void;
			public gotCode(param0: string, param1: string): void;
			public constructor();
			public objectStart(param0: string): void;
			public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
			public gotDouble(param0: string, param1: number): void;
			public gotString(param0: string, param1: string): void;
			public gotCodeWScope(param0: string, param1: string, param2: any): void;
			public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public gotBoolean(param0: string, param1: boolean): void;
			public gotBinaryArray(param0: string, param1: native.Array<number>): void;
			public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
			public gotUUID(param0: string, param1: number, param2: number): void;
			public gotNull(param0: string): void;
			public gotDate(param0: string, param1: number): void;
			public gotLong(param0: string, param1: number): void;
			public createBSONCallback(): org.bson.BSONCallback;
			public gotRegex(param0: string, param1: string, param2: string): void;
		}
	}
}

declare module org {
	export module bson {
		export class FieldNameValidator {
			public static class: java.lang.Class<org.bson.FieldNameValidator>;
			/**
			 * Constructs a new instance of the org.bson.FieldNameValidator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				validate(param0: string): boolean;
				getValidatorForField(param0: string): org.bson.FieldNameValidator;
			});
			public constructor();
			public validate(param0: string): boolean;
			public getValidatorForField(param0: string): org.bson.FieldNameValidator;
		}
	}
}

declare module org {
	export module bson {
		export class LazyBSONCallback extends org.bson.EmptyBSONCallback {
			public static class: java.lang.Class<org.bson.LazyBSONCallback>;
			public createArray(param0: native.Array<number>, param1: number): java.util.List;
			public arrayDone(): any;
			public arrayStart(param0: string): void;
			public get(): any;
			public objectStart(): void;
			public createDBRef(param0: string, param1: org.bson.types.ObjectId): any;
			public gotTimestamp(param0: string, param1: number, param2: number): void;
			public gotSymbol(param0: string, param1: string): void;
			public gotDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
			public objectDone(): any;
			public arrayStart(): void;
			public gotMaxKey(param0: string): void;
			public createObject(param0: native.Array<number>, param1: number): any;
			public reset(): void;
			public gotUndefined(param0: string): void;
			public gotMinKey(param0: string): void;
			public gotInt(param0: string, param1: number): void;
			public gotCode(param0: string, param1: string): void;
			public constructor();
			public objectStart(param0: string): void;
			public gotDBRef(param0: string, param1: string, param2: org.bson.types.ObjectId): void;
			public gotDouble(param0: string, param1: number): void;
			public gotString(param0: string, param1: string): void;
			public gotCodeWScope(param0: string, param1: string, param2: any): void;
			public gotObjectId(param0: string, param1: org.bson.types.ObjectId): void;
			public gotBoolean(param0: string, param1: boolean): void;
			public gotBinaryArray(param0: string, param1: native.Array<number>): void;
			public gotBinary(param0: string, param1: number, param2: native.Array<number>): void;
			public gotUUID(param0: string, param1: number, param2: number): void;
			public gotNull(param0: string): void;
			public gotDate(param0: string, param1: number): void;
			public gotLong(param0: string, param1: number): void;
			public createBSONCallback(): org.bson.BSONCallback;
			public gotRegex(param0: string, param1: string, param2: string): void;
		}
	}
}

declare module org {
	export module bson {
		export class LazyBSONDecoder extends org.bson.BSONDecoder {
			public static class: java.lang.Class<org.bson.LazyBSONDecoder>;
			public readObject(param0: java.io.InputStream): org.bson.BSONObject;
			public decode(param0: native.Array<number>, param1: org.bson.BSONCallback): number;
			public readObject(param0: native.Array<number>): org.bson.BSONObject;
			public constructor();
			public decode(param0: java.io.InputStream, param1: org.bson.BSONCallback): number;
		}
	}
}

declare module org {
	export module bson {
		export class LazyBSONList extends org.bson.LazyBSONObject {
			public static class: java.lang.Class<org.bson.LazyBSONList>;
			public keySet(): java.util.Set<string>;
			public put(param0: string, param1: any): any;
			public toArray(): native.Array<any>;
			public constructor(param0: native.Array<number>, param1: org.bson.LazyBSONCallback);
			public subList(param0: number, param1: number): java.util.List;
			public remove(param0: number): any;
			public listIterator(): java.util.ListIterator;
			public addAll(param0: java.util.Collection): boolean;
			public contains(param0: any): boolean;
			public constructor(param0: native.Array<number>, param1: number, param2: org.bson.LazyBSONCallback);
			public get(param0: number): any;
			public addAll(param0: number, param1: java.util.Collection): boolean;
			public add(param0: number, param1: any): void;
			public containsKey(param0: string): boolean;
			public clear(): void;
			public get(param0: string): any;
			public removeAll(param0: java.util.Collection): boolean;
			public toMap(): java.util.Map;
			public size(): number;
			public containsAll(param0: java.util.Collection): boolean;
			public toArray(param0: native.Array<any>): native.Array<any>;
			public containsField(param0: string): boolean;
			public set(param0: number, param1: any): any;
			public remove(param0: any): boolean;
			public removeField(param0: string): any;
			public lastIndexOf(param0: any): number;
			public listIterator(param0: number): java.util.ListIterator;
			public retainAll(param0: java.util.Collection): boolean;
			public add(param0: any): boolean;
			public indexOf(param0: any): number;
			public iterator(): java.util.Iterator;
			public putAll(param0: org.bson.BSONObject): void;
			public putAll(param0: java.util.Map): void;
		}
		export module LazyBSONList {
			export class LazyBSONListIterator {
				public static class: java.lang.Class<org.bson.LazyBSONList.LazyBSONListIterator>;
				public remove(): void;
				public next(): any;
				public hasNext(): boolean;
				public constructor(param0: org.bson.LazyBSONList);
			}
		}
	}
}

declare module org {
	export module bson {
		export class LazyBSONObject extends org.bson.BSONObject {
			public static class: java.lang.Class<org.bson.LazyBSONObject>;
			public keySet(): java.util.Set<string>;
			public equals(param0: any): boolean;
			public put(param0: string, param1: any): any;
			public get(param0: string): any;
			public constructor(param0: native.Array<number>, param1: org.bson.LazyBSONCallback);
			public toMap(): java.util.Map;
			public isEmpty(): boolean;
			public getBytes(): native.Array<number>;
			public pipe(param0: java.io.OutputStream): number;
			public getOffset(): number;
			public entrySet(): java.util.Set<java.util.Map.Entry<string,any>>;
			public containsField(param0: string): boolean;
			public removeField(param0: string): any;
			public getBSONSize(): number;
			public constructor(param0: native.Array<number>, param1: number, param2: org.bson.LazyBSONCallback);
			public containsKey(param0: string): boolean;
			public putAll(param0: org.bson.BSONObject): void;
			public hashCode(): number;
			public putAll(param0: java.util.Map): void;
		}
	}
}

declare module org {
	export module bson {
		export class NoOpFieldNameValidator extends org.bson.FieldNameValidator {
			public static class: java.lang.Class<org.bson.NoOpFieldNameValidator>;
			public validate(param0: string): boolean;
			public getValidatorForField(param0: string): org.bson.FieldNameValidator;
		}
	}
}

declare module org {
	export module bson {
		export class RawBsonArray extends org.bson.BsonArray {
			public static class: java.lang.Class<org.bson.RawBsonArray>;
			public addAll(param0: number, param1: java.util.Collection<any>): boolean;
			public clear(): void;
			public equals(param0: any): boolean;
			public add(param0: org.bson.BsonValue): boolean;
			public constructor();
			public constructor(param0: native.Array<number>);
			public add(param0: number, param1: org.bson.BsonValue): void;
			public constructor(param0: java.util.List<any>);
			public addAll(param0: java.util.Collection<any>): boolean;
			public retainAll(param0: java.util.Collection<any>): boolean;
			public remove(param0: any): boolean;
			public clone(): org.bson.BsonArray;
			public remove(param0: number): org.bson.BsonValue;
			public set(param0: number, param1: org.bson.BsonValue): org.bson.BsonValue;
			public removeAll(param0: java.util.Collection<any>): boolean;
			public constructor(param0: native.Array<number>, param1: number, param2: number);
			public hashCode(): number;
		}
		export module RawBsonArray {
			export class RawBsonArrayList extends java.util.AbstractList<org.bson.BsonValue> {
				public static class: java.lang.Class<org.bson.RawBsonArray.RawBsonArrayList>;
				public get(param0: number): org.bson.BsonValue;
				public listIterator(param0: number): java.util.ListIterator<org.bson.BsonValue>;
				public iterator(): java.util.Iterator<org.bson.BsonValue>;
				public listIterator(): java.util.ListIterator<org.bson.BsonValue>;
				public size(): number;
			}
			export module RawBsonArrayList {
				export class Itr extends java.util.Iterator<org.bson.BsonValue> {
					public static class: java.lang.Class<org.bson.RawBsonArray.RawBsonArrayList.Itr>;
					public setCursor(param0: number): void;
					public next(): org.bson.BsonValue;
					public getCursor(): number;
					public hasNext(): boolean;
					public remove(): void;
				}
				export class ListItr extends org.bson.RawBsonArray.RawBsonArrayList.Itr implements java.util.ListIterator<org.bson.BsonValue>  {
					public static class: java.lang.Class<org.bson.RawBsonArray.RawBsonArrayList.ListItr>;
					public previousIndex(): number;
					public previous(): org.bson.BsonValue;
					public nextIndex(): number;
					public hasPrevious(): boolean;
					public set(param0: org.bson.BsonValue): void;
					public add(param0: org.bson.BsonValue): void;
				}
			}
			export class SerializationProxy {
				public static class: java.lang.Class<org.bson.RawBsonArray.SerializationProxy>;
			}
		}
	}
}

declare module org {
	export module bson {
		export class RawBsonDocument extends org.bson.BsonDocument {
			public static class: java.lang.Class<org.bson.RawBsonDocument>;
			public keySet(): java.util.Set<string>;
			public equals(param0: any): boolean;
			public containsValue(param0: any): boolean;
			public clone(): org.bson.BsonDocument;
			public constructor(param0: java.util.List<org.bson.BsonElement>);
			public append(param0: string, param1: org.bson.BsonValue): org.bson.BsonDocument;
			public get(param0: any): org.bson.BsonValue;
			public getFirstKey(): string;
			public decode(param0: org.bson.codecs.Codec<any>): any;
			public putAll(param0: java.util.Map<any,any>): void;
			public constructor(param0: any, param1: org.bson.codecs.Codec<any>);
			public constructor(param0: native.Array<number>, param1: number, param2: number);
			public get(param0: any, param1: org.bson.BsonValue): org.bson.BsonValue;
			public constructor(param0: string, param1: org.bson.BsonValue);
			public clear(): void;
			public remove(param0: any): org.bson.BsonValue;
			public static parse(param0: string): org.bson.RawBsonDocument;
			public isEmpty(): boolean;
			public size(): number;
			public getByteBuffer(): org.bson.ByteBuf;
			public static parse(param0: string): org.bson.BsonDocument;
			public constructor();
			public constructor(param0: native.Array<number>);
			public put(param0: string, param1: org.bson.BsonValue): org.bson.BsonValue;
			public decode(param0: org.bson.codecs.Decoder<any>): any;
			public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			public entrySet(): java.util.Set<java.util.Map.Entry<string,org.bson.BsonValue>>;
			public toJson(param0: org.bson.json.JsonWriterSettings): string;
			public containsKey(param0: any): boolean;
			public values(): java.util.Collection<org.bson.BsonValue>;
			public toJson(): string;
			public hashCode(): number;
		}
		export module RawBsonDocument {
			export class SerializationProxy {
				public static class: java.lang.Class<org.bson.RawBsonDocument.SerializationProxy>;
			}
		}
	}
}

declare module org {
	export module bson {
		export class RawBsonValueHelper {
			public static class: java.lang.Class<org.bson.RawBsonValueHelper>;
		}
	}
}

declare module org {
	export module bson {
		export class StringUtils {
			public static class: java.lang.Class<org.bson.StringUtils>;
			public static join(param0: string, param1: java.util.Collection<any>): string;
		}
	}
}

declare module org {
	export module bson {
		export class Transformer {
			public static class: java.lang.Class<org.bson.Transformer>;
			/**
			 * Constructs a new instance of the org.bson.Transformer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
			 */
			public constructor(implementation: {
				transform(param0: any): any;
			});
			public constructor();
			public transform(param0: any): any;
		}
	}
}

declare module org {
	export module bson {
		export class UuidRepresentation {
			public static class: java.lang.Class<org.bson.UuidRepresentation>;
			public static STANDARD: org.bson.UuidRepresentation;
			public static C_SHARP_LEGACY: org.bson.UuidRepresentation;
			public static JAVA_LEGACY: org.bson.UuidRepresentation;
			public static PYTHON_LEGACY: org.bson.UuidRepresentation;
			public static valueOf(param0: string): org.bson.UuidRepresentation;
			public static values(): native.Array<org.bson.UuidRepresentation>;
		}
	}
}

declare module org {
	export module bson {
		export module assertions {
			export class Assertions {
				public static class: java.lang.Class<org.bson.assertions.Assertions>;
				public static isTrue(param0: string, param1: boolean): void;
				public static notNull(param0: string, param1: any): any;
				public static convertToType(param0: java.lang.Class, param1: any, param2: string): any;
				public static isTrueArgument(param0: string, param1: boolean): void;
				public static isTrueArgument(param0: string, param1: any, param2: boolean): any;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class AtomicBooleanCodec extends org.bson.codecs.Codec<java.util.concurrent.atomic.AtomicBoolean> {
				public static class: java.lang.Class<org.bson.codecs.AtomicBooleanCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.util.concurrent.atomic.AtomicBoolean, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.concurrent.atomic.AtomicBoolean;
				public getEncoderClass(): java.lang.Class<java.util.concurrent.atomic.AtomicBoolean>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class AtomicIntegerCodec extends org.bson.codecs.Codec<java.util.concurrent.atomic.AtomicInteger> {
				public static class: java.lang.Class<org.bson.codecs.AtomicIntegerCodec>;
				public getEncoderClass(): java.lang.Class<java.util.concurrent.atomic.AtomicInteger>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.concurrent.atomic.AtomicInteger;
				public encode(param0: org.bson.BsonWriter, param1: java.util.concurrent.atomic.AtomicInteger, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class AtomicLongCodec extends org.bson.codecs.Codec<java.util.concurrent.atomic.AtomicLong> {
				public static class: java.lang.Class<org.bson.codecs.AtomicLongCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.concurrent.atomic.AtomicLong;
				public getEncoderClass(): java.lang.Class<java.util.concurrent.atomic.AtomicLong>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: java.util.concurrent.atomic.AtomicLong, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BigDecimalCodec extends org.bson.codecs.Codec<java.math.BigDecimal> {
				public static class: java.lang.Class<org.bson.codecs.BigDecimalCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.math.BigDecimal, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.math.BigDecimal;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public getEncoderClass(): java.lang.Class<java.math.BigDecimal>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BinaryCodec extends org.bson.codecs.Codec<org.bson.types.Binary> {
				public static class: java.lang.Class<org.bson.codecs.BinaryCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.Binary;
				public getEncoderClass(): java.lang.Class<org.bson.types.Binary>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.Binary, param2: org.bson.codecs.EncoderContext): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BooleanCodec extends org.bson.codecs.Codec<java.lang.Boolean> {
				public static class: java.lang.Class<org.bson.codecs.BooleanCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Boolean, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<java.lang.Boolean>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Boolean;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonArrayCodec extends org.bson.codecs.Codec<org.bson.BsonArray> {
				public static class: java.lang.Class<org.bson.codecs.BsonArrayCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonArray;
				public readValue(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonValue;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonArray, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonArray>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonBinaryCodec extends org.bson.codecs.Codec<org.bson.BsonBinary> {
				public static class: java.lang.Class<org.bson.codecs.BsonBinaryCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonBinary;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public getEncoderClass(): java.lang.Class<org.bson.BsonBinary>;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonBinary, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonBooleanCodec extends org.bson.codecs.Codec<org.bson.BsonBoolean> {
				public static class: java.lang.Class<org.bson.codecs.BsonBooleanCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonBoolean;
				public getEncoderClass(): java.lang.Class<org.bson.BsonBoolean>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonBoolean, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonDBPointerCodec extends org.bson.codecs.Codec<org.bson.BsonDbPointer> {
				public static class: java.lang.Class<org.bson.codecs.BsonDBPointerCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonDbPointer;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonDbPointer, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
				public getEncoderClass(): java.lang.Class<org.bson.BsonDbPointer>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonDateTimeCodec extends org.bson.codecs.Codec<org.bson.BsonDateTime> {
				public static class: java.lang.Class<org.bson.codecs.BsonDateTimeCodec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonDateTime, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonDateTime>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonDateTime;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonDecimal128Codec extends org.bson.codecs.Codec<org.bson.BsonDecimal128> {
				public static class: java.lang.Class<org.bson.codecs.BsonDecimal128Codec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonDecimal128, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonDecimal128>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonDecimal128;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonDocumentCodec extends org.bson.codecs.CollectibleCodec<org.bson.BsonDocument> {
				public static class: java.lang.Class<org.bson.codecs.BsonDocumentCodec>;
				public generateIdIfAbsentFromDocument(param0: any): any;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
				public getDocumentId(param0: org.bson.BsonDocument): org.bson.BsonValue;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonDocument;
				public documentHasId(param0: any): boolean;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public generateIdIfAbsentFromDocument(param0: org.bson.BsonDocument): org.bson.BsonDocument;
				public constructor();
				public getDocumentId(param0: any): org.bson.BsonValue;
				public readValue(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonValue;
				public getEncoderClass(): java.lang.Class<org.bson.BsonDocument>;
				public documentHasId(param0: org.bson.BsonDocument): boolean;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonDocument, param2: org.bson.codecs.EncoderContext): void;
				public getCodecRegistry(): org.bson.codecs.configuration.CodecRegistry;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonDocumentWrapperCodec extends org.bson.codecs.Codec<org.bson.BsonDocumentWrapper<any>> {
				public static class: java.lang.Class<org.bson.codecs.BsonDocumentWrapperCodec>;
				public constructor(param0: org.bson.codecs.Codec<org.bson.BsonDocument>);
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonDocumentWrapper<any>, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonDocumentWrapper<any>>;
				public getEncoderClass(): java.lang.Class<any>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonDocumentWrapper<any>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonDoubleCodec extends org.bson.codecs.Codec<org.bson.BsonDouble> {
				public static class: java.lang.Class<org.bson.codecs.BsonDoubleCodec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonDouble, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonDouble>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonDouble;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonInt32Codec extends org.bson.codecs.Codec<org.bson.BsonInt32> {
				public static class: java.lang.Class<org.bson.codecs.BsonInt32Codec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonInt32;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public getEncoderClass(): java.lang.Class<org.bson.BsonInt32>;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonInt32, param2: org.bson.codecs.EncoderContext): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonInt64Codec extends org.bson.codecs.Codec<org.bson.BsonInt64> {
				public static class: java.lang.Class<org.bson.codecs.BsonInt64Codec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonInt64;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonInt64>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonInt64, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonJavaScriptCodec extends org.bson.codecs.Codec<org.bson.BsonJavaScript> {
				public static class: java.lang.Class<org.bson.codecs.BsonJavaScriptCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonJavaScript;
				public getEncoderClass(): java.lang.Class<org.bson.BsonJavaScript>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonJavaScript, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonJavaScriptWithScopeCodec extends org.bson.codecs.Codec<org.bson.BsonJavaScriptWithScope> {
				public static class: java.lang.Class<org.bson.codecs.BsonJavaScriptWithScopeCodec>;
				public constructor(param0: org.bson.codecs.Codec<org.bson.BsonDocument>);
				public getEncoderClass(): java.lang.Class<org.bson.BsonJavaScriptWithScope>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonJavaScriptWithScope;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonJavaScriptWithScope, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonMaxKeyCodec extends org.bson.codecs.Codec<org.bson.BsonMaxKey> {
				public static class: java.lang.Class<org.bson.codecs.BsonMaxKeyCodec>;
				public getEncoderClass(): java.lang.Class<org.bson.BsonMaxKey>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonMaxKey, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonMaxKey;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonMinKeyCodec extends org.bson.codecs.Codec<org.bson.BsonMinKey> {
				public static class: java.lang.Class<org.bson.codecs.BsonMinKeyCodec>;
				public getEncoderClass(): java.lang.Class<org.bson.BsonMinKey>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonMinKey, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonMinKey;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonNullCodec extends org.bson.codecs.Codec<org.bson.BsonNull> {
				public static class: java.lang.Class<org.bson.codecs.BsonNullCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonNull;
				public getEncoderClass(): java.lang.Class<org.bson.BsonNull>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonNull, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonObjectIdCodec extends org.bson.codecs.Codec<org.bson.BsonObjectId> {
				public static class: java.lang.Class<org.bson.codecs.BsonObjectIdCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonObjectId;
				public getEncoderClass(): java.lang.Class<org.bson.BsonObjectId>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonObjectId, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonRegularExpressionCodec extends org.bson.codecs.Codec<org.bson.BsonRegularExpression> {
				public static class: java.lang.Class<org.bson.codecs.BsonRegularExpressionCodec>;
				public getEncoderClass(): java.lang.Class<org.bson.BsonRegularExpression>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonRegularExpression;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonRegularExpression, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonStringCodec extends org.bson.codecs.Codec<org.bson.BsonString> {
				public static class: java.lang.Class<org.bson.codecs.BsonStringCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonString;
				public getEncoderClass(): java.lang.Class<org.bson.BsonString>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonString, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonSymbolCodec extends org.bson.codecs.Codec<org.bson.BsonSymbol> {
				public static class: java.lang.Class<org.bson.codecs.BsonSymbolCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonSymbol;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonSymbol>;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonSymbol, param2: org.bson.codecs.EncoderContext): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonTimestampCodec extends org.bson.codecs.Codec<org.bson.BsonTimestamp> {
				public static class: java.lang.Class<org.bson.codecs.BsonTimestampCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonTimestamp;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonTimestamp, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public getEncoderClass(): java.lang.Class<org.bson.BsonTimestamp>;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonTypeClassMap {
				public static class: java.lang.Class<org.bson.codecs.BsonTypeClassMap>;
				public constructor(param0: java.util.Map<org.bson.BsonType,java.lang.Class<any>>);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public get(param0: org.bson.BsonType): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonTypeCodecMap {
				public static class: java.lang.Class<org.bson.codecs.BsonTypeCodecMap>;
				public constructor(param0: org.bson.codecs.BsonTypeClassMap, param1: org.bson.codecs.configuration.CodecRegistry);
				public get(param0: org.bson.BsonType): org.bson.codecs.Codec<any>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonUndefinedCodec extends org.bson.codecs.Codec<org.bson.BsonUndefined> {
				public static class: java.lang.Class<org.bson.codecs.BsonUndefinedCodec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonUndefined, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.BsonUndefined>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonUndefined;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonValueCodec extends org.bson.codecs.Codec<org.bson.BsonValue> {
				public static class: java.lang.Class<org.bson.codecs.BsonValueCodec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.BsonValue, param2: org.bson.codecs.EncoderContext): void;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.BsonValue;
				public getEncoderClass(): java.lang.Class<any>;
				public getEncoderClass(): java.lang.Class<org.bson.BsonValue>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class BsonValueCodecProvider extends org.bson.codecs.configuration.CodecProvider {
				public static class: java.lang.Class<org.bson.codecs.BsonValueCodecProvider>;
				public static getBsonTypeClassMap(): org.bson.codecs.BsonTypeClassMap;
				public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				public static getClassForBsonType(param0: org.bson.BsonType): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class ByteArrayCodec extends org.bson.codecs.Codec<native.Array<number>> {
				public static class: java.lang.Class<org.bson.codecs.ByteArrayCodec>;
				public getEncoderClass(): java.lang.Class<native.Array<number>>;
				public encode(param0: org.bson.BsonWriter, param1: native.Array<number>, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): native.Array<number>;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class ByteCodec extends org.bson.codecs.Codec<java.lang.Byte> {
				public static class: java.lang.Class<org.bson.codecs.ByteCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Byte, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Byte;
				public getEncoderClass(): java.lang.Class<any>;
				public getEncoderClass(): java.lang.Class<java.lang.Byte>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class CharacterCodec extends org.bson.codecs.Codec<java.lang.Character> {
				public static class: java.lang.Class<org.bson.codecs.CharacterCodec>;
				public getEncoderClass(): java.lang.Class<java.lang.Character>;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Character, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Character;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class CodeCodec extends org.bson.codecs.Codec<org.bson.types.Code> {
				public static class: java.lang.Class<org.bson.codecs.CodeCodec>;
				public getEncoderClass(): java.lang.Class<org.bson.types.Code>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.Code, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.Code;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class CodeWithScopeCodec extends org.bson.codecs.Codec<org.bson.types.CodeWithScope> {
				public static class: java.lang.Class<org.bson.codecs.CodeWithScopeCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.CodeWithScope;
				public getEncoderClass(): java.lang.Class<org.bson.types.CodeWithScope>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public constructor(param0: org.bson.codecs.Codec<org.bson.Document>);
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.CodeWithScope, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class Codec<T>  extends java.lang.Object {
				public static class: java.lang.Class<org.bson.codecs.Codec<any>>;
				/**
				 * Constructs a new instance of the org.bson.codecs.Codec<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					encode(param0: org.bson.BsonWriter, param1: T, param2: org.bson.codecs.EncoderContext): void;
					getEncoderClass(): java.lang.Class<T>;
					decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): T;
				});
				public constructor();
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): T;
				public encode(param0: org.bson.BsonWriter, param1: T, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<T>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class CollectibleCodec<T>  extends org.bson.codecs.Codec<any> {
				public static class: java.lang.Class<org.bson.codecs.CollectibleCodec<any>>;
				/**
				 * Constructs a new instance of the org.bson.codecs.CollectibleCodec<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					generateIdIfAbsentFromDocument(param0: any): any;
					documentHasId(param0: any): boolean;
					getDocumentId(param0: any): org.bson.BsonValue;
					encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					getEncoderClass(): java.lang.Class<any>;
					decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				});
				public constructor();
				public getDocumentId(param0: any): org.bson.BsonValue;
				public generateIdIfAbsentFromDocument(param0: any): any;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public documentHasId(param0: any): boolean;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class DateCodec extends org.bson.codecs.Codec<java.util.Date> {
				public static class: java.lang.Class<org.bson.codecs.DateCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.Date;
				public getEncoderClass(): java.lang.Class<java.util.Date>;
				public encode(param0: org.bson.BsonWriter, param1: java.util.Date, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class Decimal128Codec extends org.bson.codecs.Codec<org.bson.types.Decimal128> {
				public static class: java.lang.Class<org.bson.codecs.Decimal128Codec>;
				public getEncoderClass(): java.lang.Class<org.bson.types.Decimal128>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.Decimal128;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.Decimal128, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class Decoder<T>  extends java.lang.Object {
				public static class: java.lang.Class<org.bson.codecs.Decoder<any>>;
				/**
				 * Constructs a new instance of the org.bson.codecs.Decoder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): T;
				});
				public constructor();
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): T;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class DecoderContext {
				public static class: java.lang.Class<org.bson.codecs.DecoderContext>;
				public static builder(): org.bson.codecs.DecoderContext.Builder;
				public decodeWithChildContext(param0: org.bson.codecs.Decoder<any>, param1: org.bson.BsonReader): any;
				public hasCheckedDiscriminator(): boolean;
			}
			export module DecoderContext {
				export class Builder {
					public static class: java.lang.Class<org.bson.codecs.DecoderContext.Builder>;
					public build(): org.bson.codecs.DecoderContext;
					public checkedDiscriminator(param0: boolean): org.bson.codecs.DecoderContext.Builder;
					public hasCheckedDiscriminator(): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class DocumentCodec extends org.bson.codecs.CollectibleCodec<org.bson.Document> {
				public static class: java.lang.Class<org.bson.codecs.DocumentCodec>;
				public generateIdIfAbsentFromDocument(param0: any): any;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
				public encode(param0: org.bson.BsonWriter, param1: org.bson.Document, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.Document;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap, param2: org.bson.Transformer);
				public documentHasId(param0: any): boolean;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public generateIdIfAbsentFromDocument(param0: org.bson.Document): org.bson.Document;
				public constructor();
				public getDocumentId(param0: org.bson.Document): org.bson.BsonValue;
				public getDocumentId(param0: any): org.bson.BsonValue;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap);
				public documentHasId(param0: org.bson.Document): boolean;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public getEncoderClass(): java.lang.Class<org.bson.Document>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class DocumentCodecProvider extends org.bson.codecs.configuration.CodecProvider {
				public static class: java.lang.Class<org.bson.codecs.DocumentCodecProvider>;
				public constructor(param0: org.bson.Transformer);
				public constructor(param0: org.bson.codecs.BsonTypeClassMap, param1: org.bson.Transformer);
				public constructor(param0: org.bson.codecs.BsonTypeClassMap);
				public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class DoubleCodec extends org.bson.codecs.Codec<java.lang.Double> {
				public static class: java.lang.Class<org.bson.codecs.DoubleCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Double;
				public getEncoderClass(): java.lang.Class<java.lang.Double>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Double, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class Encoder<T>  extends java.lang.Object {
				public static class: java.lang.Class<org.bson.codecs.Encoder<any>>;
				/**
				 * Constructs a new instance of the org.bson.codecs.Encoder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					encode(param0: org.bson.BsonWriter, param1: T, param2: org.bson.codecs.EncoderContext): void;
					getEncoderClass(): java.lang.Class<T>;
				});
				public constructor();
				public encode(param0: org.bson.BsonWriter, param1: T, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<T>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class EncoderContext {
				public static class: java.lang.Class<org.bson.codecs.EncoderContext>;
				public encodeWithChildContext(param0: org.bson.codecs.Encoder<any>, param1: org.bson.BsonWriter, param2: any): void;
				public static builder(): org.bson.codecs.EncoderContext.Builder;
				public isEncodingCollectibleDocument(): boolean;
				public getChildContext(): org.bson.codecs.EncoderContext;
			}
			export module EncoderContext {
				export class Builder {
					public static class: java.lang.Class<org.bson.codecs.EncoderContext.Builder>;
					public build(): org.bson.codecs.EncoderContext;
					public isEncodingCollectibleDocument(param0: boolean): org.bson.codecs.EncoderContext.Builder;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class FloatCodec extends org.bson.codecs.Codec<java.lang.Float> {
				public static class: java.lang.Class<org.bson.codecs.FloatCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Float, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Float;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public getEncoderClass(): java.lang.Class<java.lang.Float>;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class IdGenerator {
				public static class: java.lang.Class<org.bson.codecs.IdGenerator>;
				/**
				 * Constructs a new instance of the org.bson.codecs.IdGenerator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					generate(): any;
				});
				public constructor();
				public generate(): any;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class IntegerCodec extends org.bson.codecs.Codec<java.lang.Integer> {
				public static class: java.lang.Class<org.bson.codecs.IntegerCodec>;
				public getEncoderClass(): java.lang.Class<java.lang.Integer>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Integer;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Integer, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class IterableCodec extends org.bson.codecs.Codec<java.lang.Iterable> {
				public static class: java.lang.Class<org.bson.codecs.IterableCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Iterable, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Iterable;
				public getEncoderClass(): java.lang.Class<java.lang.Iterable>;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap);
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap, param2: org.bson.Transformer);
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class IterableCodecProvider extends org.bson.codecs.configuration.CodecProvider {
				public static class: java.lang.Class<org.bson.codecs.IterableCodecProvider>;
				public constructor(param0: org.bson.Transformer);
				public constructor(param0: org.bson.codecs.BsonTypeClassMap, param1: org.bson.Transformer);
				public constructor(param0: org.bson.codecs.BsonTypeClassMap);
				public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class LongCodec extends org.bson.codecs.Codec<java.lang.Long> {
				public static class: java.lang.Class<org.bson.codecs.LongCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Long, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Long;
				public getEncoderClass(): java.lang.Class<java.lang.Long>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class MapCodec extends org.bson.codecs.Codec<java.util.Map<string,any>> {
				public static class: java.lang.Class<org.bson.codecs.MapCodec>;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry);
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.Map<string,any>;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap);
				public getEncoderClass(): java.lang.Class<java.util.Map<string,any>>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public constructor(param0: org.bson.codecs.configuration.CodecRegistry, param1: org.bson.codecs.BsonTypeClassMap, param2: org.bson.Transformer);
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public encode(param0: org.bson.BsonWriter, param1: java.util.Map<string,any>, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class MapCodecProvider extends org.bson.codecs.configuration.CodecProvider {
				public static class: java.lang.Class<org.bson.codecs.MapCodecProvider>;
				public constructor(param0: org.bson.Transformer);
				public constructor(param0: org.bson.codecs.BsonTypeClassMap, param1: org.bson.Transformer);
				public constructor(param0: org.bson.codecs.BsonTypeClassMap);
				public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class MaxKeyCodec extends org.bson.codecs.Codec<org.bson.types.MaxKey> {
				public static class: java.lang.Class<org.bson.codecs.MaxKeyCodec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.MaxKey, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.types.MaxKey>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.MaxKey;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class MinKeyCodec extends org.bson.codecs.Codec<org.bson.types.MinKey> {
				public static class: java.lang.Class<org.bson.codecs.MinKeyCodec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.MinKey, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.MinKey;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.types.MinKey>;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class NumberCodecHelper {
				public static class: java.lang.Class<org.bson.codecs.NumberCodecHelper>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class ObjectIdCodec extends org.bson.codecs.Codec<org.bson.types.ObjectId> {
				public static class: java.lang.Class<org.bson.codecs.ObjectIdCodec>;
				public getEncoderClass(): java.lang.Class<org.bson.types.ObjectId>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.ObjectId, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.ObjectId;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class ObjectIdGenerator extends org.bson.codecs.IdGenerator {
				public static class: java.lang.Class<org.bson.codecs.ObjectIdGenerator>;
				public generate(): any;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class PatternCodec extends org.bson.codecs.Codec<java.util.regex.Pattern> {
				public static class: java.lang.Class<org.bson.codecs.PatternCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.regex.Pattern;
				public encode(param0: org.bson.BsonWriter, param1: java.util.regex.Pattern, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public getEncoderClass(): java.lang.Class<java.util.regex.Pattern>;
				public constructor();
			}
			export module PatternCodec {
				export class RegexFlag {
					public static class: java.lang.Class<org.bson.codecs.PatternCodec.RegexFlag>;
					public static CANON_EQ: org.bson.codecs.PatternCodec.RegexFlag;
					public static UNIX_LINES: org.bson.codecs.PatternCodec.RegexFlag;
					public static GLOBAL: org.bson.codecs.PatternCodec.RegexFlag;
					public static CASE_INSENSITIVE: org.bson.codecs.PatternCodec.RegexFlag;
					public static MULTILINE: org.bson.codecs.PatternCodec.RegexFlag;
					public static DOTALL: org.bson.codecs.PatternCodec.RegexFlag;
					public static LITERAL: org.bson.codecs.PatternCodec.RegexFlag;
					public static UNICODE_CASE: org.bson.codecs.PatternCodec.RegexFlag;
					public static COMMENTS: org.bson.codecs.PatternCodec.RegexFlag;
					public static values(): native.Array<org.bson.codecs.PatternCodec.RegexFlag>;
					public static valueOf(param0: string): org.bson.codecs.PatternCodec.RegexFlag;
					public static getByCharacter(param0: string): org.bson.codecs.PatternCodec.RegexFlag;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class RawBsonDocumentCodec extends org.bson.codecs.Codec<org.bson.RawBsonDocument> {
				public static class: java.lang.Class<org.bson.codecs.RawBsonDocumentCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.RawBsonDocument;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.RawBsonDocument>;
				public getEncoderClass(): java.lang.Class<any>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.RawBsonDocument, param2: org.bson.codecs.EncoderContext): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class ShortCodec extends org.bson.codecs.Codec<java.lang.Short> {
				public static class: java.lang.Class<org.bson.codecs.ShortCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.lang.Short, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.lang.Short;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public getEncoderClass(): java.lang.Class<java.lang.Short>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class StringCodec extends org.bson.codecs.Codec<string> {
				public static class: java.lang.Class<org.bson.codecs.StringCodec>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): string;
				public encode(param0: org.bson.BsonWriter, param1: string, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<string>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class SymbolCodec extends org.bson.codecs.Codec<org.bson.types.Symbol> {
				public static class: java.lang.Class<org.bson.codecs.SymbolCodec>;
				public encode(param0: org.bson.BsonWriter, param1: org.bson.types.Symbol, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<org.bson.types.Symbol>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): org.bson.types.Symbol;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class UuidCodec extends org.bson.codecs.Codec<java.util.UUID> {
				public static class: java.lang.Class<org.bson.codecs.UuidCodec>;
				public encode(param0: org.bson.BsonWriter, param1: java.util.UUID, param2: org.bson.codecs.EncoderContext): void;
				public constructor(param0: org.bson.UuidRepresentation);
				public getEncoderClass(): java.lang.Class<java.util.UUID>;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.UUID;
				public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
				public getEncoderClass(): java.lang.Class<any>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class UuidCodecHelper {
				public static class: java.lang.Class<org.bson.codecs.UuidCodecHelper>;
				public static reverseByteArray(param0: native.Array<number>, param1: number, param2: number): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class UuidCodecProvider extends org.bson.codecs.configuration.CodecProvider {
				public static class: java.lang.Class<org.bson.codecs.UuidCodecProvider>;
				public constructor(param0: org.bson.UuidRepresentation);
				public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export class ValueCodecProvider extends org.bson.codecs.configuration.CodecProvider {
				public static class: java.lang.Class<org.bson.codecs.ValueCodecProvider>;
				public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class ChildCodecRegistry<T>  extends org.bson.codecs.configuration.CodecRegistry {
					public static class: java.lang.Class<org.bson.codecs.configuration.ChildCodecRegistry<any>>;
					public equals(param0: any): boolean;
					public getCodecClass(): java.lang.Class<any>;
					public get(param0: java.lang.Class): org.bson.codecs.Codec<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class CodecCache {
					public static class: java.lang.Class<org.bson.codecs.configuration.CodecCache>;
					public containsKey(param0: java.lang.Class<any>): boolean;
					public getOrThrow(param0: java.lang.Class): org.bson.codecs.Codec<any>;
					public put(param0: java.lang.Class<any>, param1: org.bson.codecs.Codec<any>): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class CodecConfigurationException {
					public static class: java.lang.Class<org.bson.codecs.configuration.CodecConfigurationException>;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class CodecProvider {
					public static class: java.lang.Class<org.bson.codecs.configuration.CodecProvider>;
					/**
					 * Constructs a new instance of the org.bson.codecs.configuration.CodecProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
					});
					public constructor();
					public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class CodecRegistries {
					public static class: java.lang.Class<org.bson.codecs.configuration.CodecRegistries>;
					public static fromRegistries(param0: java.util.List<any>): org.bson.codecs.configuration.CodecRegistry;
					public static fromCodecs(param0: native.Array<org.bson.codecs.Codec<any>>): org.bson.codecs.configuration.CodecRegistry;
					public static fromCodecs(param0: java.util.List<any>): org.bson.codecs.configuration.CodecRegistry;
					public static fromProviders(param0: java.util.List<any>): org.bson.codecs.configuration.CodecRegistry;
					public static fromRegistries(param0: native.Array<org.bson.codecs.configuration.CodecRegistry>): org.bson.codecs.configuration.CodecRegistry;
					public static fromProviders(param0: native.Array<org.bson.codecs.configuration.CodecProvider>): org.bson.codecs.configuration.CodecRegistry;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class CodecRegistry {
					public static class: java.lang.Class<org.bson.codecs.configuration.CodecRegistry>;
					/**
					 * Constructs a new instance of the org.bson.codecs.configuration.CodecRegistry interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(param0: java.lang.Class): org.bson.codecs.Codec<any>;
					});
					public constructor();
					public get(param0: java.lang.Class): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class LazyCodec<T>  extends org.bson.codecs.Codec<any> {
					public static class: java.lang.Class<org.bson.codecs.configuration.LazyCodec<any>>;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public getEncoderClass(): java.lang.Class<any>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class MapOfCodecsProvider extends org.bson.codecs.configuration.CodecProvider {
					public static class: java.lang.Class<org.bson.codecs.configuration.MapOfCodecsProvider>;
					public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export abstract class Optional<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.configuration.Optional<any>>;
					public toString(): string;
					public isEmpty(): boolean;
					public static of(param0: any): org.bson.codecs.configuration.Optional<any>;
					public isDefined(): boolean;
					public static empty(): org.bson.codecs.configuration.Optional<any>;
					public get(): T;
				}
				export module Optional {
					export class Some<T>  extends org.bson.codecs.configuration.Optional<any> {
						public static class: java.lang.Class<org.bson.codecs.configuration.Optional.Some<any>>;
						public isEmpty(): boolean;
						public get(): any;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module configuration {
				export class ProvidersCodecRegistry implements org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.configuration.CodecProvider {
					public static class: java.lang.Class<org.bson.codecs.configuration.ProvidersCodecRegistry>;
					public equals(param0: any): boolean;
					public get(param0: java.lang.Class): org.bson.codecs.Codec<any>;
					public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module jsr310 {
				export abstract class DateTimeBasedCodec<T>  extends org.bson.codecs.Codec<any> {
					public static class: java.lang.Class<org.bson.codecs.jsr310.DateTimeBasedCodec<any>>;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public getEncoderClass(): java.lang.Class<any>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module jsr310 {
				export class InstantCodec extends org.bson.codecs.jsr310.DateTimeBasedCodec<java.time.Instant> {
					public static class: java.lang.Class<org.bson.codecs.jsr310.InstantCodec>;
					public getEncoderClass(): java.lang.Class<java.time.Instant>;
					public encode(param0: org.bson.BsonWriter, param1: java.time.Instant, param2: org.bson.codecs.EncoderContext): void;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.time.Instant;
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module jsr310 {
				export class Jsr310CodecProvider extends org.bson.codecs.configuration.CodecProvider {
					public static class: java.lang.Class<org.bson.codecs.jsr310.Jsr310CodecProvider>;
					public constructor();
					public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module jsr310 {
				export class LocalDateCodec extends org.bson.codecs.jsr310.DateTimeBasedCodec<java.time.LocalDate> {
					public static class: java.lang.Class<org.bson.codecs.jsr310.LocalDateCodec>;
					public constructor();
					public getEncoderClass(): java.lang.Class<java.time.LocalDate>;
					public encode(param0: org.bson.BsonWriter, param1: java.time.LocalDate, param2: org.bson.codecs.EncoderContext): void;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.time.LocalDate;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module jsr310 {
				export class LocalDateTimeCodec extends org.bson.codecs.jsr310.DateTimeBasedCodec<java.time.LocalDateTime> {
					public static class: java.lang.Class<org.bson.codecs.jsr310.LocalDateTimeCodec>;
					public constructor();
					public getEncoderClass(): java.lang.Class<java.time.LocalDateTime>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.time.LocalDateTime;
					public encode(param0: org.bson.BsonWriter, param1: java.time.LocalDateTime, param2: org.bson.codecs.EncoderContext): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module jsr310 {
				export class LocalTimeCodec extends org.bson.codecs.jsr310.DateTimeBasedCodec<java.time.LocalTime> {
					public static class: java.lang.Class<org.bson.codecs.jsr310.LocalTimeCodec>;
					public constructor();
					public encode(param0: org.bson.BsonWriter, param1: java.time.LocalTime, param2: org.bson.codecs.EncoderContext): void;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.time.LocalTime;
					public getEncoderClass(): java.lang.Class<java.time.LocalTime>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class AutomaticPojoCodec<T>  extends org.bson.codecs.pojo.PojoCodec<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.AutomaticPojoCodec<any>>;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public getEncoderClass(): java.lang.Class<any>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class ClassModel<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.ClassModel<any>>;
					public static builder(param0: java.lang.Class): org.bson.codecs.pojo.ClassModelBuilder<any>;
					public getType(): java.lang.Class<T>;
					public getPropertyModel(param0: string): org.bson.codecs.pojo.PropertyModel<any>;
					public getDiscriminator(): string;
					public getPropertyModels(): java.util.List<org.bson.codecs.pojo.PropertyModel<any>>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getName(): string;
					public getIdPropertyModel(): org.bson.codecs.pojo.PropertyModel<any>;
					public hashCode(): number;
					public hasTypeParameters(): boolean;
					public getDiscriminatorKey(): string;
					public useDiscriminator(): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class ClassModelBuilder<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.ClassModelBuilder<any>>;
					public getInstanceCreatorFactory(): org.bson.codecs.pojo.InstanceCreatorFactory<T>;
					public type(param0: java.lang.Class<T>): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public conventions(param0: java.util.List<org.bson.codecs.pojo.Convention>): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public enableDiscriminator(param0: boolean): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public instanceCreatorFactory(param0: org.bson.codecs.pojo.InstanceCreatorFactory<T>): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public getProperty(param0: string): org.bson.codecs.pojo.PropertyModelBuilder<any>;
					public getType(): java.lang.Class<T>;
					public useDiscriminator(): java.lang.Boolean;
					public getDiscriminator(): string;
					public annotations(param0: java.util.List<java.lang.annotation.Annotation>): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public getAnnotations(): java.util.List<java.lang.annotation.Annotation>;
					public toString(): string;
					public removeProperty(param0: string): boolean;
					public getConventions(): java.util.List<org.bson.codecs.pojo.Convention>;
					public idPropertyName(param0: string): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public idGenerator(param0: org.bson.codecs.pojo.IdGenerator<any>): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public getIdGenerator(): org.bson.codecs.pojo.IdGenerator<any>;
					public discriminator(param0: string): org.bson.codecs.pojo.ClassModelBuilder<T>;
					public getIdPropertyName(): string;
					public getDiscriminatorKey(): string;
					public build(): org.bson.codecs.pojo.ClassModel<T>;
					public getPropertyModelBuilders(): java.util.List<org.bson.codecs.pojo.PropertyModelBuilder<any>>;
					public discriminatorKey(param0: string): org.bson.codecs.pojo.ClassModelBuilder<T>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class CollectionPropertyCodecProvider extends org.bson.codecs.pojo.PropertyCodecProvider {
					public static class: java.lang.Class<org.bson.codecs.pojo.CollectionPropertyCodecProvider>;
					public get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>, param1: org.bson.codecs.pojo.PropertyCodecRegistry): org.bson.codecs.Codec<any>;
				}
				export module CollectionPropertyCodecProvider {
					export class CollectionCodec<T>  extends org.bson.codecs.Codec<java.util.Collection<any>> {
						public static class: java.lang.Class<org.bson.codecs.pojo.CollectionPropertyCodecProvider.CollectionCodec<any>>;
						public getEncoderClass(): java.lang.Class<java.util.Collection<any>>;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
						public encode(param0: org.bson.BsonWriter, param1: java.util.Collection<any>, param2: org.bson.codecs.EncoderContext): void;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.Collection<any>;
						public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
						public getEncoderClass(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class Convention {
					public static class: java.lang.Class<org.bson.codecs.pojo.Convention>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.Convention interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						apply(param0: org.bson.codecs.pojo.ClassModelBuilder<any>): void;
					});
					public constructor();
					public apply(param0: org.bson.codecs.pojo.ClassModelBuilder<any>): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class ConventionAnnotationImpl extends org.bson.codecs.pojo.Convention {
					public static class: java.lang.Class<org.bson.codecs.pojo.ConventionAnnotationImpl>;
					public apply(param0: org.bson.codecs.pojo.ClassModelBuilder<any>): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class ConventionDefaultsImpl extends org.bson.codecs.pojo.Convention {
					public static class: java.lang.Class<org.bson.codecs.pojo.ConventionDefaultsImpl>;
					public apply(param0: org.bson.codecs.pojo.ClassModelBuilder<any>): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class ConventionObjectIdGeneratorsImpl extends org.bson.codecs.pojo.Convention {
					public static class: java.lang.Class<org.bson.codecs.pojo.ConventionObjectIdGeneratorsImpl>;
					public apply(param0: org.bson.codecs.pojo.ClassModelBuilder<any>): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class ConventionSetPrivateFieldImpl extends org.bson.codecs.pojo.Convention {
					public static class: java.lang.Class<org.bson.codecs.pojo.ConventionSetPrivateFieldImpl>;
					public apply(param0: org.bson.codecs.pojo.ClassModelBuilder<any>): void;
				}
				export module ConventionSetPrivateFieldImpl {
					export class PrivatePropertyAccessor<T>  extends org.bson.codecs.pojo.PropertyAccessor<any> {
						public static class: java.lang.Class<org.bson.codecs.pojo.ConventionSetPrivateFieldImpl.PrivatePropertyAccessor<any>>;
						public set(param0: any, param1: any): void;
						public get(param0: any): any;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class ConventionUseGettersAsSettersImpl extends org.bson.codecs.pojo.Convention {
					public static class: java.lang.Class<org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl>;
					public apply(param0: org.bson.codecs.pojo.ClassModelBuilder<any>): void;
				}
				export module ConventionUseGettersAsSettersImpl {
					export class PrivatePropertyAccessor<T>  extends org.bson.codecs.pojo.PropertyAccessor<any> {
						public static class: java.lang.Class<org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl.PrivatePropertyAccessor<any>>;
						public set(param0: any, param1: any): void;
						public get(param0: any): any;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class Conventions {
					public static class: java.lang.Class<org.bson.codecs.pojo.Conventions>;
					public static CLASS_AND_PROPERTY_CONVENTION: org.bson.codecs.pojo.Convention;
					public static ANNOTATION_CONVENTION: org.bson.codecs.pojo.Convention;
					public static SET_PRIVATE_FIELDS_CONVENTION: org.bson.codecs.pojo.Convention;
					public static USE_GETTERS_FOR_SETTERS: org.bson.codecs.pojo.Convention;
					public static OBJECT_ID_GENERATORS: org.bson.codecs.pojo.Convention;
					public static DEFAULT_CONVENTIONS: java.util.List<org.bson.codecs.pojo.Convention>;
					public static NO_CONVENTIONS: java.util.List<org.bson.codecs.pojo.Convention>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class CreatorExecutable<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.CreatorExecutable<any>>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class DiscriminatorLookup {
					public static class: java.lang.Class<org.bson.codecs.pojo.DiscriminatorLookup>;
					public lookup(param0: string): java.lang.Class<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class EnumPropertyCodecProvider extends org.bson.codecs.pojo.PropertyCodecProvider {
					public static class: java.lang.Class<org.bson.codecs.pojo.EnumPropertyCodecProvider>;
					public get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>, param1: org.bson.codecs.pojo.PropertyCodecRegistry): org.bson.codecs.Codec<any>;
				}
				export module EnumPropertyCodecProvider {
					export class EnumCodec<T>  extends org.bson.codecs.Codec<any> {
						public static class: java.lang.Class<org.bson.codecs.pojo.EnumPropertyCodecProvider.EnumCodec<any>>;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
						public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
						public getEncoderClass(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class FallbackPropertyCodecProvider extends org.bson.codecs.pojo.PropertyCodecProvider {
					public static class: java.lang.Class<org.bson.codecs.pojo.FallbackPropertyCodecProvider>;
					public get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>, param1: org.bson.codecs.pojo.PropertyCodecRegistry): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class IdGenerator<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.IdGenerator<any>>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.IdGenerator<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						generate(): T;
						getType(): java.lang.Class<T>;
					});
					public constructor();
					public getType(): java.lang.Class<T>;
					public generate(): T;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class IdGenerators {
					public static class: java.lang.Class<org.bson.codecs.pojo.IdGenerators>;
					public static OBJECT_ID_GENERATOR: org.bson.codecs.pojo.IdGenerator<org.bson.types.ObjectId>;
					public static BSON_OBJECT_ID_GENERATOR: org.bson.codecs.pojo.IdGenerator<org.bson.BsonObjectId>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class IdPropertyModelHolder<I>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.IdPropertyModelHolder<any>>;
					public equals(param0: any): boolean;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class InstanceCreator<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.InstanceCreator<any>>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.InstanceCreator<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						set(param0: any, param1: org.bson.codecs.pojo.PropertyModel<any>): void;
						getInstance(): T;
					});
					public constructor();
					public getInstance(): T;
					public set(param0: any, param1: org.bson.codecs.pojo.PropertyModel<any>): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class InstanceCreatorFactory<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.InstanceCreatorFactory<any>>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.InstanceCreatorFactory<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(): org.bson.codecs.pojo.InstanceCreator<T>;
					});
					public constructor();
					public create(): org.bson.codecs.pojo.InstanceCreator<T>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class InstanceCreatorFactoryImpl<T>  extends org.bson.codecs.pojo.InstanceCreatorFactory<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.InstanceCreatorFactoryImpl<any>>;
					public create(): org.bson.codecs.pojo.InstanceCreator<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class InstanceCreatorImpl<T>  extends org.bson.codecs.pojo.InstanceCreator<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.InstanceCreatorImpl<any>>;
					public getInstance(): any;
					public set(param0: any, param1: org.bson.codecs.pojo.PropertyModel<any>): void;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class LazyMissingCodec<S>  extends org.bson.codecs.Codec<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.LazyMissingCodec<any>>;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public getEncoderClass(): java.lang.Class<any>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class LazyPojoCodec<T>  extends org.bson.codecs.pojo.PojoCodec<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.LazyPojoCodec<any>>;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public getEncoderClass(): java.lang.Class<any>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class MapPropertyCodecProvider extends org.bson.codecs.pojo.PropertyCodecProvider {
					public static class: java.lang.Class<org.bson.codecs.pojo.MapPropertyCodecProvider>;
					public get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>, param1: org.bson.codecs.pojo.PropertyCodecRegistry): org.bson.codecs.Codec<any>;
				}
				export module MapPropertyCodecProvider {
					export class MapCodec<T>  extends org.bson.codecs.Codec<java.util.Map<string,any>> {
						public static class: java.lang.Class<org.bson.codecs.pojo.MapPropertyCodecProvider.MapCodec<any>>;
						public getEncoderClass(): java.lang.Class<java.util.Map<string,any>>;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
						public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): java.util.Map<string,any>;
						public encode(param0: org.bson.BsonWriter, param1: java.util.Map<string,any>, param2: org.bson.codecs.EncoderContext): void;
						public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
						public getEncoderClass(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PojoBuilderHelper {
					public static class: java.lang.Class<org.bson.codecs.pojo.PojoBuilderHelper>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export abstract class PojoCodec<T>  extends org.bson.codecs.Codec<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.PojoCodec<any>>;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public getEncoderClass(): java.lang.Class<any>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PojoCodecImpl<T>  extends org.bson.codecs.pojo.PojoCodec<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.PojoCodecImpl<any>>;
					public encode(param0: org.bson.BsonWriter, param1: any, param2: org.bson.codecs.EncoderContext): void;
					public toString(): string;
					public getEncoderClass(): java.lang.Class<any>;
					public decode(param0: org.bson.BsonReader, param1: org.bson.codecs.DecoderContext): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PojoCodecProvider extends org.bson.codecs.configuration.CodecProvider {
					public static class: java.lang.Class<org.bson.codecs.pojo.PojoCodecProvider>;
					public static builder(): org.bson.codecs.pojo.PojoCodecProvider.Builder;
					public get(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec<any>;
				}
				export module PojoCodecProvider {
					export class Builder {
						public static class: java.lang.Class<org.bson.codecs.pojo.PojoCodecProvider.Builder>;
						public register(param0: native.Array<java.lang.Class<any>>): org.bson.codecs.pojo.PojoCodecProvider.Builder;
						public register(param0: native.Array<string>): org.bson.codecs.pojo.PojoCodecProvider.Builder;
						public build(): org.bson.codecs.pojo.PojoCodecProvider;
						public conventions(param0: java.util.List<org.bson.codecs.pojo.Convention>): org.bson.codecs.pojo.PojoCodecProvider.Builder;
						public register(param0: native.Array<org.bson.codecs.pojo.PropertyCodecProvider>): org.bson.codecs.pojo.PojoCodecProvider.Builder;
						public automatic(param0: boolean): org.bson.codecs.pojo.PojoCodecProvider.Builder;
						public register(param0: native.Array<org.bson.codecs.pojo.ClassModel<any>>): org.bson.codecs.pojo.PojoCodecProvider.Builder;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyAccessor<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyAccessor<any>>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.PropertyAccessor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(param0: any): any;
						set(param0: any, param1: any): void;
					});
					public constructor();
					public set(param0: any, param1: any): void;
					public get(param0: any): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyAccessorImpl<T>  extends org.bson.codecs.pojo.PropertyAccessor<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyAccessorImpl<any>>;
					public set(param0: any, param1: any): void;
					public get(param0: any): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyCodecProvider {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyCodecProvider>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.PropertyCodecProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>, param1: org.bson.codecs.pojo.PropertyCodecRegistry): org.bson.codecs.Codec<any>;
					});
					public constructor();
					public get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>, param1: org.bson.codecs.pojo.PropertyCodecRegistry): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyCodecRegistry {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyCodecRegistry>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.PropertyCodecRegistry interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>): org.bson.codecs.Codec<any>;
					});
					public constructor();
					public get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyCodecRegistryImpl extends org.bson.codecs.pojo.PropertyCodecRegistry {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyCodecRegistryImpl>;
					public get(param0: org.bson.codecs.pojo.TypeWithTypeParameters<any>): org.bson.codecs.Codec<any>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyMetadata<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyMetadata<any>>;
					public getGetter(): java.lang.reflect.Method;
					public setGetter(param0: java.lang.reflect.Method): void;
					public typeParameterInfo(param0: org.bson.codecs.pojo.TypeParameterMap, param1: org.bson.codecs.pojo.TypeData<any>): org.bson.codecs.pojo.PropertyMetadata<any>;
					public field(param0: java.lang.reflect.Field): org.bson.codecs.pojo.PropertyMetadata<T>;
					public getSetter(): java.lang.reflect.Method;
					public getTypeParameterMap(): org.bson.codecs.pojo.TypeParameterMap;
					public addReadAnnotation(param0: java.lang.annotation.Annotation): org.bson.codecs.pojo.PropertyMetadata<T>;
					public getWriteAnnotations(): java.util.List<java.lang.annotation.Annotation>;
					public isSerializable(): boolean;
					public setSetter(param0: java.lang.reflect.Method): void;
					public getName(): string;
					public getReadAnnotations(): java.util.List<java.lang.annotation.Annotation>;
					public addWriteAnnotation(param0: java.lang.annotation.Annotation): org.bson.codecs.pojo.PropertyMetadata<T>;
					public isDeserializable(): boolean;
					public getField(): java.lang.reflect.Field;
					public getTypeData(): org.bson.codecs.pojo.TypeData<T>;
					public getTypeParameters(): java.util.List<org.bson.codecs.pojo.TypeData<any>>;
					public getDeclaringClassName(): string;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyModel<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyModel<any>>;
					public getPropertyAccessor(): org.bson.codecs.pojo.PropertyAccessor<T>;
					public isReadable(): boolean;
					public static builder(): org.bson.codecs.pojo.PropertyModelBuilder<any>;
					public useDiscriminator(): java.lang.Boolean;
					public getCodec(): org.bson.codecs.Codec<T>;
					public equals(param0: any): boolean;
					public toString(): string;
					public isWritable(): boolean;
					public getName(): string;
					public shouldSerialize(param0: T): boolean;
					public getReadName(): string;
					public getTypeData(): org.bson.codecs.pojo.TypeData<T>;
					public getWriteName(): string;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyModelBuilder<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyModelBuilder<any>>;
					public getPropertyAccessor(): org.bson.codecs.pojo.PropertyAccessor<T>;
					public getPropertySerialization(): org.bson.codecs.pojo.PropertySerialization<T>;
					public isReadable(): boolean;
					public propertySerialization(param0: org.bson.codecs.pojo.PropertySerialization<T>): org.bson.codecs.pojo.PropertyModelBuilder<T>;
					public writeAnnotations(param0: java.util.List<java.lang.annotation.Annotation>): org.bson.codecs.pojo.PropertyModelBuilder<T>;
					public readName(param0: string): org.bson.codecs.pojo.PropertyModelBuilder<T>;
					public isDiscriminatorEnabled(): java.lang.Boolean;
					public getWriteAnnotations(): java.util.List<java.lang.annotation.Annotation>;
					public build(): org.bson.codecs.pojo.PropertyModel<T>;
					public toString(): string;
					public isWritable(): boolean;
					public getName(): string;
					public propertyAccessor(param0: org.bson.codecs.pojo.PropertyAccessor<T>): org.bson.codecs.pojo.PropertyModelBuilder<T>;
					public getReadAnnotations(): java.util.List<java.lang.annotation.Annotation>;
					public readAnnotations(param0: java.util.List<java.lang.annotation.Annotation>): org.bson.codecs.pojo.PropertyModelBuilder<T>;
					public getReadName(): string;
					public getWriteName(): string;
					public codec(param0: org.bson.codecs.Codec<T>): org.bson.codecs.pojo.PropertyModelBuilder<T>;
					public discriminatorEnabled(param0: boolean): org.bson.codecs.pojo.PropertyModelBuilder<T>;
					public writeName(param0: string): org.bson.codecs.pojo.PropertyModelBuilder<T>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyModelSerializationImpl<T>  extends org.bson.codecs.pojo.PropertySerialization<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyModelSerializationImpl<any>>;
					public shouldSerialize(param0: any): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertyReflectionUtils {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertyReflectionUtils>;
				}
				export module PropertyReflectionUtils {
					export class PropertyMethods {
						public static class: java.lang.Class<org.bson.codecs.pojo.PropertyReflectionUtils.PropertyMethods>;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class PropertySerialization<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.PropertySerialization<any>>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.PropertySerialization<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						shouldSerialize(param0: T): boolean;
					});
					public constructor();
					public shouldSerialize(param0: T): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class TypeData<T>  extends org.bson.codecs.pojo.TypeWithTypeParameters<any> {
					public static class: java.lang.Class<org.bson.codecs.pojo.TypeData<any>>;
					public equals(param0: any): boolean;
					public toString(): string;
					public getTypeParameters(): java.util.List<any>;
					public static builder(param0: java.lang.Class): org.bson.codecs.pojo.TypeData.Builder<any>;
					public static newInstance(param0: java.lang.reflect.Type, param1: java.lang.Class): org.bson.codecs.pojo.TypeData<any>;
					public static newInstance(param0: java.lang.reflect.Method): org.bson.codecs.pojo.TypeData<any>;
					public getType(): java.lang.Class<any>;
					public getTypeParameters(): java.util.List<org.bson.codecs.pojo.TypeData<any>>;
					public hashCode(): number;
					public static newInstance(param0: java.lang.reflect.Field): org.bson.codecs.pojo.TypeData<any>;
				}
				export module TypeData {
					export class Builder<T>  extends java.lang.Object {
						public static class: java.lang.Class<org.bson.codecs.pojo.TypeData.Builder<any>>;
						public addTypeParameters(param0: java.util.List<org.bson.codecs.pojo.TypeData<any>>): org.bson.codecs.pojo.TypeData.Builder<T>;
						public build(): org.bson.codecs.pojo.TypeData<T>;
						public addTypeParameter(param0: org.bson.codecs.pojo.TypeData<any>): org.bson.codecs.pojo.TypeData.Builder<any>;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class TypeParameterMap {
					public static class: java.lang.Class<org.bson.codecs.pojo.TypeParameterMap>;
					public equals(param0: any): boolean;
					public toString(): string;
					public hashCode(): number;
				}
				export module TypeParameterMap {
					export class Builder {
						public static class: java.lang.Class<org.bson.codecs.pojo.TypeParameterMap.Builder>;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export class TypeWithTypeParameters<T>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.codecs.pojo.TypeWithTypeParameters<any>>;
					/**
					 * Constructs a new instance of the org.bson.codecs.pojo.TypeWithTypeParameters<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getType(): java.lang.Class<T>;
						getTypeParameters(): java.util.List<any>;
					});
					public constructor();
					public getTypeParameters(): java.util.List<any>;
					public getType(): java.lang.Class<T>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export module annotations {
					export class BsonCreator {
						public static class: java.lang.Class<org.bson.codecs.pojo.annotations.BsonCreator>;
						/**
						 * Constructs a new instance of the org.bson.codecs.pojo.annotations.BsonCreator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export module annotations {
					export class BsonDiscriminator {
						public static class: java.lang.Class<org.bson.codecs.pojo.annotations.BsonDiscriminator>;
						/**
						 * Constructs a new instance of the org.bson.codecs.pojo.annotations.BsonDiscriminator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): string;
							key(): string;
						});
						public constructor();
						public value(): string;
						public key(): string;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export module annotations {
					export class BsonId {
						public static class: java.lang.Class<org.bson.codecs.pojo.annotations.BsonId>;
						/**
						 * Constructs a new instance of the org.bson.codecs.pojo.annotations.BsonId interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export module annotations {
					export class BsonIgnore {
						public static class: java.lang.Class<org.bson.codecs.pojo.annotations.BsonIgnore>;
						/**
						 * Constructs a new instance of the org.bson.codecs.pojo.annotations.BsonIgnore interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module codecs {
			export module pojo {
				export module annotations {
					export class BsonProperty {
						public static class: java.lang.Class<org.bson.codecs.pojo.annotations.BsonProperty>;
						/**
						 * Constructs a new instance of the org.bson.codecs.pojo.annotations.BsonProperty interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): string;
							useDiscriminator(): boolean;
						});
						public constructor();
						public value(): string;
						public useDiscriminator(): boolean;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module conversions {
			export class Bson {
				public static class: java.lang.Class<org.bson.conversions.Bson>;
				/**
				 * Constructs a new instance of the org.bson.conversions.Bson interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
				});
				public constructor();
				public toBsonDocument(param0: java.lang.Class, param1: org.bson.codecs.configuration.CodecRegistry): org.bson.BsonDocument;
			}
		}
	}
}

declare module org {
	export module bson {
		export module diagnostics {
			export class JULLogger extends org.bson.diagnostics.Logger {
				public static class: java.lang.Class<org.bson.diagnostics.JULLogger>;
				public isInfoEnabled(): boolean;
				public trace(param0: string, param1: java.lang.Throwable): void;
				public error(param0: string): void;
				public getName(): string;
				public debug(param0: string, param1: java.lang.Throwable): void;
				public isWarnEnabled(): boolean;
				public warn(param0: string, param1: java.lang.Throwable): void;
				public isErrorEnabled(): boolean;
				public info(param0: string): void;
				public error(param0: string, param1: java.lang.Throwable): void;
				public isDebugEnabled(): boolean;
				public debug(param0: string): void;
				public warn(param0: string): void;
				public trace(param0: string): void;
				public info(param0: string, param1: java.lang.Throwable): void;
				public isTraceEnabled(): boolean;
				public log(param0: java.util.logging.Level, param1: string, param2: java.lang.Throwable): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module diagnostics {
			export class Logger {
				public static class: java.lang.Class<org.bson.diagnostics.Logger>;
				/**
				 * Constructs a new instance of the org.bson.diagnostics.Logger interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getName(): string;
					isTraceEnabled(): boolean;
					trace(param0: string): void;
					trace(param0: string, param1: java.lang.Throwable): void;
					isDebugEnabled(): boolean;
					debug(param0: string): void;
					debug(param0: string, param1: java.lang.Throwable): void;
					isInfoEnabled(): boolean;
					info(param0: string): void;
					info(param0: string, param1: java.lang.Throwable): void;
					isWarnEnabled(): boolean;
					warn(param0: string): void;
					warn(param0: string, param1: java.lang.Throwable): void;
					isErrorEnabled(): boolean;
					error(param0: string): void;
					error(param0: string, param1: java.lang.Throwable): void;
				});
				public constructor();
				public isInfoEnabled(): boolean;
				public trace(param0: string, param1: java.lang.Throwable): void;
				public error(param0: string): void;
				public getName(): string;
				public debug(param0: string, param1: java.lang.Throwable): void;
				public isWarnEnabled(): boolean;
				public warn(param0: string, param1: java.lang.Throwable): void;
				public isErrorEnabled(): boolean;
				public info(param0: string): void;
				public error(param0: string, param1: java.lang.Throwable): void;
				public isDebugEnabled(): boolean;
				public debug(param0: string): void;
				public warn(param0: string): void;
				public trace(param0: string): void;
				public info(param0: string, param1: java.lang.Throwable): void;
				public isTraceEnabled(): boolean;
			}
		}
	}
}

declare module org {
	export module bson {
		export module diagnostics {
			export class Loggers {
				public static class: java.lang.Class<org.bson.diagnostics.Loggers>;
				public static PREFIX: string;
				public static getLogger(param0: string): org.bson.diagnostics.Logger;
			}
		}
	}
}

declare module org {
	export module bson {
		export module diagnostics {
			export class SLF4JLogger extends org.bson.diagnostics.Logger {
				public static class: java.lang.Class<org.bson.diagnostics.SLF4JLogger>;
				public isInfoEnabled(): boolean;
				public trace(param0: string, param1: java.lang.Throwable): void;
				public error(param0: string): void;
				public getName(): string;
				public debug(param0: string, param1: java.lang.Throwable): void;
				public isWarnEnabled(): boolean;
				public warn(param0: string, param1: java.lang.Throwable): void;
				public isErrorEnabled(): boolean;
				public info(param0: string): void;
				public error(param0: string, param1: java.lang.Throwable): void;
				public isDebugEnabled(): boolean;
				public debug(param0: string): void;
				public warn(param0: string): void;
				public trace(param0: string): void;
				public info(param0: string, param1: java.lang.Throwable): void;
				public isTraceEnabled(): boolean;
			}
		}
	}
}

declare module org {
	export module bson {
		export module internal {
			export class Base64 {
				public static class: java.lang.Class<org.bson.internal.Base64>;
				public static decode(param0: string): native.Array<number>;
				public static encode(param0: native.Array<number>): string;
			}
		}
	}
}

declare module org {
	export module bson {
		export module internal {
			export class UnsignedLongs {
				public static class: java.lang.Class<org.bson.internal.UnsignedLongs>;
				public static toString(param0: number): string;
				public static parse(param0: string): number;
				public static compare(param0: number, param1: number): number;
			}
		}
	}
}

declare module org {
	export module bson {
		export module internal {
			export class UuidHelper {
				public static class: java.lang.Class<org.bson.internal.UuidHelper>;
				public static encodeUuidToBinary(param0: java.util.UUID, param1: org.bson.UuidRepresentation): native.Array<number>;
				public static decodeBinaryToUuid(param0: native.Array<number>, param1: number, param2: org.bson.UuidRepresentation): java.util.UUID;
			}
		}
	}
}

declare module org {
	export module bson {
		export module io {
			export class BasicOutputBuffer extends org.bson.io.OutputBuffer {
				public static class: java.lang.Class<org.bson.io.BasicOutputBuffer>;
				public getInternalBuffer(): native.Array<number>;
				public write(param0: number, param1: number): void;
				public close(): void;
				public write(param0: native.Array<number>, param1: number, param2: number): void;
				public writeInt32(param0: number, param1: number): void;
				public write(param0: native.Array<number>): void;
				public writeDouble(param0: number): void;
				public writeInt64(param0: number): void;
				public writeBytes(param0: native.Array<number>, param1: number, param2: number): void;
				public getPosition(): number;
				public writeObjectId(param0: org.bson.types.ObjectId): void;
				public constructor();
				public getByteBuffers(): java.util.List<org.bson.ByteBuf>;
				public write(param0: number): void;
				public writeString(param0: string): void;
				public getSize(): number;
				public writeBytes(param0: native.Array<number>): void;
				public pipe(param0: java.io.OutputStream): number;
				public constructor(param0: number);
				public writeCString(param0: string): void;
				public writeInt32(param0: number): void;
				public writeByte(param0: number): void;
				public truncateToPosition(param0: number): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module io {
			export class Bits {
				public static class: java.lang.Class<org.bson.io.Bits>;
				public static readLong(param0: native.Array<number>): number;
				public static readFully(param0: java.io.InputStream, param1: native.Array<number>, param2: number): void;
				public static readIntBE(param0: native.Array<number>, param1: number): number;
				public constructor();
				public static readFully(param0: java.io.InputStream, param1: native.Array<number>): void;
				public static readFully(param0: java.io.InputStream, param1: native.Array<number>, param2: number, param3: number): void;
				public static readInt(param0: java.io.InputStream): number;
				public static readLong(param0: java.io.InputStream): number;
				public static readInt(param0: java.io.InputStream, param1: native.Array<number>): number;
				public static readInt(param0: native.Array<number>, param1: number): number;
				public static readLong(param0: native.Array<number>, param1: number): number;
				public static readInt(param0: native.Array<number>): number;
				public static readLong(param0: java.io.InputStream, param1: native.Array<number>): number;
			}
		}
	}
}

declare module org {
	export module bson {
		export module io {
			export class BsonInput {
				public static class: java.lang.Class<org.bson.io.BsonInput>;
				/**
				 * Constructs a new instance of the org.bson.io.BsonInput interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getPosition(): number;
					readByte(): number;
					readBytes(param0: native.Array<number>): void;
					readBytes(param0: native.Array<number>, param1: number, param2: number): void;
					readInt64(): number;
					readDouble(): number;
					readInt32(): number;
					readString(): string;
					readObjectId(): org.bson.types.ObjectId;
					readCString(): string;
					skipCString(): void;
					skip(param0: number): void;
					mark(param0: number): void;
					getMark(param0: number): org.bson.io.BsonInputMark;
					reset(): void;
					hasRemaining(): boolean;
					close(): void;
				});
				public constructor();
				public hasRemaining(): boolean;
				public close(): void;
				public getPosition(): number;
				public skipCString(): void;
				public readBytes(param0: native.Array<number>, param1: number, param2: number): void;
				public readInt32(): number;
				public getMark(param0: number): org.bson.io.BsonInputMark;
				public reset(): void;
				public readByte(): number;
				public readCString(): string;
				public skip(param0: number): void;
				public readInt64(): number;
				public readObjectId(): org.bson.types.ObjectId;
				public readBytes(param0: native.Array<number>): void;
				public readString(): string;
				public mark(param0: number): void;
				public readDouble(): number;
			}
		}
	}
}

declare module org {
	export module bson {
		export module io {
			export class BsonInputMark {
				public static class: java.lang.Class<org.bson.io.BsonInputMark>;
				/**
				 * Constructs a new instance of the org.bson.io.BsonInputMark interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					reset(): void;
				});
				public constructor();
				public reset(): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module io {
			export class BsonOutput {
				public static class: java.lang.Class<org.bson.io.BsonOutput>;
				/**
				 * Constructs a new instance of the org.bson.io.BsonOutput interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getPosition(): number;
					getSize(): number;
					truncateToPosition(param0: number): void;
					writeBytes(param0: native.Array<number>): void;
					writeBytes(param0: native.Array<number>, param1: number, param2: number): void;
					writeByte(param0: number): void;
					writeCString(param0: string): void;
					writeString(param0: string): void;
					writeDouble(param0: number): void;
					writeInt32(param0: number): void;
					writeInt32(param0: number, param1: number): void;
					writeInt64(param0: number): void;
					writeObjectId(param0: org.bson.types.ObjectId): void;
					close(): void;
				});
				public constructor();
				public close(): void;
				public writeInt32(param0: number, param1: number): void;
				public writeDouble(param0: number): void;
				public writeInt64(param0: number): void;
				public writeBytes(param0: native.Array<number>, param1: number, param2: number): void;
				public getPosition(): number;
				public writeObjectId(param0: org.bson.types.ObjectId): void;
				public writeString(param0: string): void;
				public getSize(): number;
				public writeBytes(param0: native.Array<number>): void;
				public writeCString(param0: string): void;
				public writeInt32(param0: number): void;
				public writeByte(param0: number): void;
				public truncateToPosition(param0: number): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module io {
			export class ByteBufferBsonInput extends org.bson.io.BsonInput {
				public static class: java.lang.Class<org.bson.io.ByteBufferBsonInput>;
				public hasRemaining(): boolean;
				public close(): void;
				public constructor(param0: org.bson.ByteBuf);
				public getPosition(): number;
				public skipCString(): void;
				public readBytes(param0: native.Array<number>, param1: number, param2: number): void;
				public readInt32(): number;
				public getMark(param0: number): org.bson.io.BsonInputMark;
				public reset(): void;
				public readByte(): number;
				public readCString(): string;
				public skip(param0: number): void;
				public readInt64(): number;
				public readObjectId(): org.bson.types.ObjectId;
				public readBytes(param0: native.Array<number>): void;
				public readString(): string;
				public mark(param0: number): void;
				public readDouble(): number;
			}
		}
	}
}

declare module org {
	export module bson {
		export module io {
			export abstract class OutputBuffer implements org.bson.io.BsonOutput {
				public static class: java.lang.Class<org.bson.io.OutputBuffer>;
				public write(param0: native.Array<number>, param1: number, param2: number): void;
				public writeInt32(param0: number, param1: number): void;
				public write(param0: native.Array<number>): void;
				public writeInt64(param0: number): void;
				public writeDouble(param0: number): void;
				public writeBytes(param0: native.Array<number>, param1: number, param2: number): void;
				public getPosition(): number;
				public constructor();
				public writeString(param0: string): void;
				public getSize(): number;
				public writeBytes(param0: native.Array<number>): void;
				public writeCString(param0: string): void;
				public toByteArray(): native.Array<number>;
				public writeByte(param0: number): void;
				public truncateToPosition(param0: number): void;
				public close(): void;
				public write(param0: number, param1: number): void;
				public writeLong(param0: number): void;
				public writeInt(param0: number): void;
				public toString(): string;
				public writeObjectId(param0: org.bson.types.ObjectId): void;
				public size(): number;
				public getByteBuffers(): java.util.List<org.bson.ByteBuf>;
				public write(param0: number): void;
				public pipe(param0: java.io.OutputStream): number;
				public writeInt32(param0: number): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class Converter<T>  extends java.lang.Object {
				public static class: java.lang.Class<org.bson.json.Converter<any>>;
				/**
				 * Constructs a new instance of the org.bson.json.Converter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					convert(param0: T, param1: org.bson.json.StrictJsonWriter): void;
				});
				public constructor();
				public convert(param0: T, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class DateTimeFormatter {
				public static class: java.lang.Class<org.bson.json.DateTimeFormatter>;
			}
			export module DateTimeFormatter {
				export class FormatterImpl {
					public static class: java.lang.Class<org.bson.json.DateTimeFormatter.FormatterImpl>;
					/**
					 * Constructs a new instance of the org.bson.json.DateTimeFormatter$FormatterImpl interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						parse(param0: string): number;
						format(param0: number): string;
					});
					public constructor();
					public parse(param0: string): number;
					public format(param0: number): string;
				}
				export class Java8DateTimeFormatter extends org.bson.json.DateTimeFormatter.FormatterImpl {
					public static class: java.lang.Class<org.bson.json.DateTimeFormatter.Java8DateTimeFormatter>;
					public parse(param0: string): number;
					public format(param0: number): string;
				}
				export class JaxbDateTimeFormatter extends org.bson.json.DateTimeFormatter.FormatterImpl {
					public static class: java.lang.Class<org.bson.json.DateTimeFormatter.JaxbDateTimeFormatter>;
					public parse(param0: string): number;
					public format(param0: number): string;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonBinaryConverter extends org.bson.json.Converter<org.bson.BsonBinary> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonBinaryConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonBinary, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonDateTimeConverter extends org.bson.json.Converter<java.lang.Long> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonDateTimeConverter>;
				public convert(param0: java.lang.Long, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonDecimal128Converter extends org.bson.json.Converter<org.bson.types.Decimal128> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonDecimal128Converter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.types.Decimal128, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonDoubleConverter extends org.bson.json.Converter<java.lang.Double> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonDoubleConverter>;
				public convert(param0: java.lang.Double, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonInt32Converter extends org.bson.json.Converter<java.lang.Integer> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonInt32Converter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: java.lang.Integer, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonInt64Converter extends org.bson.json.Converter<java.lang.Long> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonInt64Converter>;
				public convert(param0: java.lang.Long, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonMaxKeyConverter extends org.bson.json.Converter<org.bson.BsonMaxKey> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonMaxKeyConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonMaxKey, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonMinKeyConverter extends org.bson.json.Converter<org.bson.BsonMinKey> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonMinKeyConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonMinKey, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonObjectIdConverter extends org.bson.json.Converter<org.bson.types.ObjectId> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonObjectIdConverter>;
				public convert(param0: org.bson.types.ObjectId, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonRegularExpressionConverter extends org.bson.json.Converter<org.bson.BsonRegularExpression> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonRegularExpressionConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonRegularExpression, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonTimestampConverter extends org.bson.json.Converter<org.bson.BsonTimestamp> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonTimestampConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonTimestamp, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ExtendedJsonUndefinedConverter extends org.bson.json.Converter<org.bson.BsonUndefined> {
				public static class: java.lang.Class<org.bson.json.ExtendedJsonUndefinedConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonUndefined, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonBooleanConverter extends org.bson.json.Converter<java.lang.Boolean> {
				public static class: java.lang.Class<org.bson.json.JsonBooleanConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: java.lang.Boolean, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonBuffer {
				public static class: java.lang.Class<org.bson.json.JsonBuffer>;
				public read(): number;
				public substring(param0: number): string;
				public substring(param0: number, param1: number): string;
				public getPosition(): number;
				public setPosition(param0: number): void;
				public unread(param0: number): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonDoubleConverter extends org.bson.json.Converter<java.lang.Double> {
				public static class: java.lang.Class<org.bson.json.JsonDoubleConverter>;
				public convert(param0: java.lang.Double, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonInt32Converter extends org.bson.json.Converter<java.lang.Integer> {
				public static class: java.lang.Class<org.bson.json.JsonInt32Converter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: java.lang.Integer, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonJavaScriptConverter extends org.bson.json.Converter<string> {
				public static class: java.lang.Class<org.bson.json.JsonJavaScriptConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: string, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonMode {
				public static class: java.lang.Class<org.bson.json.JsonMode>;
				public static STRICT: org.bson.json.JsonMode;
				public static SHELL: org.bson.json.JsonMode;
				public static EXTENDED: org.bson.json.JsonMode;
				public static RELAXED: org.bson.json.JsonMode;
				public static values(): native.Array<org.bson.json.JsonMode>;
				public static valueOf(param0: string): org.bson.json.JsonMode;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonNullConverter extends org.bson.json.Converter<org.bson.BsonNull> {
				public static class: java.lang.Class<org.bson.json.JsonNullConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonNull, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonParseException {
				public static class: java.lang.Class<org.bson.json.JsonParseException>;
				public constructor(param0: string, param1: native.Array<any>);
				public constructor(param0: java.lang.Throwable);
				public constructor(param0: string);
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonReader extends org.bson.AbstractBsonReader {
				public static class: java.lang.Class<org.bson.json.JsonReader>;
				public doReadSymbol(): string;
				public doReadMaxKey(): void;
				public doReadBoolean(): boolean;
				public readDecimal128(): org.bson.types.Decimal128;
				public readEndDocument(): void;
				public constructor();
				public doReadUndefined(): void;
				public doReadNull(): void;
				public readEndArray(): void;
				public readNull(param0: string): void;
				public doReadInt32(): number;
				public readObjectId(): org.bson.types.ObjectId;
				public doReadDecimal128(): org.bson.types.Decimal128;
				public readBinaryData(): org.bson.BsonBinary;
				public readMinKey(): void;
				public readTimestamp(): org.bson.BsonTimestamp;
				public doReadDBPointer(): org.bson.BsonDbPointer;
				public readJavaScript(param0: string): string;
				public readDouble(): number;
				public readDBPointer(param0: string): org.bson.BsonDbPointer;
				public doReadString(): string;
				public close(): void;
				public readRegularExpression(): org.bson.BsonRegularExpression;
				public doPeekBinarySize(): number;
				public readInt32(param0: string): number;
				public readTimestamp(param0: string): org.bson.BsonTimestamp;
				public readStartArray(): void;
				public getContext(): org.bson.AbstractBsonReader.Context;
				public readName(): string;
				public peekBinarySize(): number;
				public readSymbol(param0: string): string;
				public readObjectId(param0: string): org.bson.types.ObjectId;
				public readNull(): void;
				public readString(param0: string): string;
				public skipValue(): void;
				public readJavaScript(): string;
				public readName(param0: string): void;
				public readMinKey(param0: string): void;
				public doSkipValue(): void;
				public doPeekBinarySubType(): number;
				public readBoolean(param0: string): boolean;
				public doReadJavaScriptWithScope(): string;
				public readDBPointer(): org.bson.BsonDbPointer;
				public peekBinarySubType(): number;
				public getCurrentName(): string;
				public skipName(): void;
				public readSymbol(): string;
				public doReadBinaryData(): org.bson.BsonBinary;
				public readStartDocument(): void;
				public readInt32(): number;
				public doReadDouble(): number;
				public constructor(param0: string);
				public doReadEndArray(): void;
				public readDouble(param0: string): number;
				public reset(): void;
				public readMaxKey(): void;
				public readDateTime(): number;
				public readDecimal128(param0: string): org.bson.types.Decimal128;
				public readInt64(param0: string): number;
				public readJavaScriptWithScope(): string;
				public doReadEndDocument(): void;
				public doReadStartArray(): void;
				public doReadDateTime(): number;
				public readString(): string;
				public doSkipName(): void;
				public doReadMinKey(): void;
				public doReadJavaScript(): string;
				public readRegularExpression(param0: string): org.bson.BsonRegularExpression;
				public readBinaryData(param0: string): org.bson.BsonBinary;
				public readUndefined(param0: string): void;
				public doReadInt64(): number;
				public doReadStartDocument(): void;
				public getContext(): org.bson.json.JsonReader.Context;
				public readBsonType(): org.bson.BsonType;
				public doReadTimestamp(): org.bson.BsonTimestamp;
				public mark(): void;
				public getCurrentBsonType(): org.bson.BsonType;
				public readUndefined(): void;
				public readMaxKey(param0: string): void;
				public getMark(): org.bson.BsonReaderMark;
				public readJavaScriptWithScope(param0: string): string;
				public readDateTime(param0: string): number;
				public doReadObjectId(): org.bson.types.ObjectId;
				public doReadRegularExpression(): org.bson.BsonRegularExpression;
				public readInt64(): number;
				public readBoolean(): boolean;
			}
			export module JsonReader {
				export class Context extends org.bson.AbstractBsonReader.Context {
					public static class: java.lang.Class<org.bson.json.JsonReader.Context>;
					public getParentContext(): org.bson.json.JsonReader.Context;
					public constructor(param0: org.bson.json.JsonReader, param1: org.bson.AbstractBsonReader.Context, param2: org.bson.BsonContextType);
					public getContextType(): org.bson.BsonContextType;
					public getParentContext(): org.bson.AbstractBsonReader.Context;
					public constructor(param0: org.bson.AbstractBsonReader, param1: org.bson.AbstractBsonReader.Context, param2: org.bson.BsonContextType);
				}
				export class Mark extends org.bson.AbstractBsonReader.Mark {
					public static class: java.lang.Class<org.bson.json.JsonReader.Mark>;
					public reset(): void;
					public constructor(param0: org.bson.json.JsonReader);
					public constructor(param0: org.bson.AbstractBsonReader);
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonScanner {
				public static class: java.lang.Class<org.bson.json.JsonScanner>;
				public setBufferPosition(param0: number): void;
				public nextToken(): org.bson.json.JsonToken;
				public getBufferPosition(): number;
			}
			export module JsonScanner {
				export class NumberState {
					public static class: java.lang.Class<org.bson.json.JsonScanner.NumberState>;
					public static SAW_LEADING_MINUS: org.bson.json.JsonScanner.NumberState;
					public static SAW_LEADING_ZERO: org.bson.json.JsonScanner.NumberState;
					public static SAW_INTEGER_DIGITS: org.bson.json.JsonScanner.NumberState;
					public static SAW_DECIMAL_POINT: org.bson.json.JsonScanner.NumberState;
					public static SAW_FRACTION_DIGITS: org.bson.json.JsonScanner.NumberState;
					public static SAW_EXPONENT_LETTER: org.bson.json.JsonScanner.NumberState;
					public static SAW_EXPONENT_SIGN: org.bson.json.JsonScanner.NumberState;
					public static SAW_EXPONENT_DIGITS: org.bson.json.JsonScanner.NumberState;
					public static SAW_MINUS_I: org.bson.json.JsonScanner.NumberState;
					public static DONE: org.bson.json.JsonScanner.NumberState;
					public static INVALID: org.bson.json.JsonScanner.NumberState;
					public static valueOf(param0: string): org.bson.json.JsonScanner.NumberState;
					public static values(): native.Array<org.bson.json.JsonScanner.NumberState>;
				}
				export class RegularExpressionState {
					public static class: java.lang.Class<org.bson.json.JsonScanner.RegularExpressionState>;
					public static IN_PATTERN: org.bson.json.JsonScanner.RegularExpressionState;
					public static IN_ESCAPE_SEQUENCE: org.bson.json.JsonScanner.RegularExpressionState;
					public static IN_OPTIONS: org.bson.json.JsonScanner.RegularExpressionState;
					public static DONE: org.bson.json.JsonScanner.RegularExpressionState;
					public static INVALID: org.bson.json.JsonScanner.RegularExpressionState;
					public static valueOf(param0: string): org.bson.json.JsonScanner.RegularExpressionState;
					public static values(): native.Array<org.bson.json.JsonScanner.RegularExpressionState>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonStringConverter extends org.bson.json.Converter<string> {
				public static class: java.lang.Class<org.bson.json.JsonStringConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: string, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonSymbolConverter extends org.bson.json.Converter<string> {
				public static class: java.lang.Class<org.bson.json.JsonSymbolConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: string, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonToken {
				public static class: java.lang.Class<org.bson.json.JsonToken>;
				public getType(): org.bson.json.JsonTokenType;
				public getValue(): any;
				public getValue(param0: java.lang.Class): any;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonTokenType {
				public static class: java.lang.Class<org.bson.json.JsonTokenType>;
				public static INVALID: org.bson.json.JsonTokenType;
				public static BEGIN_ARRAY: org.bson.json.JsonTokenType;
				public static BEGIN_OBJECT: org.bson.json.JsonTokenType;
				public static END_ARRAY: org.bson.json.JsonTokenType;
				public static LEFT_PAREN: org.bson.json.JsonTokenType;
				public static RIGHT_PAREN: org.bson.json.JsonTokenType;
				public static END_OBJECT: org.bson.json.JsonTokenType;
				public static COLON: org.bson.json.JsonTokenType;
				public static COMMA: org.bson.json.JsonTokenType;
				public static DOUBLE: org.bson.json.JsonTokenType;
				public static INT32: org.bson.json.JsonTokenType;
				public static INT64: org.bson.json.JsonTokenType;
				public static REGULAR_EXPRESSION: org.bson.json.JsonTokenType;
				public static STRING: org.bson.json.JsonTokenType;
				public static UNQUOTED_STRING: org.bson.json.JsonTokenType;
				public static END_OF_FILE: org.bson.json.JsonTokenType;
				public static valueOf(param0: string): org.bson.json.JsonTokenType;
				public static values(): native.Array<org.bson.json.JsonTokenType>;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonWriter extends org.bson.AbstractBsonWriter {
				public static class: java.lang.Class<org.bson.json.JsonWriter>;
				public doWriteStartDocument(): void;
				public writeBinaryData(param0: org.bson.BsonBinary): void;
				public writeEndDocument(): void;
				public writeSymbol(param0: string): void;
				public writeStartArray(): void;
				public pipe(param0: org.bson.BsonReader, param1: java.util.List<org.bson.BsonElement>): void;
				public doWriteMaxKey(): void;
				public writeObjectId(param0: string, param1: org.bson.types.ObjectId): void;
				public writeDBPointer(param0: string, param1: org.bson.BsonDbPointer): void;
				public writeDouble(param0: number): void;
				public writeInt64(param0: number): void;
				public doWriteEndDocument(): void;
				public doWriteDouble(param0: number): void;
				public doWriteInt64(param0: number): void;
				public writeStartDocument(): void;
				public flush(): void;
				public writeName(param0: string): void;
				public writeString(param0: string, param1: string): void;
				public writeEndArray(): void;
				public doWriteJavaScript(param0: string): void;
				public doWriteDBPointer(param0: org.bson.BsonDbPointer): void;
				public doWriteRegularExpression(param0: org.bson.BsonRegularExpression): void;
				public writeInt32(param0: string, param1: number): void;
				public pipe(param0: org.bson.BsonReader): void;
				public constructor(param0: org.bson.BsonWriterSettings, param1: org.bson.FieldNameValidator);
				public doWriteUndefined(): void;
				public doWriteDateTime(param0: number): void;
				public doWriteMinKey(): void;
				public writeObjectId(param0: org.bson.types.ObjectId): void;
				public doWriteEndArray(): void;
				public doWriteInt32(param0: number): void;
				public writeNull(): void;
				public getContext(): org.bson.AbstractBsonWriter.Context;
				public doWriteNull(): void;
				public doWriteSymbol(param0: string): void;
				public writeInt32(param0: number): void;
				public writeBoolean(param0: boolean): void;
				public writeInt64(param0: string, param1: number): void;
				public writeMinKey(): void;
				public writeRegularExpression(param0: string, param1: org.bson.BsonRegularExpression): void;
				public writeTimestamp(param0: string, param1: org.bson.BsonTimestamp): void;
				public writeTimestamp(param0: org.bson.BsonTimestamp): void;
				public writeDateTime(param0: number): void;
				public writeJavaScriptWithScope(param0: string): void;
				public writeMinKey(param0: string): void;
				public writeDouble(param0: string, param1: number): void;
				public doWriteTimestamp(param0: org.bson.BsonTimestamp): void;
				public writeDBPointer(param0: org.bson.BsonDbPointer): void;
				public writeRegularExpression(param0: org.bson.BsonRegularExpression): void;
				public writeUndefined(): void;
				public abortPipe(): boolean;
				public writeJavaScriptWithScope(param0: string, param1: string): void;
				public constructor(param0: java.io.Writer, param1: org.bson.json.JsonWriterSettings);
				public doWriteBoolean(param0: boolean): void;
				public writeStartDocument(param0: string): void;
				public getWriter(): java.io.Writer;
				public writeString(param0: string): void;
				public writeNull(param0: string): void;
				public doWriteString(param0: string): void;
				public writeBoolean(param0: string, param1: boolean): void;
				public writeSymbol(param0: string, param1: string): void;
				public writeJavaScript(param0: string, param1: string): void;
				public doWriteName(param0: string): void;
				public doWriteDecimal128(param0: org.bson.types.Decimal128): void;
				public writeBinaryData(param0: string, param1: org.bson.BsonBinary): void;
				public doWriteStartArray(): void;
				public writeStartArray(param0: string): void;
				public doWriteBinaryData(param0: org.bson.BsonBinary): void;
				public writeDecimal128(param0: string, param1: org.bson.types.Decimal128): void;
				public doWriteJavaScriptWithScope(param0: string): void;
				public writeJavaScript(param0: string): void;
				public doWriteObjectId(param0: org.bson.types.ObjectId): void;
				public writeUndefined(param0: string): void;
				public constructor(param0: org.bson.BsonWriterSettings);
				public writeDecimal128(param0: org.bson.types.Decimal128): void;
				public isTruncated(): boolean;
				public writeMaxKey(): void;
				public writeDateTime(param0: string, param1: number): void;
				public constructor(param0: java.io.Writer);
				public writeMaxKey(param0: string): void;
				public getContext(): org.bson.json.JsonWriter.Context;
			}
			export module JsonWriter {
				export class Context extends org.bson.AbstractBsonWriter.Context {
					public static class: java.lang.Class<org.bson.json.JsonWriter.Context>;
					public getParentContext(): org.bson.json.JsonWriter.Context;
					public getParentContext(): org.bson.AbstractBsonWriter.Context;
					public constructor(param0: org.bson.json.JsonWriter, param1: org.bson.json.JsonWriter.Context, param2: org.bson.BsonContextType);
					public constructor(param0: org.bson.json.JsonWriter, param1: org.bson.json.JsonWriter.Context, param2: org.bson.BsonContextType, param3: string);
					public constructor(param0: org.bson.AbstractBsonWriter, param1: org.bson.AbstractBsonWriter.Context, param2: org.bson.BsonContextType);
					public constructor(param0: org.bson.AbstractBsonWriter, param1: org.bson.AbstractBsonWriter.Context);
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class JsonWriterSettings extends org.bson.BsonWriterSettings {
				public static class: java.lang.Class<org.bson.json.JsonWriterSettings>;
				public getInt32Converter(): org.bson.json.Converter<java.lang.Integer>;
				public getObjectIdConverter(): org.bson.json.Converter<org.bson.types.ObjectId>;
				public constructor(param0: boolean);
				public getDecimal128Converter(): org.bson.json.Converter<org.bson.types.Decimal128>;
				public constructor();
				public constructor(param0: org.bson.json.JsonMode, param1: string, param2: string);
				public getMaxKeyConverter(): org.bson.json.Converter<org.bson.BsonMaxKey>;
				public getMaxLength(): number;
				public getUndefinedConverter(): org.bson.json.Converter<org.bson.BsonUndefined>;
				public getNewLineCharacters(): string;
				public getStringConverter(): org.bson.json.Converter<string>;
				public static builder(): org.bson.json.JsonWriterSettings.Builder;
				public constructor(param0: org.bson.json.JsonMode);
				public isIndent(): boolean;
				public constructor(param0: org.bson.json.JsonMode, param1: string);
				public getMinKeyConverter(): org.bson.json.Converter<org.bson.BsonMinKey>;
				public getIndentCharacters(): string;
				public getJavaScriptConverter(): org.bson.json.Converter<string>;
				public getDoubleConverter(): org.bson.json.Converter<java.lang.Double>;
				public getOutputMode(): org.bson.json.JsonMode;
				public getBooleanConverter(): org.bson.json.Converter<java.lang.Boolean>;
				public constructor(param0: org.bson.json.JsonMode, param1: boolean);
				public getRegularExpressionConverter(): org.bson.json.Converter<org.bson.BsonRegularExpression>;
				public getNullConverter(): org.bson.json.Converter<org.bson.BsonNull>;
				public getSymbolConverter(): org.bson.json.Converter<string>;
				public getInt64Converter(): org.bson.json.Converter<java.lang.Long>;
				public getTimestampConverter(): org.bson.json.Converter<org.bson.BsonTimestamp>;
				public constructor(param0: number);
				public getDateTimeConverter(): org.bson.json.Converter<java.lang.Long>;
				public getBinaryConverter(): org.bson.json.Converter<org.bson.BsonBinary>;
			}
			export module JsonWriterSettings {
				export class Builder {
					public static class: java.lang.Class<org.bson.json.JsonWriterSettings.Builder>;
					public build(): org.bson.json.JsonWriterSettings;
					public indent(param0: boolean): org.bson.json.JsonWriterSettings.Builder;
					public maxKeyConverter(param0: org.bson.json.Converter<org.bson.BsonMaxKey>): org.bson.json.JsonWriterSettings.Builder;
					public dateTimeConverter(param0: org.bson.json.Converter<java.lang.Long>): org.bson.json.JsonWriterSettings.Builder;
					public nullConverter(param0: org.bson.json.Converter<org.bson.BsonNull>): org.bson.json.JsonWriterSettings.Builder;
					public minKeyConverter(param0: org.bson.json.Converter<org.bson.BsonMinKey>): org.bson.json.JsonWriterSettings.Builder;
					public undefinedConverter(param0: org.bson.json.Converter<org.bson.BsonUndefined>): org.bson.json.JsonWriterSettings.Builder;
					public javaScriptConverter(param0: org.bson.json.Converter<string>): org.bson.json.JsonWriterSettings.Builder;
					public newLineCharacters(param0: string): org.bson.json.JsonWriterSettings.Builder;
					public stringConverter(param0: org.bson.json.Converter<string>): org.bson.json.JsonWriterSettings.Builder;
					public objectIdConverter(param0: org.bson.json.Converter<org.bson.types.ObjectId>): org.bson.json.JsonWriterSettings.Builder;
					public booleanConverter(param0: org.bson.json.Converter<java.lang.Boolean>): org.bson.json.JsonWriterSettings.Builder;
					public doubleConverter(param0: org.bson.json.Converter<java.lang.Double>): org.bson.json.JsonWriterSettings.Builder;
					public binaryConverter(param0: org.bson.json.Converter<org.bson.BsonBinary>): org.bson.json.JsonWriterSettings.Builder;
					public decimal128Converter(param0: org.bson.json.Converter<org.bson.types.Decimal128>): org.bson.json.JsonWriterSettings.Builder;
					public regularExpressionConverter(param0: org.bson.json.Converter<org.bson.BsonRegularExpression>): org.bson.json.JsonWriterSettings.Builder;
					public indentCharacters(param0: string): org.bson.json.JsonWriterSettings.Builder;
					public int64Converter(param0: org.bson.json.Converter<java.lang.Long>): org.bson.json.JsonWriterSettings.Builder;
					public outputMode(param0: org.bson.json.JsonMode): org.bson.json.JsonWriterSettings.Builder;
					public maxLength(param0: number): org.bson.json.JsonWriterSettings.Builder;
					public timestampConverter(param0: org.bson.json.Converter<org.bson.BsonTimestamp>): org.bson.json.JsonWriterSettings.Builder;
					public int32Converter(param0: org.bson.json.Converter<java.lang.Integer>): org.bson.json.JsonWriterSettings.Builder;
					public symbolConverter(param0: org.bson.json.Converter<string>): org.bson.json.JsonWriterSettings.Builder;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class LegacyExtendedJsonBinaryConverter extends org.bson.json.Converter<org.bson.BsonBinary> {
				public static class: java.lang.Class<org.bson.json.LegacyExtendedJsonBinaryConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonBinary, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class LegacyExtendedJsonDateTimeConverter extends org.bson.json.Converter<java.lang.Long> {
				public static class: java.lang.Class<org.bson.json.LegacyExtendedJsonDateTimeConverter>;
				public convert(param0: java.lang.Long, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class LegacyExtendedJsonRegularExpressionConverter extends org.bson.json.Converter<org.bson.BsonRegularExpression> {
				public static class: java.lang.Class<org.bson.json.LegacyExtendedJsonRegularExpressionConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonRegularExpression, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class RelaxedExtendedJsonDateTimeConverter extends org.bson.json.Converter<java.lang.Long> {
				public static class: java.lang.Class<org.bson.json.RelaxedExtendedJsonDateTimeConverter>;
				public convert(param0: java.lang.Long, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class RelaxedExtendedJsonDoubleConverter extends org.bson.json.Converter<java.lang.Double> {
				public static class: java.lang.Class<org.bson.json.RelaxedExtendedJsonDoubleConverter>;
				public convert(param0: java.lang.Double, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class RelaxedExtendedJsonInt64Converter extends org.bson.json.Converter<java.lang.Long> {
				public static class: java.lang.Class<org.bson.json.RelaxedExtendedJsonInt64Converter>;
				public convert(param0: java.lang.Long, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellBinaryConverter extends org.bson.json.Converter<org.bson.BsonBinary> {
				public static class: java.lang.Class<org.bson.json.ShellBinaryConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonBinary, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellDateTimeConverter extends org.bson.json.Converter<java.lang.Long> {
				public static class: java.lang.Class<org.bson.json.ShellDateTimeConverter>;
				public convert(param0: java.lang.Long, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellDecimal128Converter extends org.bson.json.Converter<org.bson.types.Decimal128> {
				public static class: java.lang.Class<org.bson.json.ShellDecimal128Converter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.types.Decimal128, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellInt64Converter extends org.bson.json.Converter<java.lang.Long> {
				public static class: java.lang.Class<org.bson.json.ShellInt64Converter>;
				public convert(param0: java.lang.Long, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellMaxKeyConverter extends org.bson.json.Converter<org.bson.BsonMaxKey> {
				public static class: java.lang.Class<org.bson.json.ShellMaxKeyConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonMaxKey, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellMinKeyConverter extends org.bson.json.Converter<org.bson.BsonMinKey> {
				public static class: java.lang.Class<org.bson.json.ShellMinKeyConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonMinKey, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellObjectIdConverter extends org.bson.json.Converter<org.bson.types.ObjectId> {
				public static class: java.lang.Class<org.bson.json.ShellObjectIdConverter>;
				public convert(param0: org.bson.types.ObjectId, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellRegularExpressionConverter extends org.bson.json.Converter<org.bson.BsonRegularExpression> {
				public static class: java.lang.Class<org.bson.json.ShellRegularExpressionConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonRegularExpression, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellTimestampConverter extends org.bson.json.Converter<org.bson.BsonTimestamp> {
				public static class: java.lang.Class<org.bson.json.ShellTimestampConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonTimestamp, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class ShellUndefinedConverter extends org.bson.json.Converter<org.bson.BsonUndefined> {
				public static class: java.lang.Class<org.bson.json.ShellUndefinedConverter>;
				public convert(param0: any, param1: org.bson.json.StrictJsonWriter): void;
				public convert(param0: org.bson.BsonUndefined, param1: org.bson.json.StrictJsonWriter): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class StrictCharacterStreamJsonWriter extends org.bson.json.StrictJsonWriter {
				public static class: java.lang.Class<org.bson.json.StrictCharacterStreamJsonWriter>;
				public writeStartArray(): void;
				public constructor(param0: java.io.Writer, param1: org.bson.json.StrictCharacterStreamJsonWriterSettings);
				public writeNumber(param0: string): void;
				public writeStartArray(param0: string): void;
				public getCurrentLength(): number;
				public writeName(param0: string): void;
				public writeStartObject(param0: string): void;
				public writeString(param0: string, param1: string): void;
				public writeEndArray(): void;
				public writeString(param0: string): void;
				public writeNull(param0: string): void;
				public writeNull(): void;
				public isTruncated(): boolean;
				public writeStartObject(): void;
				public writeBoolean(param0: string, param1: boolean): void;
				public writeRaw(param0: string, param1: string): void;
				public writeBoolean(param0: boolean): void;
				public writeEndObject(): void;
				public writeNumber(param0: string, param1: string): void;
				public writeRaw(param0: string): void;
			}
			export module StrictCharacterStreamJsonWriter {
				export class JsonContextType {
					public static class: java.lang.Class<org.bson.json.StrictCharacterStreamJsonWriter.JsonContextType>;
					public static TOP_LEVEL: org.bson.json.StrictCharacterStreamJsonWriter.JsonContextType;
					public static DOCUMENT: org.bson.json.StrictCharacterStreamJsonWriter.JsonContextType;
					public static ARRAY: org.bson.json.StrictCharacterStreamJsonWriter.JsonContextType;
					public static valueOf(param0: string): org.bson.json.StrictCharacterStreamJsonWriter.JsonContextType;
					public static values(): native.Array<org.bson.json.StrictCharacterStreamJsonWriter.JsonContextType>;
				}
				export class State {
					public static class: java.lang.Class<org.bson.json.StrictCharacterStreamJsonWriter.State>;
					public static INITIAL: org.bson.json.StrictCharacterStreamJsonWriter.State;
					public static NAME: org.bson.json.StrictCharacterStreamJsonWriter.State;
					public static VALUE: org.bson.json.StrictCharacterStreamJsonWriter.State;
					public static DONE: org.bson.json.StrictCharacterStreamJsonWriter.State;
					public static values(): native.Array<org.bson.json.StrictCharacterStreamJsonWriter.State>;
					public static valueOf(param0: string): org.bson.json.StrictCharacterStreamJsonWriter.State;
				}
				export class StrictJsonContext {
					public static class: java.lang.Class<org.bson.json.StrictCharacterStreamJsonWriter.StrictJsonContext>;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class StrictCharacterStreamJsonWriterSettings {
				public static class: java.lang.Class<org.bson.json.StrictCharacterStreamJsonWriterSettings>;
				public isIndent(): boolean;
				public getMaxLength(): number;
				public static builder(): org.bson.json.StrictCharacterStreamJsonWriterSettings.Builder;
				public getIndentCharacters(): string;
				public getNewLineCharacters(): string;
			}
			export module StrictCharacterStreamJsonWriterSettings {
				export class Builder {
					public static class: java.lang.Class<org.bson.json.StrictCharacterStreamJsonWriterSettings.Builder>;
					public maxLength(param0: number): org.bson.json.StrictCharacterStreamJsonWriterSettings.Builder;
					public indentCharacters(param0: string): org.bson.json.StrictCharacterStreamJsonWriterSettings.Builder;
					public build(): org.bson.json.StrictCharacterStreamJsonWriterSettings;
					public indent(param0: boolean): org.bson.json.StrictCharacterStreamJsonWriterSettings.Builder;
					public newLineCharacters(param0: string): org.bson.json.StrictCharacterStreamJsonWriterSettings.Builder;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module json {
			export class StrictJsonWriter {
				public static class: java.lang.Class<org.bson.json.StrictJsonWriter>;
				/**
				 * Constructs a new instance of the org.bson.json.StrictJsonWriter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					writeName(param0: string): void;
					writeBoolean(param0: boolean): void;
					writeBoolean(param0: string, param1: boolean): void;
					writeNumber(param0: string): void;
					writeNumber(param0: string, param1: string): void;
					writeString(param0: string): void;
					writeString(param0: string, param1: string): void;
					writeRaw(param0: string): void;
					writeRaw(param0: string, param1: string): void;
					writeNull(): void;
					writeNull(param0: string): void;
					writeStartArray(): void;
					writeStartArray(param0: string): void;
					writeStartObject(): void;
					writeStartObject(param0: string): void;
					writeEndArray(): void;
					writeEndObject(): void;
					isTruncated(): boolean;
				});
				public constructor();
				public writeStartArray(): void;
				public writeNumber(param0: string): void;
				public writeStartArray(param0: string): void;
				public writeName(param0: string): void;
				public writeString(param0: string, param1: string): void;
				public writeStartObject(param0: string): void;
				public writeEndArray(): void;
				public writeString(param0: string): void;
				public writeNull(param0: string): void;
				public writeNull(): void;
				public isTruncated(): boolean;
				public writeStartObject(): void;
				public writeBoolean(param0: string, param1: boolean): void;
				public writeRaw(param0: string, param1: string): void;
				public writeBoolean(param0: boolean): void;
				public writeEndObject(): void;
				public writeNumber(param0: string, param1: string): void;
				public writeRaw(param0: string): void;
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class BSONTimestamp extends java.lang.Object {
				public static class: java.lang.Class<org.bson.types.BSONTimestamp>;
				public constructor(param0: number, param1: number);
				public compareTo(param0: org.bson.types.BSONTimestamp): number;
				public hashCode(): number;
				public getInc(): number;
				public equals(param0: any): boolean;
				public toString(): string;
				public getTime(): number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class BasicBSONList extends java.util.ArrayList<any> implements org.bson.BSONObject  {
				public static class: java.lang.Class<org.bson.types.BasicBSONList>;
				public get(param0: string): any;
				public keySet(): java.util.Set<string>;
				public containsKey(param0: string): boolean;
				public put(param0: number, param1: any): any;
				public putAll(param0: org.bson.BSONObject): void;
				public containsField(param0: string): boolean;
				public toMap(): java.util.Map;
				public putAll(param0: java.util.Map): void;
				public put(param0: string, param1: any): any;
				public constructor();
				public removeField(param0: string): any;
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class Binary {
				public static class: java.lang.Class<org.bson.types.Binary>;
				public constructor(param0: native.Array<number>);
				public getData(): native.Array<number>;
				public getType(): number;
				public hashCode(): number;
				public length(): number;
				public equals(param0: any): boolean;
				public constructor(param0: org.bson.BsonBinarySubType, param1: native.Array<number>);
				public constructor(param0: number, param1: native.Array<number>);
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class Code {
				public static class: java.lang.Class<org.bson.types.Code>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public getCode(): string;
				public toString(): string;
				public constructor(param0: string);
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class CodeWScope extends org.bson.types.Code {
				public static class: java.lang.Class<org.bson.types.CodeWScope>;
				public hashCode(): number;
				public getScope(): org.bson.BSONObject;
				public equals(param0: any): boolean;
				public constructor(param0: string);
				public constructor(param0: string, param1: org.bson.BSONObject);
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class CodeWithScope extends org.bson.types.Code {
				public static class: java.lang.Class<org.bson.types.CodeWithScope>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: string, param1: org.bson.Document);
				public constructor(param0: string);
				public getScope(): org.bson.Document;
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class Decimal128 extends java.lang.Number implements java.lang.Comparable<org.bson.types.Decimal128>  {
				public static class: java.lang.Class<org.bson.types.Decimal128>;
				public static POSITIVE_INFINITY: org.bson.types.Decimal128;
				public static NEGATIVE_INFINITY: org.bson.types.Decimal128;
				public static NEGATIVE_NaN: org.bson.types.Decimal128;
				public static NaN: org.bson.types.Decimal128;
				public static POSITIVE_ZERO: org.bson.types.Decimal128;
				public static NEGATIVE_ZERO: org.bson.types.Decimal128;
				public getHigh(): number;
				public compareTo(param0: org.bson.types.Decimal128): number;
				public getLow(): number;
				public longValue(): number;
				public static parse(param0: string): org.bson.types.Decimal128;
				public intValue(): number;
				public bigDecimalValue(): java.math.BigDecimal;
				public toString(): string;
				public isFinite(): boolean;
				public static fromIEEE754BIDEncoding(param0: number, param1: number): org.bson.types.Decimal128;
				public isNaN(): boolean;
				public floatValue(): number;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: number);
				public isNegative(): boolean;
				public constructor(param0: java.math.BigDecimal);
				public isInfinite(): boolean;
				public doubleValue(): number;
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class MaxKey {
				public static class: java.lang.Class<org.bson.types.MaxKey>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public toString(): string;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class MinKey {
				public static class: java.lang.Class<org.bson.types.MinKey>;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public toString(): string;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class ObjectId extends java.lang.Object {
				public static class: java.lang.Class<org.bson.types.ObjectId>;
				public constructor(param0: number, param1: number);
				public constructor(param0: java.nio.ByteBuffer);
				public constructor(param0: string);
				public constructor();
				public constructor(param0: native.Array<number>);
				public static getCurrentCounter(): number;
				public constructor(param0: java.util.Date, param1: number);
				public static isValid(param0: string): boolean;
				public compareTo(param0: org.bson.types.ObjectId): number;
				public hashCode(): number;
				public toHexString(): string;
				public toStringMongod(): string;
				public equals(param0: any): boolean;
				public toByteArray(): native.Array<number>;
				public static createFromLegacyFormat(param0: number, param1: number, param2: number): org.bson.types.ObjectId;
				public getTimestamp(): number;
				public constructor(param0: java.util.Date, param1: number, param2: number, param3: number);
				public static get(): org.bson.types.ObjectId;
				public getDate(): java.util.Date;
				public constructor(param0: java.util.Date);
				public toString(): string;
				public getMachineIdentifier(): number;
				public getTime(): number;
				public static getGeneratedMachineIdentifier(): number;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public static getGeneratedProcessIdentifier(): number;
				public putToByteBuffer(param0: java.nio.ByteBuffer): void;
				public getTimeSecond(): number;
				public getCounter(): number;
				public getProcessIdentifier(): number;
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class StringRangeSet extends java.util.Set<string> {
				public static class: java.lang.Class<org.bson.types.StringRangeSet>;
				public contains(param0: any): boolean;
				public addAll(param0: java.util.Collection<any>): boolean;
				public toArray(param0: native.Array<any>): native.Array<any>;
				public add(param0: string): boolean;
				public retainAll(param0: java.util.Collection<any>): boolean;
				public size(): number;
				public toArray(): native.Array<any>;
				public containsAll(param0: java.util.Collection<any>): boolean;
				public iterator(): java.util.Iterator<string>;
				public removeAll(param0: java.util.Collection<any>): boolean;
				public clear(): void;
				public isEmpty(): boolean;
				public remove(param0: any): boolean;
			}
		}
	}
}

declare module org {
	export module bson {
		export module types {
			export class Symbol {
				public static class: java.lang.Class<org.bson.types.Symbol>;
				public getSymbol(): string;
				public hashCode(): number;
				public equals(param0: any): boolean;
				public toString(): string;
				public constructor(param0: string);
			}
		}
	}
}

declare module org {
	export module bson {
		export module util {
			export abstract class AbstractCopyOnWriteMap<K, V, M>  extends java.util.concurrent.ConcurrentMap<any,any> {
				public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap<any,any,any>>;
				public values(): java.util.Collection<any>;
				public get(param0: any): any;
				public replace(param0: any, param1: any): any;
				public putAll(param0: java.util.Map<any,any>): void;
				public set(param0: any): void;
				public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
				public toString(): string;
				public containsKey(param0: any): boolean;
				public keySet(): java.util.Set<any>;
				public remove(param0: any, param1: any): boolean;
				public size(): number;
				public putIfAbsent(param0: any, param1: any): any;
				public remove(param0: any): any;
				public put(param0: any, param1: any): any;
				public hashCode(): number;
				public constructor(param0: java.util.Map, param1: org.bson.util.AbstractCopyOnWriteMap.View.Type);
				public clear(): void;
				public equals(param0: any): boolean;
				public getDelegate(): any;
				public isEmpty(): boolean;
				public containsValue(param0: any): boolean;
				public replace(param0: any, param1: any, param2: any): boolean;
				public copy(): any;
			}
			export module AbstractCopyOnWriteMap {
				export abstract class CollectionView<E>  extends java.util.Collection<any> {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.CollectionView<any>>;
					public addAll(param0: java.util.Collection<any>): boolean;
					public isEmpty(): boolean;
					public add(param0: any): boolean;
					public containsAll(param0: java.util.Collection<any>): boolean;
					public size(): number;
					public equals(param0: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public toArray(param0: native.Array<any>): native.Array<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public hashCode(): number;
					public contains(param0: any): boolean;
				}
				export class EntrySet extends org.bson.util.AbstractCopyOnWriteMap.CollectionView<java.util.Map.Entry<any,any>> implements java.util.Set<java.util.Map.Entry<any,any>>  {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.EntrySet>;
					public remove(param0: any): boolean;
					public removeAll(param0: java.util.Collection<any>): boolean;
					public clear(): void;
					public retainAll(param0: java.util.Collection<any>): boolean;
				}
				export class Immutable extends org.bson.util.AbstractCopyOnWriteMap.View<any,any> {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.Immutable>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public keySet(): java.util.Set<any>;
					public values(): java.util.Collection<any>;
				}
				export class KeySet extends org.bson.util.AbstractCopyOnWriteMap.CollectionView<any> implements java.util.Set<any>  {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.KeySet>;
					public remove(param0: any): boolean;
					public removeAll(param0: java.util.Collection<any>): boolean;
					public clear(): void;
					public retainAll(param0: java.util.Collection<any>): boolean;
				}
				export class Mutable extends org.bson.util.AbstractCopyOnWriteMap.View<any,any> {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.Mutable>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public keySet(): java.util.Set<any>;
					public values(): java.util.Collection<any>;
				}
				export class UnmodifiableIterator<T>  extends java.util.Iterator<any> {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.UnmodifiableIterator<any>>;
					public next(): any;
					public hasNext(): boolean;
					public remove(): void;
				}
				export class Values extends org.bson.util.AbstractCopyOnWriteMap.CollectionView<any> {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.Values>;
					public remove(param0: any): boolean;
					public removeAll(param0: java.util.Collection<any>): boolean;
					public clear(): void;
					public retainAll(param0: java.util.Collection<any>): boolean;
				}
				export abstract class View<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.View<any,any>>;
				}
				export module View {
					export abstract class Type {
						public static class: java.lang.Class<org.bson.util.AbstractCopyOnWriteMap.View.Type>;
						public static STABLE: org.bson.util.AbstractCopyOnWriteMap.View.Type;
						public static LIVE: org.bson.util.AbstractCopyOnWriteMap.View.Type;
						public static values(): native.Array<org.bson.util.AbstractCopyOnWriteMap.View.Type>;
						public static valueOf(param0: string): org.bson.util.AbstractCopyOnWriteMap.View.Type;
					}
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module util {
			export class ClassAncestry {
				public static class: java.lang.Class<org.bson.util.ClassAncestry>;
				public static getAncestry(param0: java.lang.Class): java.util.List;
			}
		}
	}
}

declare module org {
	export module bson {
		export module util {
			export class ClassMap<T>  extends java.lang.Object {
				public static class: java.lang.Class<org.bson.util.ClassMap<any>>;
				public get(param0: any): T;
				public put(param0: java.lang.Class<any>, param1: T): T;
				public clear(): void;
				public isEmpty(): boolean;
				public static getAncestry(param0: java.lang.Class): java.util.List;
				public constructor();
				public remove(param0: any): T;
				public size(): number;
			}
			export module ClassMap {
				export class ComputeFunction extends org.bson.util.Function<java.lang.Class<any>,any> {
					public static class: java.lang.Class<org.bson.util.ClassMap.ComputeFunction>;
					public apply(param0: any): any;
					public apply(param0: java.lang.Class<any>): any;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module util {
			export class ComputingMap<K, V>  extends java.lang.Object {
				public static class: java.lang.Class<org.bson.util.ComputingMap<any,any>>;
				public entrySet(): java.util.Set<java.util.Map.Entry<K,V>>;
				public putAll(param0: java.util.Map<any,any>): void;
				public static create(param0: org.bson.util.Function<any,any>): java.util.Map;
				public putIfAbsent(param0: K, param1: V): V;
				public replace(param0: K, param1: V): V;
				public apply(param0: K): V;
				public keySet(): java.util.Set<K>;
				public containsKey(param0: any): boolean;
				public apply(param0: any): any;
				public put(param0: K, param1: V): V;
				public values(): java.util.Collection<V>;
				public remove(param0: any, param1: any): boolean;
				public size(): number;
				public replace(param0: K, param1: V, param2: V): boolean;
				public remove(param0: any): V;
				public get(param0: any): V;
				public hashCode(): number;
				public clear(): void;
				public equals(param0: any): boolean;
				public isEmpty(): boolean;
				public containsValue(param0: any): boolean;
			}
		}
	}
}

declare module org {
	export module bson {
		export module util {
			export abstract class CopyOnWriteMap<K, V>  extends org.bson.util.AbstractCopyOnWriteMap<any,any,java.util.Map<any,any>> {
				public static class: java.lang.Class<org.bson.util.CopyOnWriteMap<any,any>>;
				public static builder(): org.bson.util.CopyOnWriteMap.Builder<any,any>;
				public static newLinkedMap(param0: java.util.Map): org.bson.util.CopyOnWriteMap<any,any>;
				public constructor(param0: java.util.Map<any,any>, param1: org.bson.util.AbstractCopyOnWriteMap.View.Type);
				public constructor(param0: java.util.Map, param1: org.bson.util.AbstractCopyOnWriteMap.View.Type);
				public constructor(param0: java.util.Map<any,any>);
				public static newLinkedMap(): org.bson.util.CopyOnWriteMap<any,any>;
				public constructor(param0: org.bson.util.AbstractCopyOnWriteMap.View.Type);
				public static newHashMap(): org.bson.util.CopyOnWriteMap<any,any>;
				public static newHashMap(param0: java.util.Map): org.bson.util.CopyOnWriteMap<any,any>;
				public constructor();
				public copy(): any;
				public copy(param0: java.util.Map): java.util.Map;
			}
			export module CopyOnWriteMap {
				export class Builder<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<org.bson.util.CopyOnWriteMap.Builder<any,any>>;
					public addAll(param0: java.util.Map<any,any>): org.bson.util.CopyOnWriteMap.Builder<K,V>;
					public liveViews(): org.bson.util.CopyOnWriteMap.Builder<K,V>;
					public newLinkedMap(): org.bson.util.CopyOnWriteMap<K,V>;
					public newHashMap(): org.bson.util.CopyOnWriteMap<K,V>;
					public stableViews(): org.bson.util.CopyOnWriteMap.Builder<K,V>;
				}
				export class Hash<K, V>  extends org.bson.util.CopyOnWriteMap<any,any> {
					public static class: java.lang.Class<org.bson.util.CopyOnWriteMap.Hash<any,any>>;
					public copy(): any;
					public copy(param0: java.util.Map): java.util.Map;
				}
				export class Linked<K, V>  extends org.bson.util.CopyOnWriteMap<any,any> {
					public static class: java.lang.Class<org.bson.util.CopyOnWriteMap.Linked<any,any>>;
					public copy(): any;
					public copy(param0: java.util.Map): java.util.Map;
				}
			}
		}
	}
}

declare module org {
	export module bson {
		export module util {
			export class Function<A, B>  extends java.lang.Object {
				public static class: java.lang.Class<org.bson.util.Function<any,any>>;
				/**
				 * Constructs a new instance of the org.bson.util.Function<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					apply(param0: A): B;
				});
				public constructor();
				public apply(param0: A): B;
			}
		}
	}
}

//Generics information:
//com.mongodb.Block:1
//com.mongodb.Function:2
//com.mongodb.async.AsyncBatchCursor:1
//com.mongodb.async.SingleResultCallback:1
//com.mongodb.client.AggregateIterable:1
//com.mongodb.client.ChangeStreamIterable:1
//com.mongodb.client.DistinctIterable:1
//com.mongodb.client.FindIterable:1
//com.mongodb.client.ListCollectionsIterable:1
//com.mongodb.client.ListDatabasesIterable:1
//com.mongodb.client.ListIndexesIterable:1
//com.mongodb.client.MapReduceIterable:1
//com.mongodb.client.MongoCollection:1
//com.mongodb.client.MongoCursor:1
//com.mongodb.client.MongoIterable:1
//com.mongodb.client.internal.AggregateIterableImpl:2
//com.mongodb.client.internal.ChangeStreamIterableImpl:1
//com.mongodb.client.internal.DistinctIterableImpl:2
//com.mongodb.client.internal.FindIterableImpl:2
//com.mongodb.client.internal.Java8AggregateIterableImpl:2
//com.mongodb.client.internal.Java8ChangeStreamIterableImpl:1
//com.mongodb.client.internal.Java8DistinctIterableImpl:2
//com.mongodb.client.internal.Java8FindIterableImpl:2
//com.mongodb.client.internal.Java8ListCollectionsIterableImpl:1
//com.mongodb.client.internal.Java8ListDatabasesIterableImpl:1
//com.mongodb.client.internal.Java8ListIndexesIterableImpl:1
//com.mongodb.client.internal.Java8MapReduceIterableImpl:2
//com.mongodb.client.internal.ListCollectionsIterableImpl:1
//com.mongodb.client.internal.ListDatabasesIterableImpl:1
//com.mongodb.client.internal.ListIndexesIterableImpl:1
//com.mongodb.client.internal.MapReduceIterableImpl:2
//com.mongodb.client.internal.MapReduceIterableImpl.WrappedMapReduceReadOperation:1
//com.mongodb.client.internal.MappingIterable:2
//com.mongodb.client.internal.MongoBatchCursorAdapter:1
//com.mongodb.client.internal.MongoCollectionImpl:1
//com.mongodb.client.internal.MongoIterableImpl:1
//com.mongodb.client.internal.MongoMappingCursor:2
//com.mongodb.client.model.Aggregates.BucketAutoStage:1
//com.mongodb.client.model.Aggregates.BucketStage:2
//com.mongodb.client.model.Aggregates.GraphLookupStage:1
//com.mongodb.client.model.Aggregates.GroupStage:1
//com.mongodb.client.model.Aggregates.LookupStage:1
//com.mongodb.client.model.Aggregates.ReplaceRootStage:1
//com.mongodb.client.model.Aggregates.SortByCountStage:1
//com.mongodb.client.model.DeleteManyModel:1
//com.mongodb.client.model.DeleteOneModel:1
//com.mongodb.client.model.Field:1
//com.mongodb.client.model.Filters.GeometryOperatorFilter:1
//com.mongodb.client.model.Filters.IterableOperatorFilter:1
//com.mongodb.client.model.Filters.OperatorFilter:1
//com.mongodb.client.model.Filters.SimpleEncodingFilter:1
//com.mongodb.client.model.InsertOneModel:1
//com.mongodb.client.model.ReplaceOneModel:1
//com.mongodb.client.model.SimpleExpression:1
//com.mongodb.client.model.UpdateManyModel:1
//com.mongodb.client.model.UpdateOneModel:1
//com.mongodb.client.model.Updates.PullAllUpdate:1
//com.mongodb.client.model.Updates.PushUpdate:1
//com.mongodb.client.model.Updates.SimpleUpdate:1
//com.mongodb.client.model.Updates.WithEachUpdate:1
//com.mongodb.client.model.Variable:1
//com.mongodb.client.model.WriteModel:1
//com.mongodb.client.model.changestream.ChangeStreamDocument:1
//com.mongodb.client.model.changestream.ChangeStreamDocumentCodec:1
//com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec:1
//com.mongodb.connection.AsyncCompletionHandler:1
//com.mongodb.connection.QueryResult:1
//com.mongodb.connection.netty.NettyStream.FutureAsyncCompletionHandler:1
//com.mongodb.internal.async.ErrorHandlingResultCallback:1
//com.mongodb.internal.connection.AbstractByteBufBsonDocument.Finder:1
//com.mongodb.internal.connection.AsynchronousChannelStream.BaseCompletionHandler:3
//com.mongodb.internal.connection.AsynchronousChannelStream.FutureAsyncCompletionHandler:1
//com.mongodb.internal.connection.ChangeEvent:1
//com.mongodb.internal.connection.ChangeListener:1
//com.mongodb.internal.connection.CommandProtocol:1
//com.mongodb.internal.connection.CommandProtocolImpl:1
//com.mongodb.internal.connection.CommandResultBaseCallback:1
//com.mongodb.internal.connection.CommandResultCallback:1
//com.mongodb.internal.connection.ConcurrentLinkedDeque:1
//com.mongodb.internal.connection.ConcurrentLinkedDeque.Node:1
//com.mongodb.internal.connection.ConcurrentLinkedDeque.RemovalReportingIterator:1
//com.mongodb.internal.connection.ConcurrentPool:1
//com.mongodb.internal.connection.ConcurrentPool.ItemFactory:1
//com.mongodb.internal.connection.FutureAsyncCompletionHandler:1
//com.mongodb.internal.connection.GetMoreProtocol:1
//com.mongodb.internal.connection.LegacyProtocol:1
//com.mongodb.internal.connection.Pool:1
//com.mongodb.internal.connection.QueryProtocol:1
//com.mongodb.internal.connection.ReplyMessage:1
//com.mongodb.internal.connection.SendMessageCallback:1
//com.mongodb.internal.connection.tlschannel.TlsChannelBuilder:1
//com.mongodb.internal.operation.AsyncOperations:1
//com.mongodb.internal.operation.Operations:1
//com.mongodb.internal.operation.SyncOperations:1
//com.mongodb.operation.AggregateOperation:1
//com.mongodb.operation.AggregateOperationImpl:1
//com.mongodb.operation.AsyncChangeStreamBatchCursor:1
//com.mongodb.operation.AsyncQueryBatchCursor:1
//com.mongodb.operation.AsyncReadOperation:1
//com.mongodb.operation.AsyncSingleBatchQueryCursor:1
//com.mongodb.operation.AsyncWriteOperation:1
//com.mongodb.operation.BaseFindAndModifyOperation:1
//com.mongodb.operation.BatchCursor:1
//com.mongodb.operation.BsonArrayWrapper:1
//com.mongodb.operation.ChangeStreamBatchCursor:1
//com.mongodb.operation.ChangeStreamOperation:1
//com.mongodb.operation.CommandOperationHelper.CommandProtocolExecutingCallback:2
//com.mongodb.operation.CommandOperationHelper.CommandTransformer:2
//com.mongodb.operation.CommandOperationHelper.IdentityTransformer:1
//com.mongodb.operation.CommandOperationHelper.TransformingResultCallback:2
//com.mongodb.operation.CommandReadOperation:1
//com.mongodb.operation.CommandResultArrayCodec:1
//com.mongodb.operation.CommandResultCodecProvider:1
//com.mongodb.operation.CommandResultDocumentCodec:1
//com.mongodb.operation.CommandWriteOperation:1
//com.mongodb.operation.DistinctOperation:1
//com.mongodb.operation.FindAndDeleteOperation:1
//com.mongodb.operation.FindAndReplaceOperation:1
//com.mongodb.operation.FindAndUpdateOperation:1
//com.mongodb.operation.FindOperation:1
//com.mongodb.operation.GroupOperation:1
//com.mongodb.operation.ListCollectionsOperation:1
//com.mongodb.operation.ListDatabasesOperation:1
//com.mongodb.operation.ListIndexesOperation:1
//com.mongodb.operation.MapReduceAsyncBatchCursor:1
//com.mongodb.operation.MapReduceBatchCursor:1
//com.mongodb.operation.MapReduceInlineResultsAsyncCursor:1
//com.mongodb.operation.MapReduceInlineResultsCursor:1
//com.mongodb.operation.MapReduceWithInlineResultsOperation:1
//com.mongodb.operation.OperationHelper.CallableWithConnection:1
//com.mongodb.operation.OperationHelper.CallableWithConnectionAndSource:1
//com.mongodb.operation.OperationHelper.ConnectionReleasingWrappedCallback:1
//com.mongodb.operation.OperationHelper.ReferenceCountedReleasingWrappedCallback:1
//com.mongodb.operation.ParallelCollectionScanOperation:1
//com.mongodb.operation.QueryBatchCursor:1
//com.mongodb.operation.ReadOperation:1
//com.mongodb.operation.WriteOperation:1
//org.bson.BsonDocumentReader.BsonDocumentMarkableIterator:1
//org.bson.BsonDocumentWrapper:1
//org.bson.codecs.Codec:1
//org.bson.codecs.CollectibleCodec:1
//org.bson.codecs.Decoder:1
//org.bson.codecs.Encoder:1
//org.bson.codecs.configuration.ChildCodecRegistry:1
//org.bson.codecs.configuration.LazyCodec:1
//org.bson.codecs.configuration.Optional:1
//org.bson.codecs.configuration.Optional.Some:1
//org.bson.codecs.jsr310.DateTimeBasedCodec:1
//org.bson.codecs.pojo.AutomaticPojoCodec:1
//org.bson.codecs.pojo.ClassModel:1
//org.bson.codecs.pojo.ClassModelBuilder:1
//org.bson.codecs.pojo.CollectionPropertyCodecProvider.CollectionCodec:1
//org.bson.codecs.pojo.ConventionSetPrivateFieldImpl.PrivatePropertyAccessor:1
//org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl.PrivatePropertyAccessor:1
//org.bson.codecs.pojo.CreatorExecutable:1
//org.bson.codecs.pojo.EnumPropertyCodecProvider.EnumCodec:1
//org.bson.codecs.pojo.IdGenerator:1
//org.bson.codecs.pojo.IdPropertyModelHolder:1
//org.bson.codecs.pojo.InstanceCreator:1
//org.bson.codecs.pojo.InstanceCreatorFactory:1
//org.bson.codecs.pojo.InstanceCreatorFactoryImpl:1
//org.bson.codecs.pojo.InstanceCreatorImpl:1
//org.bson.codecs.pojo.LazyMissingCodec:1
//org.bson.codecs.pojo.LazyPojoCodec:1
//org.bson.codecs.pojo.MapPropertyCodecProvider.MapCodec:1
//org.bson.codecs.pojo.PojoCodec:1
//org.bson.codecs.pojo.PojoCodecImpl:1
//org.bson.codecs.pojo.PropertyAccessor:1
//org.bson.codecs.pojo.PropertyAccessorImpl:1
//org.bson.codecs.pojo.PropertyMetadata:1
//org.bson.codecs.pojo.PropertyModel:1
//org.bson.codecs.pojo.PropertyModelBuilder:1
//org.bson.codecs.pojo.PropertyModelSerializationImpl:1
//org.bson.codecs.pojo.PropertySerialization:1
//org.bson.codecs.pojo.TypeData:1
//org.bson.codecs.pojo.TypeData.Builder:1
//org.bson.codecs.pojo.TypeWithTypeParameters:1
//org.bson.json.Converter:1
//org.bson.util.AbstractCopyOnWriteMap:3
//org.bson.util.AbstractCopyOnWriteMap.CollectionView:1
//org.bson.util.AbstractCopyOnWriteMap.UnmodifiableIterator:1
//org.bson.util.AbstractCopyOnWriteMap.View:2
//org.bson.util.ClassMap:1
//org.bson.util.ComputingMap:2
//org.bson.util.CopyOnWriteMap:2
//org.bson.util.CopyOnWriteMap.Builder:2
//org.bson.util.CopyOnWriteMap.Hash:2
//org.bson.util.CopyOnWriteMap.Linked:2
//org.bson.util.Function:2

